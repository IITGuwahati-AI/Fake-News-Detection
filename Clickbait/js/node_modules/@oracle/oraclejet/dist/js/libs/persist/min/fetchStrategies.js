define(["./persistenceManager","./persistenceUtils","./impl/defaultCacheHandler","./impl/logger"],function(a,b,c,d){"use strict";function e(e){e=e||{};var f=e.serverResponseCallback,g=e.backgroundFetch,h="disabled"==g;return h&&(f=null),f||h||(f=function(a,b){return Promise.resolve(b)}),function(e,g){if(d.log("Offline Persistence Toolkit fetchStrategies: Processing CacheFirstStrategy"),f)var h=function(d,e){var h=b.buildEndpointKey(d);c.registerEndpointOptions(h,g);var i={};return b._cloneResponse(e,{url:d.url}).then(function(a){return f(d,a)}).then(function(b){return i.resolvedResponse=b,a.getCache().hasMatch(d)}).then(function(c){var e=i.resolvedResponse.clone();return c?null==i.resolvedResponse||b.isCachedResponse(i.resolvedResponse)||"GET"!=d.method&&"HEAD"!=d.method?e:a.getCache().put(d,i.resolvedResponse).then(function(){return e}):e}).then(function(a){return c.unregisterEndpointOptions(h),Promise.resolve(a)})};return i(e,g,h)}}function f(){return function(c,e){return d.log("Offline Persistence Toolkit fetchStrategies: Processing CacheIfOfflineStrategy"),a.isOnline()?a.browserFetch(c).then(function(a){return a.ok?b._cloneResponse(a,{url:c.url}):g(c,a,e)},function(a){return d.log(a),i(c,e)}):i(c,e)}}function g(a,b,c){return b.status<500?(d.log("Offline Persistence Toolkit fetchStrategies: Response is not ok"),Promise.resolve(b)):i(a,c)}function h(b){return a.getCache().match(b)}function i(b,c,e){return new Promise(function(f,g){d.log("Offline Persistence Toolkit fetchStrategies: Process queryParams for Request"),k(b,c).then(function(c){c?(f(c.clone()),j(b,e)):(d.log("Offline Persistence Toolkit fetchStrategies: Response for queryParams is not null"),h(b).then(function(c){c?(d.log("Offline Persistence Toolkit fetchStrategies: Cached Response is not null"),f(c),j(b,e)):(d.log("Offline Persistence Toolkit fetchStrategies: Cached Response is null"),a.browserFetch(b).then(function(a){var c=a.clone();f(c),e&&e(b,a)},function(a){var b={status:503,statusText:"No cached response exists"};f(new Response(null,b))}))}))})})}function j(c,e){e&&(d.log("Offline Persistence Toolkit fetchStrategies: Fetch for ServerResponseCallback"),a.browserFetch(c).then(function(a){b._cloneResponse(a,{url:c.url}).then(function(a){e(c,a)})}))}function k(a,b){var c=l(b);return null==c?Promise.resolve():c(a,b)}function l(a){var b=null;return null!=a.queryHandler&&(b=a.queryHandler),b}return{getCacheFirstStrategy:e,getCacheIfOfflineStrategy:f}});