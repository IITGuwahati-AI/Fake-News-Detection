// Copyright (c) 2014, 2019, Oracle and/or its affiliates. The Universal Permissive License (UPL), Version 1.0
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// WARNING: do not directly import this file, instead import the 
//          version in your base theme's directory, 
//          for example alta/widgets/_oj.alta.formcontrol.select.scss
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@import "../../utilities/oj.utilities";
@import "oj.common.formcontrol.mixins";


@if $includeSelectClasses != false {
  @include module-include-once("common.select") {

    /* select */
    /* --------------------------------------------------------------- */


    /************************* oj-form-control-inherit OVERRIDES *************************/
    // DO NOT ADD SELECTOR DEFINITIONS BEFORE THESE OVERRIDES AS SPECIFICITY ISSUES CAN ARISE

    // The oj-form-control-inherit selector on an ancestor indicates that the form control should
    // inherit styles, like width/height/borders/colors/text-alignment, etc. This is used for
    // editable datagrid cells and editable table cells
    // -----------------------------------------------------------------------------------------

    // remove borders, inherit colors and stretch the height
    // need extra specificity since base selector has direction selectors
    .oj-form-control-inherit:not(.oj-form-control-default) .oj-select .oj-select-choice,
    .oj-form-control-inherit:not(.oj-form-control-default) .oj-select .oj-select-choices {
      @include oj-form-control-inherit();
    }

    // Styling on form control dom which doesn't require text-align, padding, or color
    .oj-form-control-inherit:not(.oj-form-control-default) .oj-select-select,
    .oj-form-control-inherit:not(.oj-form-control-default) .oj-select-chosen {
      background-color:inherit;
      border-width: 0;
    }

    .oj-form-control-inherit:not(.oj-form-control-default) .oj-select-select {
      height:100%;
    }

    // TODO: single select when height is large, it doesn't vertically center align
    // TODO: multi select's color inherit does not work. the color does not get inherited. (same with combobox)

    /************************* END OF oj-form-control-inherit OVERRIDES *************************/


    // This is to prevent the flash of unstyled content before the html becomes JET components.
    @if $initialVisibility == hidden {
      oj-select:not(.oj-complete) {
        visibility: hidden;
      }      
    }

    .oj-select {
      position: relative;
      display: inline-block;
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        max-width: var(--oj-text-field-lg-max-width);
        min-width: var(--oj-text-field-min-width);
        // font size needs to be on the root, because max/min width is in em.
        font-size: var(--oj-text-field-trigger-font-size);
        @include oj-form-control-text-size-adjust-css-vars();
      }
      @else {
        max-width: $formControlLargeMaxWidth;
        min-width: $formControlMinWidth;
        // font size needs to be on the root, because max/min width is in em.
        font-size: $formControlTriggerFontSize;
        @include oj-form-control-text-size-adjust($formControlTriggerFontSize);        
      }

      width: 100%;
      box-sizing: border-box; 
    }
    // .oj-form-control-full-width is an override to set max-width to 100% if on the
    // element or an ancestor element
    .oj-form-control-full-width.oj-select,
    .oj-form-control-full-width .oj-select {
      max-width: 100%;
    }

    /* 
     * Suppress focus ring around the select box 
     */
    .oj-select .oj-select-choice:not(.oj-focus-highlight):focus,
    .oj-select .oj-select-choices:not(.oj-focus-highlight):focus {
      outline: none;
    }

    /* 
     * Applied to the select box which includes the selected text and the dropdown open icon
     */
    .oj-select-choice {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        @include oj-form-control-content-css-vars($valueColor: --oj-text-field-trigger-value-color);
        height: var(--oj-text-field-trigger-height);
        html:not([dir="rtl"]) & {
          padding-left: var(--oj-text-field-padding-horizontal);
          padding-right: 0;
        }
        html[dir="rtl"] & {
          padding-left: 0;
          padding-right: var(--oj-text-field-padding-horizontal);
        }
      }
      @else {
        @include oj-form-control-content($formControlTriggerValueColor);
        height: $formControlTriggerHeight;
        @include oj-ltr() {
          padding-left: $formControlPaddingHorizontal;
          padding-right: 0;
        }
        @include oj-rtl() {
          padding-left: 0;
          padding-right: $formControlPaddingHorizontal;
        }
      }
      box-sizing: border-box;
      display: inline-flex;
      align-items: center;
      width: 100%;
      overflow: hidden;
      white-space: nowrap;
      background-clip: padding-box;
      text-overflow: ellipsis;
    }

    /* Styling for readonly mode */
    .oj-select.oj-read-only .oj-select-choice,
    .oj-select.oj-read-only .oj-select-choices {
      background-color: transparent;
      border-color: transparent;
      outline: none;
      @include oj-ltr() {
        padding-left: 0;
      }
      @include oj-rtl() {
        padding-right: 0;
      }
    }

    /* apply to the selected entries */
    .oj-select.oj-read-only .oj-select-chosen,
    .oj-select.oj-read-only .oj-select-selected-choice {
      outline: none;
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        @include oj-form-control-content-readonly($outputCssVars: true);
      }
      @else {
        @include oj-form-control-content-readonly;        
      }
    }

    /* apply to the first selected entry in readonly mode */
    .oj-select.oj-read-only li.oj-select-selected-choice:first-child {
      @include oj-ltr() {
        padding-left: 0;
      }
      @include oj-rtl() {
        padding-right: 0;
      }
    }

    /* don't show dropdown trigger */
    .oj-select.oj-read-only .oj-select-arrow {
      display: none;
    }

    /* don't show clear entry trigger */
    .oj-select.oj-read-only .oj-select-clear-entry {
      display: none;
    }

    /* Styling for text-align */
    .oj-form-control-text-align-right .oj-select .oj-select-choice
    {
      text-align: right;
    }
    .oj-form-control-text-align-start .oj-select .oj-select-choice
    {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        text-align: left;
        html[dir="rtl"] & {
          text-align: right;
        }
      }
      @else {
        @include oj-bidi-property(
          $property: 'text-align',
          $startOrEnd: start,
          $important: false);
      }
    }
    .oj-form-control-text-align-end .oj-select .oj-select-choice
    {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        text-align: right;
        html[dir="rtl"] & {
          text-align: left;
        }
      }
      @else {
        @include oj-bidi-property(
          $property: 'text-align',
          $startOrEnd: end,
          $important: false);
      }
    }

    /* Styling for native render mode text-align */
    .oj-form-control-text-align-right .oj-select .oj-select-select
    {
      text-align: right;
      direction: rtl;

      @include oj-ltr() {
        @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
        {
          padding-right: calc(16px + var(--oj-select-arrow-padding-start)
                                   + var(--oj-select-arrow-padding-end));
        }
        @else {
          padding-right: calc(16px + #{oj-shorthand-property-value-left($selectArrowPadding)}
                              + #{oj-shorthand-property-value-right($selectArrowPadding)});          
        }
      }
    }
    .oj-form-control-text-align-start .oj-select .oj-select-select
    {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        text-align: left;
        html[dir="rtl"] & {
          text-align: right;
        }
      }
      @else {
        @include oj-bidi-property(
          $property: 'text-align',
          $startOrEnd: start,
          $important: false);
      }
      @include oj-ltr() {
        direction: ltr;
      }
    
      @include oj-rtl() {
        direction: rtl;
      }
    }
    .oj-form-control-text-align-end .oj-select .oj-select-select
    {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        text-align: right;
        html[dir="rtl"] & {
          text-align: left;
        }
      }
      @else {
        @include oj-bidi-property(
          $property: 'text-align',
          $startOrEnd: end,
          $important: false);
      }
      @include oj-ltr() {
        direction: rtl;
        @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
        {
          padding-right: calc(16px + var(--oj-select-arrow-padding-start)
                                   + var(--oj-select-arrow-padding-end));
        }
        @else {
          padding-right: calc(16px + #{oj-shorthand-property-value-left($selectArrowPadding)}
                              + #{oj-shorthand-property-value-right($selectArrowPadding)});          
        }
      }
    
      @include oj-rtl() {
        direction: ltr;
        @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
        {
          padding-left: calc(16px + var(--oj-select-arrow-padding-start)
                                   + var(--oj-select-arrow-padding-end));
        }
        @else {
          padding-left: calc(16px + #{oj-shorthand-property-value-left($selectArrowPadding)}
                              + #{oj-shorthand-property-value-right($selectArrowPadding)});          
        }
      }
    }
    .oj-form-control-text-align-right .oj-select .oj-select-choices li
    {
      float: right;
    }
    .oj-form-control-text-align-start .oj-select .oj-select-choices li
    {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        float: left;
        html[dir="rtl"] & {
          float: right;
        }
      }
      @else {
        @include oj-bidi-property(
          $property: 'float',
          $startOrEnd: start,
          $important: false);
      }
    }
    .oj-form-control-text-align-end .oj-select .oj-select-choices li
    {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        float: right;
        html[dir="rtl"] & {
          float: left;
        }
      }
      @else {
        @include oj-bidi-property(
          $property: 'float',
          $startOrEnd: end,
          $important: false);
      }
    }
    .oj-form-control-text-align-right .oj-select-selected-choice,
    .oj-form-control-text-align-end .oj-select-selected-choice {
      @include oj-ltr() {
        margin: 5px 0 0 6px;
      }
    }
    .oj-form-control-text-align-end .oj-select-selected-choice {
      @include oj-rtl() {
        margin: 5px 6px 0 0;
      }
    }

    /* multi-select */

    /* 
     * Applied to the multi-select box which includes the input field and the selected choices
     */
    .oj-select-choices {
      box-sizing: border-box;
      height: auto;
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        min-height: calc(var(--oj-text-field-trigger-height) * 1.28);
        padding: 0 var(--oj-text-field-padding-horizontal) 5px;  
        @include oj-form-control-content-css-vars;
      }
      @else {
        min-height: calc(#{$formControlTriggerHeight} * 1.28);
        padding: 0 $formControlPaddingHorizontal 5px;   
        @include oj-form-control-content;   
      }
      margin: 0;
      
      position: relative;
      cursor: text;
      overflow: hidden;
    }

    /* 
     * Applied to the multi-select box list items which include the search field and the selected choices
     */
    .oj-select-choices li {
      list-style: none; 
      @include oj-ltr() {
        float: left;
      }
      @include oj-rtl() {
        float: right;
      }   
    }

    /* 
     * Applied to the multi-select placeholder
     */
    .oj-select-multi .oj-select-default {
      margin-top: 5px;
      padding: 0;
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        line-height: calc(var(--oj-text-field-trigger-height) * 0.9);
        color: var(--oj-text-field-placeholder-color); 
        font-style: var(--oj-text-field-placeholder-font-style);      
      }
      @else {
        line-height: calc(#{$formControlTriggerHeight} * 0.9);
        color: $formControlPlaceholderColor; 
        font-style: $formControlPlaceholderFontStyle;        
      }
    }

    /* 
     * Applied to the input field. Override default .oj-listbox-input
     */
    .oj-select-multi .oj-listbox-input {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        background-color: var(--oj-text-field-bg-color);
        color: var(--oj-text-field-input-value-color);
        font-size: var(--oj-text-field-input-font-size);
        @include oj-form-control-text-size-adjust-css-vars();    
      }
      @else {
        background-color: $formControlBgColor;
        color: $formControlInputValueColor;
        font-size: $formControlInputFontSize;
        @include oj-form-control-text-size-adjust($formControlInputFontSize);
      }

      display: inline-block;
      overflow: hidden;
      white-space: nowrap;
      text-overflow: ellipsis; 

      
      padding-top: 0;
      padding-bottom: 0;
      @include oj-ltr() {
        padding-right: 0;
        padding-left: 0;
      }
      @include oj-rtl() {
        padding-left: 0;
        padding-right: 0;
      }

    }

    /* 
     * Applied to the multi-select selected choice
     */
    .oj-select-selected-choice {
      position: relative;
      line-height: 1.8rem;
      cursor: default;
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        border-radius: var(--oj-button-border-radius);
        border: 1px solid var(--oj-button-outlined-chrome-border-color);
        color: var(--oj-button-outlined-chrome-text-color); 
      }
      @else {
        @include oj-border-radius($buttonBorderRadius);
        border: 1px solid $buttonOutlinedChromeBorderColor;
        color: $buttonOutlinedChromeTextColor;        
      }

      background-clip: padding-box;
      @include oj-ltr() {
        padding: 0 4px 0 7px;
        margin: 5px 6px 0 0;
      }
      @include oj-rtl() {
        padding: 0 7px 0 4px;
        margin: 5px 0 0 6px;
      }
    }

    /* 
     * Applied to the multi-select selected choice when getting focus
     */
    .oj-select-selected-choice.oj-focus {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        @include oj-browser-focus-outline-approximation-css-vars(var(--oj-button-text-color));
      }
      @else {
        @include oj-browser-focus-outline-approximation($buttonTextColor);        
      }
    }

    /* 
     * Applied to the label of the selected choice
     */
    .oj-select-selected-choice-label {
      display: inline-block;
      vertical-align: middle;
    }

    /*
     * Applied to the clear entry field of the selected choice
     */
    .oj-select-clear-entry {
      display: inline-block;
      outline: none;
      text-align: center;
      vertical-align: middle;
      line-height: 100%;
      @include oj-ltr() {
        right: 3px;
      }
      @include oj-rtl() {
        left: 3px;
      } 
    }

    /* end multiselect */

    /* Invalid styling for the widget */
    .oj-select.oj-invalid .oj-select-choice,
    .oj-select-native.oj-invalid .oj-select-select,
    .oj-select-multi.oj-invalid .oj-select-choices {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        border-width: var(--oj-text-field-messaging-border-top-width) var(--oj-text-field-messaging-border-right-width) var(--oj-text-field-messaging-border-bottom-width) var(--oj-text-field-messaging-border-left-width);
        border-color: var(--oj-text-field-border-color-invalid);
      }
      @else {
        @include oj-form-control-border-message-width;
        border-color: $borderColorError;
      }
      border-style: solid;
    }

    /* Warning styling for the widget */
    .oj-select.oj-warning .oj-select-choice,
    .oj-select-native.oj-warning .oj-select-select,
    .oj-select-multi.oj-warning .oj-select-choices {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        border-width: var(--oj-text-field-messaging-border-top-width) var(--oj-text-field-messaging-border-right-width) var(--oj-text-field-messaging-border-bottom-width) var(--oj-text-field-messaging-border-left-width);
        border-color: var(--oj-text-field-border-color-warning);
      }
      @else {
        @include oj-form-control-border-message-width;
        border-color: $borderColorWarning;
      }
      border-style: solid;
      
    }

    /* disabled styles  for single-select */
    .oj-select.oj-disabled .oj-select-choice {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        @include oj-form-control-content-disabled($outputCssVars: true);
      }
      @else {
        @include oj-form-control-content-disabled;
      }
    }

    /* 
     * Disabled styles for multi-select 
     */
    .oj-select-multi.oj-disabled .oj-select-choices,
    .oj-select-multi.oj-disabled .oj-select-selected-choice,
    .oj-select-multi.oj-disabled .oj-select-selected-choice.oj-focus,
    .oj-select-multi.oj-disabled input {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        @include oj-form-control-content-disabled($outputCssVars: true);
      }
      @else {
        @include oj-form-control-content-disabled;
      }
      outline: 0;
    }

    .oj-select-multi.oj-disabled .oj-select-clear-entry {
      display: none;
      background: none; 
    }

    /* 
     * Applied to the place holder text
     */
    .oj-select-chosen.oj-select-default {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        color: var(--oj-text-field-placeholder-color); 
        font-style: var(--oj-text-field-placeholder-font-style);
      }
      @else {
        color: $formControlPlaceholderColor; 
        font-style: $formControlPlaceholderFontStyle;
      }
    }

    /* 
     * Applied to the selected text
     */
    .oj-select-chosen {
      border: 0;
      outline: 0;
      white-space: nowrap;
      flex: 1 1 auto; 
      overflow: hidden;
      text-overflow: ellipsis;
      box-sizing: border-box;

      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        box-shadow: none;
        html:not([dir="rtl"]) & {
          padding-right: var(--oj-text-field-padding-horizontal);
        }
        html[dir="rtl"] & {
          padding-left: var(--oj-text-field-padding-horizontal);
        }
      }
      @else {
        @include oj-box-shadow(none);
        @include oj-ltr() {
          padding-right: $formControlPaddingHorizontal;
        }
        @include oj-rtl() {
          padding-left: $formControlPaddingHorizontal;
        }
      }

    }

    /* 
     * Applied to the dropdown open icon in jet theme
     */
    .oj-select-jet .oj-select-arrow {
      flex: 0 0 auto; 
      cursor: pointer;
      box-sizing: border-box;
      text-align: center;
      vertical-align: middle;
    }

    // High Contrast
    //--------------------------------------------

    // a disabled select will have a less prominent border
    .oj-hicontrast .oj-select.oj-disabled {
      border-style: dotted;
    }

    /* 
     * Applied to the dropdown open icon
     */
    .oj-select-open-icon {
      @extend .oj-fwk-icon-arrow02-s;
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        html[dir="rtl"] & {
          padding-left: var(--oj-select-arrow-padding-end);
          padding-right: var(--oj-select-arrow-padding-start);
        }      
        html:not([dir="rtl"]) & {
          padding-right: var(--oj-select-arrow-padding-end);
          padding-left: var(--oj-select-arrow-padding-start);
        }  
      }
      @else {
        @include oj-rtl() {
          padding-left: oj-shorthand-property-value-right($selectArrowPadding);
          padding-right: oj-shorthand-property-value-left($selectArrowPadding);        
        }
        @include oj-ltr() {
          padding-right: oj-shorthand-property-value-right($selectArrowPadding);
          padding-left: oj-shorthand-property-value-left($selectArrowPadding);
        }        
      }

    }

    .oj-select-open-icon,
    .oj-select-open-icon:hover,
    .oj-select-open-icon:focus  {
      text-decoration: none;
    }
    

    .oj-select-multiple-open-icon {
      @extend .oj-fwk-icon-dots-vertical !optional;

      font-size: 24px;
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        html[dir="rtl"] & {
          padding-left: var(--oj-select-arrow-padding-end);
          padding-right: var(--oj-select-arrow-padding-start);
        }      
        html:not([dir="rtl"]) & {
          padding-right: var(--oj-select-arrow-padding-end);
          padding-left: var(--oj-select-arrow-padding-start);
        }  
      }
      @else {
        @include oj-rtl() {
          padding-left: oj-shorthand-property-value-right($selectArrowPadding);
          padding-right: oj-shorthand-property-value-left($selectArrowPadding);
        }
        @include oj-ltr() {
          padding-right: oj-shorthand-property-value-right($selectArrowPadding);
          padding-left: oj-shorthand-property-value-left($selectArrowPadding);
        }      
      }

    }

    /* clear entry icon */
    .oj-select-clear-entry-icon {
      @extend .oj-fwk-icon-cross;
    }


    // Native theming
    //--------------------------------------------

    /* Override default options*/
    $selectDefaultOptions: ();

    @if ($selectRenderModeOptionDefault)
    {
      $selectDefaultOptions: map-merge($selectDefaultOptions, (renderMode: $selectRenderModeOptionDefault));
    }
    .oj-select-option-defaults {
      font-family: oj-json-from-map($selectDefaultOptions);
    }

    //Bug 23299519 - single select doesn't center align in inherit styles demo
    .oj-select-native .oj-select-arrow {
      display: inline-block;
      text-align: center;
      position: absolute;
      top: calc(50% - 1rem);
      @include oj-ltr() {
        right: 0;
      }
      @include oj-rtl() {
        left: 0;
      }
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        line-height: var(--oj-text-field-trigger-height);
        color: var(--oj-select-arrow-color);        
      }
      @else {
        line-height: $formControlTriggerHeight;
        color: $selectArrowColor;        
      }

      pointer-events: none;
    }

    .oj-select-native.oj-disabled .oj-select-arrow {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        opacity: var(--oj-text-field-opacity-disabled);
      }
      @else {
        opacity: $formControlOpacityDisabled;        
      }
    }

    //Bug 23755887 - select messaging issues
    .oj-select-native.oj-invalid .oj-select-arrow,
    .oj-select-native.oj-warning .oj-select-arrow {
      top: 0;
    }

    //select tag
    .oj-select-select {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        @include oj-form-control-content-css-vars($valueColor: '--oj-text-field-trigger-value-color');
        height: var(--oj-text-field-trigger-height);
        padding: 0 var(--oj-text-field-padding-horizontal);        
      }
      @else {
        @include oj-form-control-content($formControlTriggerValueColor);
        height: $formControlTriggerHeight;
        padding: 0 $formControlPaddingHorizontal;
      }
      box-sizing: border-box;
      width: 100%;
      white-space: nowrap;
      background-clip: padding-box;
    }

    select.oj-select-select.oj-select-default:not([multiple]) {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        color: var(--oj-text-field-placeholder-color); 
        font-style: var(--oj-text-field-placeholder-font-style);        
      }
      @else {
        color: $formControlPlaceholderColor; 
        font-style: $formControlPlaceholderFontStyle;        
      }
    }

    .oj-select-select[disabled] {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        @include oj-form-control-content-disabled($outputCssVars: true);
      }
      @else {
        @include oj-form-control-content-disabled;        
      }
    }

    .oj-select-select option {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        background-color: var(--oj-text-field-bg-color);
      }
      @else {
        background-color: $formControlBgColor;        
      }
    }

    /* 
     * Applied to focus ring around the select box 
     */
    .oj-select-select:not(.oj-focus-highlight):focus {
      outline: none;
    }

    //jet theme
    // trigger
    .oj-select-jet:not(.oj-read-only).oj-enabled .oj-select-choice:active,
      .oj-select-native.oj-enabled .oj-select-select:active {
        @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
        {
          background-color: var(--oj-text-field-trigger-bg-color-active);
        }
        @else {
          background-color: $formControlTriggerBgColorActive;          
        }
    }

    .oj-select-jet .oj-select-arrow.oj-select-open-icon:not(.oj-disabled) {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true)
      {
        color: var(--oj-select-arrow-color);
      }
      @else {
        color: $selectArrowColor;
      }
    }
  }
}
