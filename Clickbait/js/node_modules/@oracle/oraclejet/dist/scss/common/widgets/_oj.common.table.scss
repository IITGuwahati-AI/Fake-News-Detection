// Copyright (c) 2014, 2019, Oracle and/or its affiliates. The Universal Permissive License (UPL), Version 1.0
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// WARNING: do not directly import this file, instead import the
//          version in your base theme's directory,
//          for example alta/widgets/_oj.alta.table.scss
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@import "../../utilities/oj.utilities";
@import "oj.common.formcontrol.mixins";

@if $includeTableClasses != false  {
  @include module-include-once("common.table") {

    /* table */
    /* --------------------------------------------------------------- */

    // This is to prevent the flash of unstyled content before the html becomes JET components.
    @if $initialVisibility == hidden {
      oj-table:not(.oj-complete) {
        visibility: hidden;
      }
    }

    /* Component option defaults. */
    $tableDefaultOptions: ();
    $tableAnimationDefaults: ();

    @if ($tableAddAnimation) {
        $tableAnimationDefaults: map-merge($tableAnimationDefaults, (add: $tableAddAnimation));
    }

    @if ($tableRemoveAnimation) {
        $tableAnimationDefaults: map-merge($tableAnimationDefaults, (remove: $tableRemoveAnimation));
    }

    @if ($tableUpdateAnimation) {
        $tableAnimationDefaults: map-merge($tableAnimationDefaults, (update: $tableUpdateAnimation));
    }

    @if ($tableAnimationDefaults) {
        $tableDefaultOptions: map-merge($tableDefaultOptions, (animation: $tableAnimationDefaults));
    }

    @if ($tableDisplayOptionDefault != null) {
       $tableDefaultOptions: map-merge($tableDefaultOptions, (display: $tableDisplayOptionDefault));
    }
    @if ($loadingIndicatorDelayDuration != null)
    {
       $tableDefaultOptions: map-merge($tableDefaultOptions, (showIndicatorDelay: $loadingIndicatorDelayDuration));
    }

    .oj-table-option-defaults {
       font-family: oj-json-from-map($tableDefaultOptions);
    }

    /* Styling for the root component element. */
    .oj-table {
       position: relative;
       line-height: normal;
       font-size: inherit;
       min-width: 240px;
     @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       min-height: calc(2 * var(--oj-collection-row-height));
     } @else {
       // min-height is 2 rows (1 row for the header + 1 row for the body)
       // to leave space for the No Data message.
       min-height: calc(2 * #{$collectionRowHeight});
     }
       // prevent graying on iOS safari
       -webkit-tap-highlight-color: rgba(0,0,0,0);
    }

    /* Grid display styling for the root component element. */
    .oj-table.oj-table-grid-display {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       border: 1px solid var(--oj-collection-border-color);
       background-color: var(--oj-collection-bg-color);
      } @else {
       border: 1px solid $collectionBorderColor;
       background-color: $collectionBgColor;
      }
    }

    /* Styling for the root component element with warning. */
    .oj-table.oj-warning {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       border: 1px solid var(--oj-text-field-border-color-warning);
      } @else {
       border: 1px solid $borderColorWarning;
      }
    }

    /* Styling for the component div container element. */
    .oj-table-container {
       display: inline-block;
       vertical-align:top;
       clear: both;
       box-sizing: border-box;
    }

    /* Styling for HTML table element. */
    table.oj-table-element {
       box-sizing: border-box;
       width: calc(100% - 1px);
       outline: none;
       border-collapse: collapse;
       border-spacing: 0;
       font-size: inherit;
    }

    /* Styling for HTML table element when column resizing. */
    table.oj-table-element.oj-table-column-header-resizing {
       user-select: none;
       -moz-user-select: none;
       -webkit-user-select: none;
       -ms-user-select: none;
    }

    /* Styling for the header element. */
    .oj-table-header {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        color: var(--oj-collection-header-text-color);
        border-bottom: 1px solid var(--oj-table-header-border-color);
      } @else {
        color: $collectionHeaderTextColor;
        border-bottom: 1px solid $tableHeaderBorderColor;
      }
      font-size: inherit;
      overflow: hidden;
    }

    /* Styling for the header element when table has vertical or horizontal scrollbars. */
    .oj-table-scroll-vertical .oj-table-header,
    .oj-table-scroll-horizontal .oj-table-header {
      display: block;
      position: relative;
    }

    /* Grid display styling for the header element. */
    .oj-table-grid-display .oj-table-header {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        background-color: var(--oj-collection-header-bg-color);
        border-bottom: 1px solid var(--oj-collection-header-border-color);
      } @else {
        background-color: $collectionHeaderBgColor;
        border-bottom: 1px solid $collectionHeaderBorderColor;
      }
    }

    /* Styling for the header row element. */
    .oj-table-header-row {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        height: var(--oj-table-row-height);
      } @else {
        height: $tableRowHeight;
      }
      font-size: inherit;
      vertical-align: middle;
    }

    /* Grid display table styling for the header row element. */
    .oj-table-grid-display .oj-table-header-row {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        height: calc(var(--oj-collection-row-height) + 4px);
      } @else {
        height: calc(#{$collectionRowHeight} + 4px);
      }
    }

    /* Styling for the header row element when table is scrollable. */
    .oj-table-scroll .oj-table-header-row {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        min-height: var(--oj-table-row-height);
      } @else {
        min-height: $tableRowHeight;
      }
      height: auto;
    }

    /* Grid display table styling for the header row element when table is scrollable. */
    .oj-table-scroll .oj-table-grid-display .oj-table-header-row {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        min-height: calc(var(--oj-collection-row-height) + 4px);
      } @else {
        min-height: calc(#{$collectionRowHeight} + 4px);
      }
      height: auto;
    }

    /* Styling for the header row element when table has vertical or horizontal scrollbars. */
    .oj-table-scroll-vertical .oj-table-header-row,
    .oj-table-scroll-horizontal .oj-table-header-row {
      display: block;
      position: relative;
    }

    /* Styling for the column header elements. */
    .oj-table-column-header-cell {
       font-size: inherit;
     @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       font-weight: var(--oj-collection-header-font-weight);
       padding-top: var(--oj-collection-cell-padding);
       padding-bottom: var(--oj-collection-cell-padding);
       height: calc(var(--oj-table-row-height) - 2 * var(--oj-collection-cell-padding));
       line-height: calc(var(--oj-table-row-height) - 2 * var(--oj-collection-cell-padding));
       @include oj-ltr() {
         padding-left: var(--oj-table-cell-padding);
       }
       @include oj-rtl() {
         padding-right: var(--oj-table-cell-padding);
       }
     } @else {
       font-weight: $collectionHeaderFontWeight;
       @include oj-ltr() {
         padding-left: $tableHeaderPadding;
       }
       @include oj-rtl() {
         padding-right: $tableHeaderPadding;
       }
       padding-top: $collectionCellPadding;
       padding-bottom: $collectionCellPadding;
       height: calc(#{$tableRowHeight} - 2 * #{$collectionCellPadding});
       line-height: calc(#{$tableRowHeight} - 2 * #{$collectionCellPadding});
     }
       float: none;
       white-space: nowrap;
       text-overflow: ellipsis;
       overflow: hidden;
       @include oj-ltr() {
         padding-right: 0;
         text-align: left;
       }
       @include oj-rtl() {
         padding-left: 0;
         text-align: right;
       }
       box-sizing: content-box;
    }

    /* Grid display table styling for the column header elements. */
    .oj-table-grid-display .oj-table-column-header-cell {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       height: calc(var(--oj-collection-row-height) - 2 * var(--oj-collection-cell-padding));
       line-height: calc(var(--oj-collection-row-height) - 2 * var(--oj-collection-cell-padding));
       @include oj-ltr() {
        padding-left: var(--oj-collection-cell-padding);
        padding-right: var(--oj-collection-cell-padding);
       }
       @include oj-rtl() {
        padding-left: var(--oj-collection-cell-padding);
        padding-right: var(--oj-collection-cell-padding);
       }
      } @else {
       height: calc(#{$collectionRowHeight} - 2 * #{$collectionCellPadding});
       line-height: calc(#{$collectionRowHeight} - 2 * #{$collectionCellPadding});
       @include oj-ltr() {
        padding-left: $collectionCellPadding;
        padding-right: $collectionCellPadding;
       }
       @include oj-rtl() {
        padding-left: $collectionCellPadding;
        padding-right: $collectionCellPadding;
       }
      }
    }

    /* Editable display table styling for the column header elements. */
    .oj-table-editable .oj-table-column-header-cell {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       @include oj-ltr() {
        padding-left: var(--oj-collection-cell-padding);
        padding-right: var(--oj-collection-cell-padding);
       }
       @include oj-rtl() {
        padding-left: var(--oj-collection-cell-padding);
        padding-right: var(--oj-collection-cell-padding);
       }
      } @else {
       @include oj-ltr() {
         padding-left: $collectionCellPadding;
         padding-right: $collectionCellPadding;
       }
       @include oj-rtl() {
         padding-left: $collectionCellPadding;
         padding-right: $collectionCellPadding;
       }
      }
    }

    /* Styling to remove the right border of the last column header. */
    .oj-table-column-header-cell:last-child {
       @include oj-ltr() {
         border-right: 0;
       }
       @include oj-rtl() {
         border-left: 0;
       }
    }

    /* Styling for the vertical grid lines for header cells. */
    .oj-table-column-header-cell.oj-table-vgrid-lines {
       @include oj-ltr() {
         border-right: 1px solid transparent;
       }
       @include oj-rtl() {
         border-left: 1px solid transparent;
       }
    }

    /* Styling for the column header elements in selected state when table focused. */
    .oj-table-element:not(.oj-table-column-header-resizing) .oj-table-column-header-cell.oj-selected {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        background-color: var(--oj-collection-header-bg-color-selected);
      } @else {
        background-color: $collectionHeaderBgColorSelected;
      }
    }

    /* Styling for the column header elements in selected state when table not focused. */
    .oj-table:not(.oj-focus) .oj-table-column-header-cell.oj-selected {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        background-color: var(--oj-collection-header-bg-color-selected-inactive);
      } @else {
        background-color: $collectionHeaderBgColorSelectedInactive;
      }
    }

    /* Styling for the column header element in hover state. */
    .oj-table-column-header-cell.oj-hover {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        background-color: var(--oj-collection-header-bg-color-hover);
      } @else {
        background-color: $collectionHeaderBgColorHover;
      }
    }

    /* Styling for the column header element in focused state. */
    .oj-table-element:not(.oj-table-column-header-resizing) .oj-table-column-header-cell.oj-focus-highlight {
       outline-offset: -1px;
       @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
         outline: dotted 1px var(--oj-text-color-primary);
         outline: -webkit-focus-ring-color auto;
       } @else {
         @include oj-browser-focus-outline-approximation($primaryTextColor);
       }
    }

    /* Styling for the dragged column header element. */
    .oj-table-column-header-cell.oj-drag {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       background-color: var(--oj-collection-header-bg-color-drag);
       color: var(--oj-text-color-disabled);
      } @else {
        background-color: $collectionHeaderBgColorDrag;
        color: $textColorDisabled;
      }
    }

    /* Styling for the column header drag image. */
    .oj-table-column-header-cell-drag-image {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       border: 1px solid var(--oj-collection-header-drag-image-border-color);
       background-color: var(--oj-collection-header-bg-color-selected);
      } @else {
        border: 1px solid $collectionHeaderDragImageBorderColor;
        background-color: $collectionHeaderBgColorSelected;
      }
    }

    /* Styling for the column header drag indicator after a column. */
    .oj-table-column-header-cell.oj-table-column-header-drag-indicator-after {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
      } @else {
       @include oj-ltr() {
         border-right: 6px solid $dropTarget2Color;
       }
       @include oj-rtl() {
         border-left: 6px solid $dropTarget2Color;
       }
      }
    }
    @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
      html:not([dir="rtl"]) .oj-table-column-header-cell.oj-table-column-header-drag-indicator-after {
        border-right: 6px solid var(--oj-drop-target-color-2); }

      html[dir="rtl"] .oj-table-column-header-cell.oj-table-column-header-drag-indicator-after {
        border-left: 6px solid var(--oj-drop-target-color-2); }
    }

    /* Styling for the column header drag indicator before a column. */
    .oj-table-column-header-cell.oj-table-column-header-drag-indicator-before {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
      } @else {
       @include oj-ltr() {
         border-left: 6px solid $dropTarget2Color;
       }
       @include oj-rtl() {
         border-right: 6px solid $dropTarget2Color;
       }
      }
    }
     @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       html:not([dir="rtl"]) .oj-table-column-header-cell.oj-table-column-header-drag-indicator-before {
          border-left: 6px solid var(--oj-drop-target-color-2); }

      html[dir="rtl"] .oj-table-column-header-cell.oj-table-column-header-drag-indicator-before {
          border-right: 6px solid var(--oj-drop-target-color-2); }
     }


    /* Styling for the column header element. */
    .oj-table-column-header {
      position: relative;
      float: none;
      text-overflow: inherit;
      overflow: inherit;
      @include oj-ltr() {
        padding-right: 10px;
      }
      @include oj-rtl() {
        padding-left: 10px;
      }
    }

    /* Grid display table styling for the column header element. */
    .oj-table-grid-display .oj-table-column-header {
      @include oj-ltr() {
        padding-right: 0;
      }
      @include oj-rtl() {
        padding-left: 0;
      }
    }

    /* Editable display table styling for the column header element. */
    .oj-table-editable .oj-table-column-header {
      @include oj-ltr() {
        padding-right: 0;
      }
      @include oj-rtl() {
        padding-left: 0;
      }
    }

    /* Styling for the column header text. */
    .oj-table-column-header-text {
      display: inline-block;
      height: inherit;
      overflow: inherit;
      text-overflow: inherit;
      vertical-align: top;
      @include oj-ltr() {
       padding-right: 5px;
      }
      @include oj-rtl() {
       padding-left: 5px;
      }
    }

    /* Grid display table styling for the column header text. */
    .oj-table-grid-display .oj-table-column-header-text {
      padding-right: 0;
    }

    /* Editable display table styling for the column header text. */
    .oj-table-editable .oj-table-column-header-text {
      @include oj-ltr() {
        padding-right: 0px;
      }
      @include oj-rtl() {
        padding-left: 0px;
      }
    }

    /* Styling for the column header sort ascending element. */
    .oj-table-column-header-asc {
      position: absolute;
      display: inline-block;
      width: 24px;
      height: 24px;
      vertical-align: top;
      @include oj-ltr() {
       right: 5px;
      }
      @include oj-rtl() {
       left: 5px;
      }
      top: 0;
    }

    /* Grid display table styling for the column header sort ascending element. */
    .oj-table-grid-display .oj-table-column-header-asc{
      @include oj-ltr() {
       right: -5px;
      }
      @include oj-rtl() {
       left: -5px;
      }
      top: -2px;
    }

    /* Styling for the column header sort descending element. */
    .oj-table-column-header-dsc {
      position: absolute;
      display: inline-block;
      width: 24px;
      height: 24px;
      vertical-align: top;
      top: -2px;
      @include oj-ltr() {
       right: 5px;
      }
      @include oj-rtl() {
       left: 5px;
      }
      top: 0;
    }

    /* Grid display table styling for the column header sort descending element. */
    .oj-table-grid-display .oj-table-column-header-dsc{
      @include oj-ltr() {
       right: -5px;
      }
      @include oj-rtl() {
       left: -5px;
      }
      top: -2px;
    }

    /* Styling for the column header sort ascending element in disabled state. */
    .oj-table-column-header-asc.oj-disabled {
      display: none;
    }

    /* Styling for the column header sort descending element in disabled state. */
    .oj-table-column-header-dsc.oj-disabled {
      display: none;
    }

    /* Styling for the column header sort icons. */
    .oj-table-column-header-asc-icon,
    .oj-table-column-header-dsc-icon {
      width: 2rem;
      height: 2rem;
      line-height: 2rem;
      position: absolute;
      margin-top: -2px;
      text-decoration: none;
      @include oj-ltr() {
        left: 0;
      }
      @include oj-rtl() {
        right: 0;
      }
    }

    /* Styling for the column header sort icons in hover state. */
    .oj-table-column-header-asc-icon.oj-hover,
    .oj-table-column-header-dsc-icon.oj-hover {
      text-decoration: none;
    }

    /* Icon for column header sort ascending in enabled state. */
    // We also render oj-clickable-icon on the icon,
    // so the hover/active/etc colors come from there
    .oj-table-column-header-asc-icon {
      @extend .oj-fwk-icon-arrow-n;
    }

    /* Icon for column header sort ascending in disabled state. */
    .oj-table-column-header-asc-icon.oj-disabled {
      visibility: hidden;
    }


    /* Icon for column header sort descending */
    // We also render oj-clickable-icon on the icon,
    // so the hover/active/etc colors come from there
    .oj-table-column-header-dsc-icon {
      @extend .oj-fwk-icon-arrow-s;
    }

    /* Icon for column header sort descending in disabled state. */
    .oj-table-column-header-dsc-icon.oj-disabled {
      visibility: hidden;
    }

    /* Styling for the column header resize indicator. */
    .oj-table-column-header-resize-indicator {
      position: absolute;
      top: 0;
      width: 0;
      border-top-width: 0;
      border-bottom-width: 0;
      border-style: solid;
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        border-color: var(--oj-collection-header-bg-color-selected);
      } @else {
        border-color: $collectionHeaderBgColorSelected;
      }
      pointer-events: none;
    }

    /* Styling for the data body element. */
    .oj-table-body {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        color: var(--oj-collection-cell-text-color);
        border-color: var(--oj-collection-border-color);
      } @else {
        color: $collectionCellTextColor;
        border-color: $collectionBorderColor;
      }
      border-width: 0 0 1px;
      border-style: solid;
      font-size: inherit;
    }

    /* Styling for the table body element when table has vertical or horizontal scrollbars. */
    .oj-table-scroll-vertical .oj-table-body,
    .oj-table-scroll-horizontal .oj-table-body {
      display: block;
      overflow: auto;
      position: relative;
    }

    /* Grid display styling for the data body element. */
    .oj-table-grid-display .oj-table-body {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        background-color: var(--oj-collection-cell-bg-color);
      } @else {
        background-color: $collectionCellBgColor;
      }
      border: 0;
    }

    /* Styling for the data row elements. */
    .oj-table-body-row {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        height: var(--oj-table-row-height);
      } @else {
        height: $tableRowHeight;
      }
      font-size: inherit;
    }

    /* Grid display table styling for the data row elements. */
    .oj-table-grid-display .oj-table-body-row{
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        height: calc(var(--oj-collection-row-height) + 4px);
      } @else {
        height: calc(#{$collectionRowHeight} + 4px);
      }
    }

    /* Styling for the data row elements in focus state. */
    .oj-table-element:not(.oj-table-column-header-resizing) .oj-table-body-row.oj-focus-highlight:not(.oj-table-body-row-edit) {
       outline-offset: -1px;
       @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
          outline: dotted 1px var(--oj-text-color-primary);
          outline: -webkit-focus-ring-color auto;
       } @else {
         @include oj-browser-focus-outline-approximation($primaryTextColor);
       }
    }

    /* Styling for the data row drag indicator before a row. */
    .oj-table-body-row-drag-indicator-before {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        height: var(--oj-collection-row-height);
        background-color: var(--oj-drop-target-color-2);
      } @else {
        height: $collectionRowHeight;
        background-color: $dropTarget2Color;
      }
    }

        /* Styling for the data row drag indicator after a row. */
    .oj-table-body-row-drag-indicator-after {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        height: var(--oj-collection-row-height);
        background-color: var(--oj-drop-target-color-2);
      } @else {
        height: $collectionRowHeight;
        background-color: $dropTarget2Color;
      }
    }

    /* Styling for the selection affordance icon on touch devices*/
    .oj-table-body-row-touch-selection-affordance-top-icon,
    .oj-table-body-row-touch-selection-affordance-bottom-icon {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        border-radius: 50%;
        border: 2px solid var(--oj-collection-selection-affordance-border-color);
        background-color: var(--oj-icon-color-hover);
      } @else {
        @include oj-border-radius(50%);
        border: 2px solid $collectionSelectionAffordanceBorderColor;
        background-color: $iconColorHover;
      }
      box-sizing: border-box;
      position: absolute;
      width: 11px;
      height: 11px;
      z-index: 1;
      margin: auto;
      left: 0;
      right: 0;
      top: 0;
      bottom: 0;
    }

    /* Styling for the selection affordance touchable area on touch devices*/
    .oj-table-body-row-touch-selection-affordance-touch-area {
       width: 24px;
       height: 24px;
       position: absolute;
    }

    /* Styling for the data cell elements. */
    .oj-table-data-cell {
       font-size: inherit;
       font-weight: normal;
       @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
         min-width: var(--oj-font-size);
         min-height: var(--oj-font-size);
         padding-top: var(--oj-collection-cell-padding);
         padding-bottom: var(--oj-collection-cell-padding);
         padding-left: var(--oj-table-cell-padding);
         padding-right: var(--oj-table-cell-padding);
       } @else {
         min-width: $fontSize;
         min-height: $fontSize;
         padding-top: $collectionCellPadding;
         padding-bottom: $collectionCellPadding;
         padding-left: $tableCellPadding;
         padding-right: $tableCellPadding;
       }
       float: none;
       @include oj-ltr() {
         text-align: left;
       }
       @include oj-rtl() {
         text-align: right;
       }
       overflow: hidden;
       text-overflow: ellipsis;
       white-space: nowrap;
       box-sizing: content-box;
    }

    /* Grid display table styling for the data cell elements. */
    .oj-table-grid-display .oj-table-data-cell {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       padding-left: var(--oj-collection-cell-padding);
       padding-right: var(--oj-collection-cell-padding);
       height: calc(var(--oj-collection-row-height) - 11px);
      } @else {
        padding-left: $collectionCellPadding;
        padding-right: $collectionCellPadding;
        height: calc(#{$collectionRowHeight} - 11px);
      }
    }
    
    /* Editable table styling for the data cell elements. */
    .oj-table-editable .oj-table-data-cell {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       padding-left: var(--oj-collection-cell-padding);
       padding-right: var(--oj-collection-cell-padding);
       height: calc(var(--oj-table-row-height) - 2 * var(--oj-collection-cell-padding));
      } @else {
        padding-left: $collectionCellPadding;
        padding-right: $collectionCellPadding;
        height: calc(#{$tableRowHeight} - 2 * #{$collectionCellPadding});
      }
    }

    /* Edit row styling for data cell elements. */
    .oj-table-body-row-edit .oj-table-data-cell:not(.oj-read-only) {
       padding: 0;
    }

    /* Edit row styling for data cell elements. */
    .oj-table-data-cell.oj-table-data-cell-edit {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       outline: 1px solid var(--oj-collection-editable-cell-border-color-focus);
      } @else {
        outline: 1px solid $collectionEditableCellBorderColorFocus;
      }
    }

    /* Styling on read only table cells, oj-readOnly must be applied by the application */
    .oj-table-data-cell.oj-read-only {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       background-color: var(--oj-collection-editable-cell-bg-color-read-only);
      } @else {
        background-color: $collectionEditableCellBgColorReadOnly;
      }
    }

    /* A helper class oj-table-data-cell-no-padding should have padding 0*/
    .oj-table-data-cell.oj-table-data-cell-no-padding {
       padding: 0;
    }

    /* A helper class oj-table-data-cell-padding should be applied to editable components that should maintain padding in edit mode*/
    .oj-table-body-row-edit .oj-table-data-cell.oj-table-data-cell-padding {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       padding: var(--oj-collection-cell-padding);
      } @else {
        padding: $collectionCellPadding;
      }
    }

    /* Styling for the dragged data cell elements. */
    .oj-table-data-cell.oj-drag {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       background-color: var(--oj-collection-cell-bg-color-drag);
       color: var(--oj-text-color-disabled);
      } @else {
        background-color: $collectionCellBgColorDrag;
        color: $textColorDisabled;
      }
    }

    /* Styling for the data cell elements in selected state when table focused. */
    .oj-table-element:not(.oj-table-column-header-resizing) .oj-table-data-cell.oj-selected {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       background-color: var(--oj-collection-cell-bg-color-selected);
      } @else {
        background-color: $collectionCellBgColorSelected;
      }
    }

    /* Styling for the data cell elements in selected state when table in high contrast mode. */
    .oj-hicontrast .oj-table-data-cell.oj-selected {
       border: 3px double;
    }

    /* Styling for the data cell elements in selected state when table not focused. */
    .oj-table:not(.oj-focus) .oj-table-data-cell.oj-selected {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       background-color: var(--oj-collection-cell-bg-color-selected-inactive);
      } @else {
        background-color: $collectionCellBgColorSelectedInactive;
      }
    }

    /* Styling for the data cell elements in hover state. */
    .oj-table-data-cell.oj-hover {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       background-color: var(--oj-collection-cell-bg-color-hover);
      } @else {
        background-color: $collectionCellBgColorHover;
      }
    }

    /* Styling on form controls stamped inside a table */
    .oj-table-data-cell.oj-form-control-inherit:not(.oj-form-control-default) .oj-form-control {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        height: calc(var(--oj-table-row-height) - 2 * var(--oj-collection-cell-padding));
        @include oj-form-control-padding-override(
          $padding: "0 calc("+var(--oj-collection-cell-padding)+" + 1px)");
      } @else {
        height: calc(#{$tableRowHeight} - 2 * #{$collectionCellPadding});
        @include oj-form-control-padding-override(
          $padding: "0 calc(#{$collectionCellPadding} + 1px)");
      }
    }

    .oj-table-data-cell .oj-checkboxset .oj-checkbox-label {
      justify-content: flex-end;
    }

    /* Styling for the footer. */
    .oj-table-footer {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       border-top: 1px solid var(--oj-table-header-border-color);
      } @else {
        border-top: 1px solid $tableHeaderBorderColor;
      }
       font-size: inherit;
       overflow: hidden;
    }

    /* Styling for the footer when table has vertical or horizontal scrollbars. */
    .oj-table-scroll-vertical .oj-table-footer,
    .oj-table-scroll-horizontal .oj-table-footer {
      display: block;
      position: relative;
    }

    /* Grid display styling for the footer. */
    .oj-table-grid-display .oj-table-footer {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       background-color: var(--oj-collection-header-bg-color);
       border-top: 1px solid var(--oj-collection-border-color);
      } @else {
        background-color: $collectionHeaderBgColor;
        border-top: 1px solid $collectionBorderColor;
      }
    }

    /* Styling for the footer row. */
    .oj-table-footer-row {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       height: var(--oj-table-row-height);
      } @else {
        height: $tableRowHeight;
      }
       font-size: inherit;
    }

    /* Grid display table styling for the footer row. */
    .oj-table-grid-display .oj-table-footer-row{
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       height: calc(var(--oj-collection-row-height) + 4px);
      } @else {
        height: calc(#{$collectionRowHeight} + 4px);
      }
    }

    /* Styling for the footer row when table is scrollable. */
    .oj-table-scroll .oj-table-footer-row {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       min-height: var(--oj-table-row-height);
      } @else {
       min-height: $tableRowHeight;
      }
       height: auto;
    }

    /* Grid display table styling for the footer row when table is scrollable. */
    .oj-table-scroll .oj-table-grid-display .oj-table-footer-row{
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       min-height: calc(var(--oj-collection-row-height) + 4px);
      } @else {
        min-height: calc(#{$collectionRowHeight} + 4px);
      }
       height: auto;
    }

    /* Styling for the footer row when table has vertical or horizontal scrollbars. */
    .oj-table-scroll-vertical .oj-table-footer-row,
    .oj-table-scroll-horizontal .oj-table-footer-row {
      display: block;
      position: relative;
    }

    /* Styling for the footer cells. */
    .oj-table-footer-cell {
       float: none;
     @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       padding-top: var(--oj-collection-cell-padding);
       padding-bottom: var(--oj-collection-cell-padding);
       padding-left: var(--oj-table-cell-padding);
       padding-right: var(--oj-table-cell-padding);
     } @else {
       padding-top: $collectionCellPadding;
       padding-bottom: $collectionCellPadding;
       padding-left: $tableHeaderPadding;
       padding-right: $tableHeaderPadding;
     }
       font-size: inherit;
       box-sizing: content-box;
    }

    /* Grid display table styling for the footer cells. */
    .oj-table-grid-display .oj-table-footer-cell {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       padding-left: var(--oj-collection-cell-padding);
       padding-right: var(--oj-collection-cell-padding);
      } @else {
        padding-left: $collectionCellPadding;
        padding-right: $collectionCellPadding;
      }
    }

    /* Styling for the vertical grid lines for data cells. */
    .oj-table-data-cell.oj-table-vgrid-lines {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
      } @else {
        @include oj-ltr() {
          border-right: 1px solid $collectionCellBorderColor;
        }
        @include oj-rtl() {
          border-left: 1px solid $collectionCellBorderColor;
        }
      }
    }
    @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
      html:not([dir="rtl"]) .oj-table-data-cell.oj-table-vgrid-lines {
      border-right: 1px solid var(--oj-collection-cell-border-color); }

      html[dir="rtl"] .oj-table-data-cell.oj-table-vgrid-lines {
      border-left: 1px solid var(--oj-collection-cell-border-color); }
    }

    /* Grid display styling for the vertical grid lines. */
    .oj-table-grid-display .oj-table-vgrid-lines,
    .oj-table-grid-display .oj-table-column-header-cell.oj-table-vgrid-lines {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        @include oj-ltr() {
          border-right: 1px solid var(--oj-collection-cell-border-color);
        }
        @include oj-rtl() {
          border-left: 1px solid var(--oj-collection-cell-border-color);
        }  
      } @else {
        @include oj-ltr() {
          border-right: 1px solid $collectionCellBorderColor;
        }
        @include oj-rtl() {
          border-left: 1px solid $collectionCellBorderColor;
        }  
      }
    }
    
    /* Styling to remove the right border of the last vertical grid line. */
    .oj-table-vgrid-lines:last-child,
    .oj-table-grid-display .oj-table-vgrid-lines:last-child,
    .oj-table-grid-display .oj-table-column-header-cell.oj-table-vgrid-lines:last-child {
       @include oj-ltr() {
         border-right: 0;
       }
       @include oj-rtl() {
         border-left: 0;
       }
    }

    /* Styling for the horizontal grid lines. */
    .oj-table-hgrid-lines {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
       border-bottom: 1px solid var(--oj-collection-cell-border-color);
      } @else {
        border-bottom: 1px solid $collectionCellBorderColor;
      }
    }

    /* Styling for the status message. */
    .oj-table-status-message {
      position: absolute;
    }

    /* Styling for the status message text. */
    // InfoBackground & InfoText are CSS2 system colors
    .oj-table-status-message-text {
      background-color: InfoBackground;
      color: InfoText;
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
        border: 1px var(--oj-collection-cell-border-color) solid;
        padding: var(--oj-collection-cell-padding);
      } @else {
        border: 1px $collectionCellBorderColor solid;
        padding: $collectionCellPadding;
      }
      display: inline-block;
    }

    /* Styling for the activity indicator. */
    .oj-table-loading-icon {
      display: block;
      width: 40px;
      height: 40px;
      margin: auto;
      @include oj-icon-content(
        $icon: oj-image-url("spinner_full.gif"),
        $lowResProportion: 0.25
      );
    }

    /* Styling for the body message. */
    .oj-table-body-message {
      @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
      color: var(--oj-text-color);
      padding: var(--oj-collection-cell-padding);
      } @else {
        color: $textColor;
        padding: $collectionCellPadding;
      }
    }

    /* Styling for a panel that can attach to the bottom of the table
       and match the table colors. An app developer can put a paging control
       in a div with this class, for example. */
    .oj-table-panel-bottom {
    }

    /* Styling for a panel that can attach to the bottom of the table
       and match the table colors when table is in grid display. An app developer
       can put a paging control in a div with this class, for example. */
    .oj-table-panel-bottom-grid-display {
       border-style: solid;
       @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
         border-color: var(--oj-collection-border-color);
         background-color: var(--oj-collection-bg-color);
       } @else {
         border-color: $collectionBorderColor;
         background-color: $collectionBgColor;
       }
       border-width: 0 1px 1px;
    }
  }
}
