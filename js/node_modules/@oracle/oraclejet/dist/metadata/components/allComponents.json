{
  "components": {
    "oj-accordion": {
      "name": "oj-accordion",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Accordion",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojaccordion"
        }
      },
      "description": "An accordion displays a set of collapsible child elements.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojAccordion.html",
      "properties": {
        "expanded": {
          "description": "A list of expanded child collapsibles.",
          "type": "Array<string>|Array<number>|Array<Object>|null",
          "displayName": "Expanded",
          "value": null,
          "writeback": true,
          "help": "expanded"
        },
        "multiple": {
          "description": "Specifies whether multiple collapsibles can be open at the same time.",
          "type": "boolean",
          "displayName": "Multiple",
          "value": false,
          "help": "multiple"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the visual state of the accordion.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeExpand": {
          "description": "Triggered immediately before any collapsible in the accordion is expanded.",
          "cancelable": true,
          "help": "beforeExpand",
          "detail": {
            "toCollapsible": {
              "description": "The collapsible being expanded.",
              "type": "Element"
            },
            "fromCollapsible": {
              "description": "The collapsible being collapsed.",
              "type": "Element"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered after any collapsible in the accordion is expanded.",
          "help": "expand",
          "detail": {
            "toCollapsible": {
              "description": "The collapsible being expanded.",
              "type": "Element"
            },
            "fromCollapsible": {
              "description": "The collapsible being collapsed.",
              "type": "Element"
            }
          }
        },
        "ojBeforeCollapse": {
          "description": "Triggered immediately before any collapsible in the accordion is collapsed.",
          "cancelable": true,
          "help": "beforeCollapse",
          "detail": {
            "toCollapsible": {
              "description": "The collapsible being expanded.",
              "type": "Element"
            },
            "fromCollapsible": {
              "description": "The collapsible being collapsed.",
              "type": "Element"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered after any collapsible in the accordion has been collapsed.",
          "help": "collapse",
          "detail": {
            "toCollapsible": {
              "description": "The collapsible being expanded.",
              "type": "Element"
            },
            "fromCollapsible": {
              "description": "The collapsible being collapsed.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The <oj-accordion> element accepts one or more <oj-collapsible> elements as children.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-avatar": {
      "name": "oj-avatar",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Avatar",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojavatar"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-avatar-group-image"
          ],
          "description": "Use to diplay avatar group placeholder image instead of single person placeholder image."
        }
      ],
      "description": "An avatar represents a person or entity as initials or an image.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojAvatar.html",
      "properties": {
        "initials": {
          "description": "Specifies the initials of the avatar.",
          "type": "string",
          "displayName": "Initials",
          "value": null,
          "translatable": true,
          "help": "initials"
        },
        "size": {
          "description": "Specifies the size of the avatar.",
          "type": "string",
          "displayName": "Size",
          "value": "md",
          "help": "size",
          "enumValues": [
            "xxs",
            "xs",
            "sm",
            "md",
            "lg",
            "xl",
            "xxl"
          ],
          "propertyEditorValues": {
            "xxs": {
              "description": "extra, extra small avatar",
              "displayName": "Extra Extra Small"
            },
            "xs": {
              "description": "extra small avatar",
              "displayName": "Extra Small"
            },
            "sm": {
              "description": "small avatar",
              "displayName": "Small"
            },
            "md": {
              "description": "medium avatar (default, if unspecified)",
              "displayName": "Medium"
            },
            "lg": {
              "description": "large avatar",
              "displayName": "Large"
            },
            "xl": {
              "description": "extra large avatar",
              "displayName": "Extra Large"
            },
            "xxl": {
              "description": "extra, extra large avatar",
              "displayName": "Extra Extra Large"
            }
          }
        },
        "src": {
          "description": "Specifies the src for the image of the avatar.",
          "type": "string",
          "displayName": "Src",
          "value": null,
          "help": "src"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-bind-dom": {
      "name": "oj-bind-dom",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Bind Dom",
      "type": "core",
      "since": "6.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojbinddom"
        }
      },
      "description": "An oj-bind-dom element renders HTML content with access to passed in data properties.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojBindDom.html",
      "properties": {
        "config": {
          "description": "Configuration object that defines a view and data available to the oj-bind-dom element. The configuration object can be specified directly or via a Promise.",
          "type": "object|Promise",
          "displayName": "Config",
          "help": "config",
          "properties": {
            "data": {
              "description": "The data available to the oj-bind-dom view.",
              "type": "object",
              "displayName": "Data",
              "help": "config.data"
            },
            "view": {
              "description": "Defines oj-bind-dom view.",
              "type": "Array<Node>",
              "displayName": "View",
              "help": "config.view"
            }
          }
        }
      }
    },
    "oj-bind-for-each": {
      "name": "oj-bind-for-each",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Bind For Each",
      "type": "core",
      "since": "4.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojknockout"
        }
      },
      "description": "An oj-bind-for-each binds items of an array to the specified markup section. The markup section is duplicated for each array item when element is rendered.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojBindForEach.html",
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the array item. This is useful if multiple oj-bind-for-each elements are nested to provide access to the data for each iteration level.",
          "type": "string",
          "displayName": "As",
          "help": "as"
        },
        "data": {
          "description": "The array or oj.DataProvider that you wish to iterate over. See the Help documentation for more information.",
          "type": "array|object",
          "displayName": "Data",
          "help": "data"
        }
      },
      "slots": {
        "": {
          "description": "The oj-bind-for-each default slot is used to specify the template for binding items of an array if no named slots were defined by the application.",
          "displayName": "default",
          "maxItems": 1,
          "help": "Default",
          "data": {
            "data": {
              "description": "The current array item being rendered.",
              "type": "object"
            },
            "index": {
              "description": "Zero-based index of the current array item being rendered. The index value is not updated in response to array additions and removals and is only recommended for static arrays.",
              "type": "number"
            },
            "observableIndex": {
              "description": "An observable that refers to the zero-based index of the current array item being rendered. The observableIndex value is updated in response to array additions and removals and can be used for both static and dynamic arrays.",
              "type": "number"
            }
          }
        }
      }
    },
    "oj-bind-if": {
      "name": "oj-bind-if",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Bind If",
      "type": "core",
      "since": "4.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojknockout"
        }
      },
      "description": "An oj-bind-if renders its contents only if a provided test returns true.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojBindIf.html",
      "properties": {
        "test": {
          "description": "The test condition for the if clause. The children of the element will only be rendered if the test is true.",
          "type": "boolean",
          "displayName": "Test",
          "help": "test"
        }
      },
      "slots": {
        "": {
          "description": "The oj-bind-if default slot is used to specify content that will be rendered when the test condition evaluates to true.",
          "displayName": "default",
          "help": "Default"
        }
      }
    },
    "oj-bind-slot": {
      "name": "oj-bind-slot",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Bind Slot",
      "type": "core",
      "since": "4.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcomposite"
        }
      },
      "description": "An oj-bind-slot acts as a placeholder for child DOM to appear in a specified slot.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojBindSlot.html",
      "properties": {
        "index": {
          "description": "An index value allowing the slot children to be individually slotted. This is useful when the composite needs to add additional DOM around slotted children.",
          "type": "number",
          "displayName": "Index",
          "help": "index"
        },
        "name": {
          "description": "The name of the slot.",
          "type": "string",
          "displayName": "Name",
          "help": "name"
        }
      },
      "slots": {
        "": {
          "description": "The oj-bind-slot default slot is used to specify fallback content which will be used in the DOM if the slot has no assigned nodes.",
          "displayName": "default",
          "help": "Default"
        }
      }
    },
    "oj-bind-template-slot": {
      "name": "oj-bind-template-slot",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Bind Template Slot",
      "type": "core",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcomposite"
        }
      },
      "description": "An oj-bind-template-slot acts as a placeholder for stamped child DOM to appear in a specified slot.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojBindTemplateSlot.html",
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An optional component-level alias for the context variable that can be referenced inside the default template DOM.",
          "type": "string",
          "displayName": "As",
          "help": "as"
        },
        "data": {
          "description": "The object containing additional context variables to extend the stamped template nodes's binding context.",
          "type": "object",
          "displayName": "Data",
          "help": "data"
        },
        "name": {
          "description": "The name of the slot.",
          "type": "string",
          "displayName": "Name",
          "help": "name"
        }
      },
      "slots": {
        "": {
          "description": "The oj-bind-template-slot default slot is used to specify a fallback template that will be used to stamp child DOM if the slot has no assigned template nodes.",
          "displayName": "default",
          "maxItems": 1,
          "help": "Default"
        }
      }
    },
    "oj-bind-text": {
      "name": "oj-bind-text",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Bind Text",
      "type": "core",
      "since": "4.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojknockout"
        }
      },
      "description": "An oj-bind-text binds a text node to an expression.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojBindText.html",
      "properties": {
        "value": {
          "description": "The value of the text node.",
          "type": "string",
          "displayName": "Value",
          "translatable": true,
          "help": "value"
        }
      }
    },
    "oj-button": {
      "name": "oj-button",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Button",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojbutton"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-button-sm",
            "oj-button-lg",
            "oj-button-xl"
          ],
          "description": "Makes the button small, large, or extra large. Is applied to the Button's root element."
        },
        {
          "styleGroup": [
            "oj-button-primary"
          ],
          "description": "Draws attention to the button, often identifying the primary action in a set of buttons. Designed for use with a push button. In some themes, this class does nothing. Is applied to the Button's root element."
        },
        {
          "styleGroup": [
            "oj-button-confirm"
          ],
          "description": "Identifies an action to confirm. Designed for use with a push button. Is applied to the Button's root element."
        },
        {
          "styleGroup": [
            "oj-focus-highlight"
          ],
          "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control. The \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load. The application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are: \"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value. \"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism. \"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result. To change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
        }
      ],
      "description": "Buttons direct users to initiate or take actions and work with a single tap, click, or keystroke.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojButton.html",
      "properties": {
        "chroming": {
          "description": "Indicates in what states the button has chrome (background and border).",
          "type": "string",
          "displayName": "Chroming",
          "help": "chroming",
          "enumValues": [
            "full",
            "half",
            "outlined"
          ],
          "propertyEditorValues": {
            "full": {
              "description": "In typical themes, full-chrome buttons always have chrome.",
              "displayName": "Full"
            },
            "half": {
              "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states. Half-chroming is recommended for buttons in a toolbar. (This is the toolbar default in most themes.)",
              "displayName": "Half"
            },
            "outlined": {
              "description": "In typical themes, outlined buttons are similar to half-chrome buttons, but have a border in the default state.",
              "displayName": "Outlined"
            }
          }
        },
        "disabled": {
          "description": "Specifies that the button element should be disabled.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "display": {
          "description": "Specifies whether the button displays label and icons, or just icons.",
          "type": "string",
          "displayName": "Display",
          "value": "all",
          "help": "display",
          "enumValues": [
            "all",
            "icons"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAction": {
          "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
          "bubbles": true,
          "cancelable": true,
          "help": "action"
        }
      },
      "slots": {
        "": {
          "description": "The default slot is the button's text label. The oj-button element accepts plain text or DOM nodes as children for the default slot.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "endIcon": {
          "description": "The endIcon slot is the button's end icon. The oj-button element accepts DOM nodes as children with the endIcon slot.",
          "help": "endIcon"
        },
        "startIcon": {
          "description": "The startIcon slot is the button's start icon. The oj-button element accepts DOM nodes as children with the startIcon slot.",
          "help": "startIcon"
        }
      }
    },
    "oj-buttonset-many": {
      "name": "oj-buttonset-many",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Buttonset Many",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojbutton"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-buttonset-width-auto"
          ],
          "description": "Forces Buttonset Buttons' widths to be determined by the total width of their icons and label contents, overriding any theming defaults. Optionally, specify the overall width of the Buttonset for further width control. Can be applied to Buttonset's root element, or on an ancestor such as Toolbar or document."
        },
        {
          "styleGroup": [
            "oj-buttonset-width-equal"
          ],
          "description": "Forces Buttonset Buttons' widths to be equal, overriding any theming defaults. Note that the overall width of the Buttonset defaults to 100%; set the \"max-width\" (recommended) or \"width\" of the Buttonset for further width control. Can be applied to Buttonset's root element, or on an ancestor such as Toolbar or document."
        }
      ],
      "description": "A buttonset many is a grouping of related buttons where any number of buttons may be selected.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojButtonsetMany.html",
      "properties": {
        "chroming": {
          "description": "Indicates in what states the buttonset has chrome (background and border).",
          "type": "string",
          "displayName": "Chroming",
          "help": "chroming",
          "enumValues": [
            "full",
            "half",
            "outlined"
          ],
          "propertyEditorValues": {
            "full": {
              "description": "In typical themes, full-chrome buttons always have chrome.",
              "displayName": "Full"
            },
            "half": {
              "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states. A buttonset with half-chroming will be styled to have normal button spacing. Half-chroming is recommended for buttons in a toolbar. (This is the toolbar default in most themes.)",
              "displayName": "Half"
            },
            "outlined": {
              "description": "In typical themes, outlined buttons are similar to half-chrome buttons, but have a border in the default state.",
              "displayName": "Outlined"
            }
          }
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies that the buttonset element should be disabled.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "display": {
          "description": "Specifies whether the buttonset displays label and icons, or just icons.",
          "type": "string",
          "displayName": "Display",
          "value": "all",
          "help": "display",
          "enumValues": [
            "all",
            "icons"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            }
          }
        },
        "focusManagement": {
          "description": "Should be set to none when the buttonset is placed within a toolbar.",
          "type": "string",
          "displayName": "Focus Management",
          "value": "oneTabstop",
          "help": "focusManagement",
          "enumValues": [
            "none",
            "oneTabstop"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "Focus management is disabled, to avoid interfering with the focus management of a containing component.",
              "displayName": "None"
            },
            "oneTabstop": {
              "description": "Focus management is enabled. The Buttonset is a single tabstop with arrow-key navigation.",
              "displayName": "One Tabstop"
            }
          }
        },
        "labelledBy": {
          "description": "Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documenation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "labelledBy"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations"
        },
        "value": {
          "description": "Indicates which oj-options in the buttonset are selected.",
          "type": "Array<any>|null",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "help": "value"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-buttonset-many element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-buttonset-one": {
      "name": "oj-buttonset-one",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Buttonset One",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojbutton"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-buttonset-width-auto"
          ],
          "description": "Forces Buttonset Buttons' widths to be determined by the total width of their icons and label contents, overriding any theming defaults. Optionally, specify the overall width of the Buttonset for further width control. Can be applied to Buttonset's root element, or on an ancestor such as Toolbar or document."
        },
        {
          "styleGroup": [
            "oj-buttonset-width-equal"
          ],
          "description": "Forces Buttonset Buttons' widths to be equal, overriding any theming defaults. Note that the overall width of the Buttonset defaults to 100%; set the \"max-width\" (recommended) or \"width\" of the Buttonset for further width control. Can be applied to Buttonset's root element, or on an ancestor such as Toolbar or document."
        }
      ],
      "description": "A buttonset one is a grouping of related buttons where only one button may be selected.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojButtonsetOne.html",
      "properties": {
        "chroming": {
          "description": "Indicates in what states the buttonset has chrome (background and border).",
          "type": "string",
          "displayName": "Chroming",
          "help": "chroming",
          "enumValues": [
            "full",
            "half",
            "outlined"
          ],
          "propertyEditorValues": {
            "full": {
              "description": "In typical themes, full-chrome buttons always have chrome.",
              "displayName": "Full"
            },
            "half": {
              "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states. A buttonset with half-chroming will be styled to have normal button spacing. Half-chroming is recommended for buttons in a toolbar. (This is the toolbar default in most themes.)",
              "displayName": "Half"
            },
            "outlined": {
              "description": "In typical themes, outlined buttons are similar to half-chrome buttons, but have a border in the default state.",
              "displayName": "Outlined"
            }
          }
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies that the buttonset element should be disabled.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "display": {
          "description": "Specifies whether the buttonset displays label and icons, or just icons.",
          "type": "string",
          "displayName": "Display",
          "value": "all",
          "help": "display",
          "enumValues": [
            "all",
            "icons"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            }
          }
        },
        "focusManagement": {
          "description": "Should be set to none when the buttonset is placed within a toolbar.",
          "type": "string",
          "displayName": "Focus Management",
          "value": "oneTabstop",
          "help": "focusManagement",
          "enumValues": [
            "none",
            "oneTabstop"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "Focus management is disabled, to avoid interfering with the focus management of a containing component.",
              "displayName": "None"
            },
            "oneTabstop": {
              "description": "Focus management is enabled. The Buttonset is a single tabstop with arrow-key navigation.",
              "displayName": "One Tabstop"
            }
          }
        },
        "labelledBy": {
          "description": "Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documenation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "labelledBy"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations"
        },
        "value": {
          "description": "Indicates which oj-option in the buttonset is selected.",
          "type": "any",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "help": "value"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-buttonset-one element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-chart": {
      "name": "oj-chart",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Chart",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart"
        }
      },
      "description": "A chart displays information graphically, making relationships among the data easier to understand.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojChart.html",
      "properties": {
        "animationOnDataChange": {
          "description": "Defines the animation that is applied on data changes. Animation is automatically disabled when there are a large number of data items.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "animationOnDataChange",
          "enumValues": [
            "auto",
            "none",
            "slideToLeft",
            "slideToRight"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            },
            "slideToLeft": {
              "displayName": "Slide To Left"
            },
            "slideToRight": {
              "displayName": "Slide To Right"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Defines the animation that is shown on initial display. Animation is automatically disabled when there are a large number of data items.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "alphaFade",
            "auto",
            "none",
            "zoom"
          ],
          "propertyEditorValues": {
            "alphaFade": {
              "displayName": "Alpha Fade"
            },
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            },
            "zoom": {
              "displayName": "Zoom"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the itemTemplate, seriesTemplate, or groupTemplate slots.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "coordinateSystem": {
          "description": "The coordinate system of the chart. Only applies to bar, line, area, combo, scatter, and bubble charts.",
          "type": "string",
          "displayName": "Coordinate System",
          "value": "cartesian",
          "help": "coordinateSystem",
          "enumValues": [
            "cartesian",
            "polar"
          ],
          "propertyEditorValues": {
            "cartesian": {
              "displayName": "Cartesian"
            },
            "polar": {
              "displayName": "Polar"
            }
          }
        },
        "data": {
          "description": "An object defining the series and groups, when using a DataProvider to populate the chart data. Also accepts a Promise for deferred data rendering.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "dataCursor": {
          "description": "Defines whether the data cursor is enabled. The data cursor is not supported for polar charts. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Data Cursor",
          "value": "auto",
          "help": "dataCursor",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "dataCursorBehavior": {
          "description": "Defines the behavior of the data cursor when moving between data items.",
          "type": "string",
          "displayName": "Data Cursor Behavior",
          "value": "auto",
          "help": "dataCursorBehavior",
          "enumValues": [
            "auto",
            "smooth",
            "snap"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "smooth": {
              "displayName": "Smooth"
            },
            "snap": {
              "displayName": "Snap"
            }
          }
        },
        "dataCursorPosition": {
          "description": "Speficies the position of the data cursor. Used for synchronizing data cursors across multiple charts. Null if the data cursor is not displayed.",
          "type": "object",
          "displayName": "Data Cursor Position",
          "writeback": true,
          "help": "dataCursorPosition",
          "properties": {
            "x": {
              "description": "The x value of the data cursor.",
              "type": "number|string",
              "displayName": "X",
              "value": null,
              "help": "dataCursorPosition.x"
            },
            "y": {
              "description": "The y value of the data cursor. If both y and y2 are defined, y will take precedence.",
              "type": "number",
              "displayName": "Y",
              "value": null,
              "help": "dataCursorPosition.y"
            },
            "y2": {
              "description": "The y2 value of the data cursor. If both y and y2 are defined, y will take precedence.",
              "type": "number",
              "displayName": "Y2",
              "value": null,
              "help": "dataCursorPosition.y2"
            }
          }
        },
        "dataLabel": {
          "description": "A function that returns a custom data label. The function takes a context argument, provided by the chart. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Data Label",
          "value": null,
          "help": "dataLabel"
        },
        "dnd": {
          "description": "Provides support for HTML5 Drag and Drop events. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Dnd",
          "help": "dnd",
          "properties": {
            "drag": {
              "description": "An object that describes drag functionality.",
              "type": "object",
              "displayName": "Drag",
              "help": "dnd.drag",
              "properties": {
                "groups": {
                  "description": "Allows dragging of chart groups from the categorical axis labels.",
                  "type": "object",
                  "displayName": "Groups",
                  "help": "dnd.drag.groups",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drag.groups.dataTypes"
                    },
                    "drag": {
                      "description": "An optional callback function that receives the \"drag\" event as argument.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null,
                      "help": "dnd.drag.groups.drag"
                    },
                    "dragEnd": {
                      "description": "An optional callback function that receives the \"dragend\" event as argument.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null,
                      "help": "dnd.drag.groups.dragEnd"
                    },
                    "dragStart": {
                      "description": "An optional callback function that receives the \"dragstart\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null,
                      "help": "dnd.drag.groups.dragStart"
                    }
                  }
                },
                "items": {
                  "description": "Allows dragging of chart data items, including bars, line/area/scatter markers, bubbles, and pie/funnel/pyramid slices.",
                  "type": "object",
                  "displayName": "Items",
                  "help": "dnd.drag.items",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drag.items.dataTypes"
                    },
                    "drag": {
                      "description": "An optional callback function that receives the \"drag\" event as argument.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null,
                      "help": "dnd.drag.items.drag"
                    },
                    "dragEnd": {
                      "description": "An optional callback function that receives the \"dragend\" event as argument.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null,
                      "help": "dnd.drag.items.dragEnd"
                    },
                    "dragStart": {
                      "description": "An optional callback function that receives the \"dragstart\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null,
                      "help": "dnd.drag.items.dragStart"
                    }
                  }
                },
                "series": {
                  "description": "Allows dragging of chart series from the legend items.",
                  "type": "object",
                  "displayName": "Series",
                  "help": "dnd.drag.series",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drag.series.dataTypes"
                    },
                    "drag": {
                      "description": "An optional callback function that receives the \"drag\" event as argument.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null,
                      "help": "dnd.drag.series.drag"
                    },
                    "dragEnd": {
                      "description": "An optional callback function that receives the \"dragend\" event as argument.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null,
                      "help": "dnd.drag.series.dragEnd"
                    },
                    "dragStart": {
                      "description": "An optional callback function that receives the \"dragstart\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null,
                      "help": "dnd.drag.series.dragStart"
                    }
                  }
                }
              }
            },
            "drop": {
              "description": "An object that describes drop functionality.",
              "type": "object",
              "displayName": "Drop",
              "help": "dnd.drop",
              "properties": {
                "legend": {
                  "description": "Allows dropping on the legend.",
                  "type": "object",
                  "displayName": "Legend",
                  "help": "dnd.drop.legend",
                  "properties": {
                    "dataTypes": {
                      "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drop.legend.dataTypes"
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and empty context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "dnd.drop.legend.dragEnter"
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and empty context information as arguments.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "dnd.drop.legend.dragLeave"
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and empty context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "dnd.drop.legend.dragOver"
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and emtpy context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "dnd.drop.legend.drop"
                    }
                  }
                },
                "plotArea": {
                  "description": "Allows dropping on the plot area.",
                  "type": "object",
                  "displayName": "Plot Area",
                  "help": "dnd.drop.plotArea",
                  "properties": {
                    "dataTypes": {
                      "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drop.plotArea.dataTypes"
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "dnd.drop.plotArea.dragEnter"
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "dnd.drop.plotArea.dragLeave"
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "dnd.drop.plotArea.dragOver"
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "dnd.drop.plotArea.drop"
                    }
                  }
                },
                "xAxis": {
                  "description": "Allows dropping on the X axis.",
                  "type": "object",
                  "displayName": "X Axis",
                  "help": "dnd.drop.xAxis",
                  "properties": {
                    "dataTypes": {
                      "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drop.xAxis.dataTypes"
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "dnd.drop.xAxis.dragEnter"
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "dnd.drop.xAxis.dragLeave"
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "dnd.drop.xAxis.dragOver"
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "dnd.drop.xAxis.drop"
                    }
                  }
                },
                "y2Axis": {
                  "description": "Allows dropping on the Y2 axis.",
                  "type": "object",
                  "displayName": "Y2 Axis",
                  "help": "dnd.drop.y2Axis",
                  "properties": {
                    "dataTypes": {
                      "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drop.y2Axis.dataTypes"
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "dnd.drop.y2Axis.dragEnter"
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "dnd.drop.y2Axis.dragLeave"
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "dnd.drop.y2Axis.dragOver"
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "dnd.drop.y2Axis.drop"
                    }
                  }
                },
                "yAxis": {
                  "description": "Allows dropping on the Y axis.",
                  "type": "object",
                  "displayName": "Y Axis",
                  "help": "dnd.drop.yAxis",
                  "properties": {
                    "dataTypes": {
                      "description": "An array of MIME data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drop.yAxis.dataTypes"
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "dnd.drop.yAxis.dragEnter"
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "dnd.drop.yAxis.dragLeave"
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "dnd.drop.yAxis.dragOver"
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and context information as arguments. See the Help documentation for more information.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "dnd.drop.yAxis.drop"
                    }
                  }
                }
              }
            }
          }
        },
        "dragMode": {
          "description": "The action that is performed when a drag occurs on the chart. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drag Mode",
          "value": "user",
          "help": "dragMode",
          "enumValues": [
            "off",
            "pan",
            "select",
            "user",
            "zoom"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "pan": {
              "displayName": "Pan"
            },
            "select": {
              "displayName": "Select"
            },
            "user": {
              "displayName": "User"
            },
            "zoom": {
              "displayName": "Zoom"
            }
          }
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "off",
          "help": "drilling",
          "enumValues": [
            "groupsOnly",
            "off",
            "on",
            "seriesOnly"
          ],
          "propertyEditorValues": {
            "groupsOnly": {
              "displayName": "Groups Only"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            },
            "seriesOnly": {
              "displayName": "Series Only"
            }
          }
        },
        "groupComparator": {
          "description": "A comparator function that determines the ordering of the chart groups when using a DataProvider. If undefined, the group will follow the order in which they are found in the data.",
          "type": "function",
          "displayName": "Group Comparator",
          "value": null,
          "help": "groupComparator"
        },
        "groups": {
          "description": "An array of strings identifying the group labels, or an array of objects specifying group labels and styles. See the Help documentation for more information.",
          "type": "Array<string>|Array<Object>|Promise|null",
          "displayName": "Groups",
          "value": null,
          "help": "groups",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The id of the group. Defaults to the name if not specified. This is also used to specify the date for non mixed frequency time axes.",
                  "type": "string|number"
                },
                "groups": {
                  "description": "An array of nested group objects.",
                  "type": "Array<Object>"
                },
                "drilling": {
                  "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
                  "type": "object"
                },
                "name": {
                  "description": "The name of the group.",
                  "type": "string"
                },
                "shortDesc": {
                  "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
                  "type": "string",
                  "translatable": true
                }
              }
            }
          }
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Series or data items with any category matching an item in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "hiddenCategories"
        },
        "hideAndShowBehavior": {
          "description": "Defines the hide and show behavior that is performed when clicking on a legend item. When data items are hidden, the y axes can be optionally rescaled to fit to the remaining data.",
          "type": "string",
          "displayName": "Hide And Show Behavior",
          "value": "none",
          "help": "hideAndShowBehavior",
          "enumValues": [
            "none",
            "withRescale",
            "withoutRescale"
          ],
          "propertyEditorValues": {
            "none": {
              "displayName": "None"
            },
            "withRescale": {
              "displayName": "With Rescale"
            },
            "withoutRescale": {
              "displayName": "Without Rescale"
            }
          }
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Series or data items matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over data items.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "initialZooming": {
          "description": "Specifies whether automatic initial zooming is enabled. Only applies to bar, line, area, and combo charts with zoomAndScroll turned on. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Initial Zooming",
          "value": "none",
          "help": "initialZooming",
          "enumValues": [
            "first",
            "last",
            "none"
          ],
          "propertyEditorValues": {
            "first": {
              "displayName": "First"
            },
            "last": {
              "displayName": "Last"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "legend": {
          "description": "An object defining the style, positioning, and behavior of the legend.",
          "type": "object",
          "displayName": "Legend",
          "help": "legend",
          "properties": {
            "backgroundColor": {
              "description": "The color of the legend background.",
              "type": "string",
              "displayName": "Background Color",
              "value": null,
              "format": "color",
              "help": "legend.backgroundColor"
            },
            "borderColor": {
              "description": "The border color of the legend.",
              "type": "string",
              "displayName": "Border Color",
              "value": null,
              "format": "color",
              "help": "legend.borderColor"
            },
            "maxSize": {
              "description": "Defines the maximum size of the legend in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Max Size",
              "value": null,
              "help": "legend.maxSize"
            },
            "position": {
              "description": "The position of the legend within the chart. By default, the legend will be placed on the side or bottom, based on the size of the chart and the legend contents.",
              "type": "string",
              "displayName": "Position",
              "value": "auto",
              "help": "legend.position",
              "enumValues": [
                "auto",
                "bottom",
                "end",
                "start",
                "top"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "bottom": {
                  "displayName": "Bottom"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                },
                "top": {
                  "displayName": "Top"
                }
              }
            },
            "referenceObjectSection": {
              "description": "An object defining the reference object section in the legend.",
              "type": "object",
              "displayName": "Reference Object Section",
              "help": "legend.referenceObjectSection",
              "properties": {
                "title": {
                  "description": "The title of the reference object section.",
                  "type": "string",
                  "displayName": "Title",
                  "value": null,
                  "translatable": true,
                  "help": "legend.referenceObjectSection.title"
                },
                "titleHalign": {
                  "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
                  "type": "string",
                  "displayName": "Title Halign",
                  "value": "start",
                  "help": "legend.referenceObjectSection.titleHalign",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "displayName": "End"
                    },
                    "start": {
                      "displayName": "Start"
                    }
                  }
                },
                "titleStyle": {
                  "description": "The CSS style object defining the style of the section title.",
                  "type": "object",
                  "displayName": "Title Style",
                  "value": {},
                  "help": "legend.referenceObjectSection.titleStyle"
                }
              }
            },
            "rendered": {
              "description": "Defines whether the legend is displayed. If set to auto, the legend will be hidden for charts with a large number of series. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Rendered",
              "value": "auto",
              "help": "legend.rendered",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "scrolling": {
              "description": "Defines whether scrolling is enabled for the legend.",
              "type": "string",
              "displayName": "Scrolling",
              "value": "asNeeded",
              "help": "legend.scrolling",
              "enumValues": [
                "asNeeded",
                "off"
              ],
              "propertyEditorValues": {
                "asNeeded": {
                  "displayName": "As Needed"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "sections": {
              "description": "An array of objects defining the additional legend sections, other than the default series and reference object sections.",
              "type": "Array<Object>",
              "displayName": "Sections",
              "value": [],
              "help": "legend.sections",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "items": {
                      "description": "An array of objects with the following properties defining the legend items. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected.",
                      "type": "Array<Object>",
                      "properties": {
                        "borderColor": {
                          "description": "The border color of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
                          "type": "string"
                        },
                        "categories": {
                          "description": "An array of categories for the legend item. Legend items currently only support a single category. If no category is specified, this defaults to the id or text of the legend item.",
                          "type": "Array<string>"
                        },
                        "categoryVisibility": {
                          "description": "Defines whether the legend item corresponds to visible data items. A hollow symbol is shown if the value is \"hidden\".",
                          "type": "string",
                          "value": "visible",
                          "enumValues": [
                            "hidden",
                            "visible"
                          ]
                        },
                        "color": {
                          "description": "The color of the legend symbol (line or marker). When symbolType is \"lineWithMarker\", this attribute defines the line color and the markerColor attribute defines the marker color.",
                          "type": "string"
                        },
                        "id": {
                          "description": "The id of the legend item, which is provided as part of the context for events fired by the legend. If not specified, the id defaults to the text of the legend item if a DataProvider is not being used. For the DataProvider case, the key for the node will be used as the id.",
                          "type": "string"
                        },
                        "lineStyle": {
                          "description": "The line style. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
                          "type": "string",
                          "value": "solid",
                          "enumValues": [
                            "dashed",
                            "dotted",
                            "solid"
                          ]
                        },
                        "lineWidth": {
                          "description": "The line width in pixels. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
                          "type": "number"
                        },
                        "markerColor": {
                          "description": "The color of the marker, if different than the line color. Only applies if the symbolType is \"lineWithMarker\".",
                          "type": "string"
                        },
                        "markerShape": {
                          "description": "The shape of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\". Can take the name of a built-in shape or the svg path commands for a custom shape. Does not apply if a custom image is specified.",
                          "type": "string",
                          "value": "square",
                          "propertyEditorValues": {
                            "circle": {
                              "displayName": "Circle"
                            },
                            "diamond": {
                              "displayName": "Diamond"
                            },
                            "ellipse": {
                              "displayName": "Ellipse"
                            },
                            "human": {
                              "displayName": "Human"
                            },
                            "plus": {
                              "displayName": "Plus"
                            },
                            "rectangle": {
                              "displayName": "Rectangle"
                            },
                            "square": {
                              "displayName": "Square"
                            },
                            "star": {
                              "displayName": "Star"
                            },
                            "triangleDown": {
                              "displayName": "Triangle Down"
                            },
                            "triangleUp": {
                              "displayName": "Triangle Up"
                            }
                          }
                        },
                        "pattern": {
                          "description": "The pattern used to fill the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
                          "type": "string",
                          "value": "none",
                          "enumValues": [
                            "largeChecker",
                            "largeCrosshatch",
                            "largeDiagonalLeft",
                            "largeDiagonalRight",
                            "largeDiamond",
                            "largeTriangle",
                            "none",
                            "smallChecker",
                            "smallCrosshatch",
                            "smallDiagonalLeft",
                            "smallDiagonalRight",
                            "smallDiamond",
                            "smallTriangle"
                          ]
                        },
                        "shortDesc": {
                          "description": "The description of this legend item. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string"
                        },
                        "source": {
                          "description": "The URI of the image of the legend symbol.",
                          "type": "string"
                        },
                        "symbolType": {
                          "description": "The type of legend symbol to display.",
                          "type": "string",
                          "value": "marker",
                          "enumValues": [
                            "image",
                            "line",
                            "lineWithMarker",
                            "marker"
                          ]
                        },
                        "text": {
                          "description": "The legend item text.",
                          "type": "string"
                        }
                      }
                    },
                    "sections": {
                      "description": "An array of nested legend sections.",
                      "type": "Array<Object>"
                    },
                    "title": {
                      "description": "The title of the legend section.",
                      "type": "string"
                    },
                    "titleHalign": {
                      "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
                      "type": "string",
                      "value": "start",
                      "enumValues": [
                        "center",
                        "end",
                        "start"
                      ]
                    },
                    "titleStyle": {
                      "description": "The CSS style object defining the style of the section title.",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "seriesSection": {
              "description": "An object defining the series section in the legend.",
              "type": "object",
              "displayName": "Series Section",
              "help": "legend.seriesSection",
              "properties": {
                "title": {
                  "description": "The title of the series section.",
                  "type": "string",
                  "displayName": "Title",
                  "value": null,
                  "translatable": true,
                  "help": "legend.seriesSection.title"
                },
                "titleHalign": {
                  "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
                  "type": "string",
                  "displayName": "Title Halign",
                  "value": "start",
                  "help": "legend.seriesSection.titleHalign",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "displayName": "End"
                    },
                    "start": {
                      "displayName": "Start"
                    }
                  }
                },
                "titleStyle": {
                  "description": "The CSS style object defining the style of the section title.",
                  "type": "object",
                  "displayName": "Title Style",
                  "value": {},
                  "help": "legend.seriesSection.titleStyle"
                }
              }
            },
            "size": {
              "description": "Defines the size of the legend in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Size",
              "value": null,
              "help": "legend.size"
            },
            "symbolHeight": {
              "description": "The height of the legend symbol (line or marker) in pixels.",
              "type": "number",
              "displayName": "Symbol Height",
              "value": null,
              "units": "pixels",
              "help": "legend.symbolHeight"
            },
            "symbolWidth": {
              "description": "The width of the legend symbol (line or marker) in pixels.",
              "type": "number",
              "displayName": "Symbol Width",
              "value": null,
              "units": "pixels",
              "help": "legend.symbolWidth"
            },
            "textStyle": {
              "description": "The CSS style object defining the style of the legend text.",
              "type": "object",
              "displayName": "Text Style",
              "value": {},
              "help": "legend.textStyle"
            },
            "title": {
              "description": "The legend title.",
              "type": "string",
              "displayName": "Title",
              "value": null,
              "translatable": true,
              "help": "legend.title"
            },
            "titleHalign": {
              "description": "The horizontal alignment of the title.",
              "type": "string",
              "displayName": "Title Halign",
              "value": "start",
              "help": "legend.titleHalign",
              "enumValues": [
                "center",
                "end",
                "start"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the title.",
              "type": "object",
              "displayName": "Title Style",
              "value": {},
              "help": "legend.titleStyle"
            }
          }
        },
        "orientation": {
          "description": "The chart orientation. Only applies to bar, line, area, combo, box plot, and funnel charts.",
          "type": "string",
          "displayName": "Orientation",
          "value": "vertical",
          "help": "orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "displayName": "Horizontal"
            },
            "vertical": {
              "displayName": "Vertical"
            }
          }
        },
        "otherThreshold": {
          "description": "Specifies the fraction of the whole pie under which a slice would be aggregated into an \"Other\" slice. Valid values range from 0 (default) to 1. For example, a value of 0.1 would cause all slices which are less than 10% of the pie to be aggregated into the \"Other\" slice. Only applies to pie chart.",
          "type": "number",
          "displayName": "Other Threshold",
          "value": 0,
          "maximum": 1,
          "minimum": 0,
          "help": "otherThreshold"
        },
        "overview": {
          "description": "An object defining the overview scrollbar. Only applies if zoomAndScroll is not off. Currently only supported for vertical bar, line, area, stock, and combo charts.",
          "type": "object",
          "displayName": "Overview",
          "help": "overview",
          "properties": {
            "content": {
              "description": "An object containing the property override for the overview chart. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Content",
              "value": {},
              "help": "overview.content"
            },
            "height": {
              "description": "Specifies the height of the overview scrollbar in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Height",
              "value": null,
              "help": "overview.height"
            },
            "rendered": {
              "description": "Specifies whether the overview scrollbar is rendered. If not, simple scrollbar will be used.",
              "type": "string",
              "displayName": "Rendered",
              "value": "off",
              "help": "overview.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "pieCenter": {
          "description": "An object defining the center content of a pie chart. Either a label can be displayed at the center of the pie chart or custom HTML content.",
          "type": "object",
          "displayName": "Pie Center",
          "help": "pieCenter",
          "properties": {
            "converter": {
              "description": "The converter to format the label if it is numeric. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "value": null,
              "help": "pieCenter.converter"
            },
            "label": {
              "description": "Specifies the text for the label. When a innerRadius is specified, the label will automatically be scaled to fit within the inner circle. If the innerRadius is 0, the default font size will be used.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "translatable": true,
              "help": "pieCenter.label"
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object",
              "displayName": "Label Style",
              "value": {},
              "help": "pieCenter.labelStyle"
            },
            "renderer": {
              "description": "A function that returns custom center content. The function takes a context argument, provided by the chart. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "pieCenter.renderer"
            },
            "scaling": {
              "description": "The scaling behavior of the label if it is numeric. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "displayName": "Scaling",
              "value": "auto",
              "help": "pieCenter.scaling",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            }
          }
        },
        "plotArea": {
          "description": "An object defining the style of the plot area.",
          "type": "object",
          "displayName": "Plot Area",
          "help": "plotArea",
          "properties": {
            "backgroundColor": {
              "description": "The color of the plot area background.",
              "type": "string",
              "displayName": "Background Color",
              "value": null,
              "format": "color",
              "help": "plotArea.backgroundColor"
            },
            "borderColor": {
              "description": "The border color to be set on the chart's plot area.",
              "type": "string",
              "displayName": "Border Color",
              "value": null,
              "format": "color",
              "help": "plotArea.borderColor"
            },
            "borderWidth": {
              "description": "The border width to be set on the chart's plot area.",
              "type": "number",
              "displayName": "Border Width",
              "value": null,
              "units": "pixels",
              "help": "plotArea.borderWidth"
            },
            "rendered": {
              "description": "Specifies whether the plot area is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "on",
              "help": "plotArea.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "polarGridShape": {
          "description": "Defines whether the grid shape of the polar chart is circle or polygon. Only applies to polar line and area charts.",
          "type": "string",
          "displayName": "Polar Grid Shape",
          "value": "circle",
          "help": "polarGridShape",
          "enumValues": [
            "circle",
            "polygon"
          ],
          "propertyEditorValues": {
            "circle": {
              "displayName": "Circle"
            },
            "polygon": {
              "displayName": "Polygon"
            }
          }
        },
        "selection": {
          "description": "An array used to define the ids of the initially selected objects. See the Help documentation for more information.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "The type of selection behavior that is enabled on the chart.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "displayName": "Multiple"
            },
            "none": {
              "displayName": "None"
            },
            "single": {
              "displayName": "Single"
            }
          }
        },
        "series": {
          "description": "An array of objects defining series labels and override series styles. See the Help documentation for more information.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Series",
          "value": null,
          "help": "series",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The id of the series. Defaults to the name or the series index if not specified.",
                  "type": "string|number"
                },
                "items": {
                  "description": "An array of values or an array of objects that defines the data items for the series.",
                  "type": "Array<Object>",
                  "properties": {
                    "id": {
                      "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                      "type": "any"
                    },
                    "items": {
                      "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                      "type": "Array<Object>|Array<number>"
                    },
                    "x": {
                      "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                      "type": "number|string"
                    },
                    "y": {
                      "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                      "type": "number"
                    },
                    "z": {
                      "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                      "type": "number"
                    },
                    "low": {
                      "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                      "type": "number"
                    },
                    "high": {
                      "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                      "type": "number"
                    },
                    "open": {
                      "description": "The open value for stock candlestick.",
                      "type": "number"
                    },
                    "close": {
                      "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                      "type": "number"
                    },
                    "volume": {
                      "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                      "type": "number"
                    },
                    "q1": {
                      "description": "The first quartile value for box plot.",
                      "type": "number"
                    },
                    "q2": {
                      "description": "The second quartile (median) value for box plot.",
                      "type": "number"
                    },
                    "q3": {
                      "description": "The third quartile value for box plot.",
                      "type": "number"
                    },
                    "shortDesc": {
                      "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                      "type": "string",
                      "translatable": true
                    },
                    "color": {
                      "description": "The color of the data item.",
                      "type": "string",
                      "format": "color"
                    },
                    "borderColor": {
                      "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                      "type": "string",
                      "format": "color"
                    },
                    "borderWidth": {
                      "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                      "type": "number",
                      "units": "pixels"
                    },
                    "pattern": {
                      "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                      "type": "string",
                      "value": "auto",
                      "enumValues": [
                        "auto",
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ]
                    },
                    "svgClassName": {
                      "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "markerDisplayed": {
                      "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                      "type": "string",
                      "enumValues": [
                        "auto",
                        "off",
                        "on"
                      ]
                    },
                    "markerShape": {
                      "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                      "type": "string",
                      "propertyEditorValues": {
                        "auto": {
                          "displayName": "Auto"
                        },
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "markerSize": {
                      "description": "The size of the data markers. Does not apply to bubble charts, which calculate marker size based on the z values.",
                      "type": "number",
                      "units": "pixels"
                    },
                    "source": {
                      "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                      "type": "string"
                    },
                    "sourceHover": {
                      "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                      "type": "string"
                    },
                    "sourceSelected": {
                      "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                      "type": "string"
                    },
                    "sourceHoverSelected": {
                      "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                      "type": "string"
                    },
                    "label": {
                      "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                      "type": "string|Array<string>",
                      "translatable": true
                    },
                    "labelPosition": {
                      "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                      "type": "string",
                      "enumValues": [
                        "aboveMarker",
                        "afterMarker",
                        "auto",
                        "beforeMarker",
                        "belowMarker",
                        "center",
                        "insideBarEdge",
                        "none",
                        "outsideBarEdge",
                        "outsideSlice"
                      ]
                    },
                    "labelStyle": {
                      "description": "The CSS style object defining the style of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively.",
                      "type": "object|Array<Object>"
                    },
                    "categories": {
                      "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                      "type": "Array<string>"
                    },
                    "value": {
                      "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                      "type": "number"
                    },
                    "targetValue": {
                      "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                      "type": "number"
                    },
                    "drilling": {
                      "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                      "type": "string",
                      "value": "inherit",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ]
                    },
                    "boxPlot": {
                      "description": "An object containing the style properties of the box plot item.",
                      "type": "object",
                      "properties": {
                        "medianSvgClassName": {
                          "description": "The CSS style class to apply to the median line.",
                          "type": "string"
                        },
                        "medianSvgStyle": {
                          "description": "The CSS inline style to apply to the median line.",
                          "type": "object"
                        },
                        "q2Color": {
                          "description": "The color of the Q2 segment of the box.",
                          "type": "string",
                          "format": "color"
                        },
                        "q2SvgClassName": {
                          "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "q2SvgStyle": {
                          "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "q3Color": {
                          "description": "The color of the Q3 segment of the box.",
                          "type": "string",
                          "format": "color"
                        },
                        "q3SvgClassName": {
                          "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "q3SvgStyle": {
                          "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "whiskerEndLength": {
                          "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                          "type": "string"
                        },
                        "whiskerEndSvgClassName": {
                          "description": "The CSS style class to apply to the whisker ends.",
                          "type": "string"
                        },
                        "whiskerEndSvgStyle": {
                          "description": "The CSS inline style to apply to the whisker ends.",
                          "type": "object"
                        },
                        "whiskerSvgClassName": {
                          "description": "The CSS style class to apply to the whisker stems.",
                          "type": "string"
                        },
                        "whiskerSvgStyle": {
                          "description": "The CSS inline style to apply to the whisker stems.",
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "areaColor": {
                  "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
                  "type": "string",
                  "format": "color"
                },
                "areaSvgClassName": {
                  "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "string"
                },
                "areaSvgStyle": {
                  "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "object"
                },
                "assignedToY2": {
                  "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
                  "type": "string",
                  "value": "off",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "borderColor": {
                  "description": "The border color of the series.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot series.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems.",
                      "type": "object"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The color of the series.",
                  "type": "string",
                  "format": "color"
                },
                "displayInLegend": {
                  "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                },
                "drilling": {
                  "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "lineStyle": {
                  "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "string",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "lineType": {
                  "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "centeredSegmented",
                    "centeredStepped",
                    "curved",
                    "none",
                    "segmented",
                    "stepped",
                    "straight"
                  ]
                },
                "lineWidth": {
                  "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerColor": {
                  "description": "The color of the data markers, if different from the series color.",
                  "type": "string",
                  "format": "color"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "string",
                  "value": "auto",
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "displayName": "Diamond"
                    },
                    "human": {
                      "displayName": "Human"
                    },
                    "plus": {
                      "displayName": "Plus"
                    },
                    "square": {
                      "displayName": "Square"
                    },
                    "star": {
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerSvgClassName": {
                  "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
                  "type": "string"
                },
                "markerSvgStyle": {
                  "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
                  "type": "object"
                },
                "name": {
                  "description": "The name of the series, displayed in the legend and tooltips.",
                  "type": "string"
                },
                "pattern": {
                  "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ]
                },
                "pieSliceExplode": {
                  "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
                  "type": "number",
                  "value": 0,
                  "maximum": 1,
                  "minimum": 0
                },
                "shortDesc": {
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
                  "type": "string",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "stackCategory": {
                  "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
                  "type": "object"
                },
                "type": {
                  "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "area",
                    "auto",
                    "bar",
                    "boxPlot",
                    "candlestick",
                    "line",
                    "lineWithArea"
                  ]
                }
              }
            }
          }
        },
        "seriesComparator": {
          "description": "A comparator function that determines the ordering of the chart series when using a DataProvider. If undefined, the series will follow the order in which they are found in the data.",
          "type": "function",
          "displayName": "Series Comparator",
          "value": null,
          "help": "seriesComparator"
        },
        "sorting": {
          "description": "Specifies the sorting of the data. It should only be used for pie charts, bar/line/area charts with one series, or stacked bar/area charts. Sorting will not apply when using a hierarchical group axis.",
          "type": "string",
          "displayName": "Sorting",
          "value": "off",
          "help": "sorting",
          "enumValues": [
            "ascending",
            "descending",
            "off"
          ],
          "propertyEditorValues": {
            "ascending": {
              "displayName": "Ascending"
            },
            "descending": {
              "displayName": "Descending"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "splitDualY": {
          "description": "Defines whether the plot area is split into two sections, so that sets of data assigned to the different Y-axes appear in different parts of the plot area. Stock charts do not support \"off\".",
          "type": "string",
          "displayName": "Split Dual Y",
          "value": "auto",
          "help": "splitDualY",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "splitterPosition": {
          "description": "In a split dual-Y chart, specifies the fraction of the space that is given to the Y-axis subchart. Valid values are numbers from 0 to 1.",
          "type": "number",
          "displayName": "Splitter Position",
          "value": 0.5,
          "maximum": 1,
          "minimum": 0,
          "help": "splitterPosition"
        },
        "stack": {
          "description": "Defines whether the data items are stacked. Only applies to bar, line, area, and combo charts. Does not apply to range series.",
          "type": "string",
          "displayName": "Stack",
          "value": "off",
          "help": "stack",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "stackLabel": {
          "description": "Defines whether the total values of stacked data items should be displayed. Only applies to bar charts. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Stack Label",
          "value": "off",
          "help": "stackLabel",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "styleDefaults": {
          "description": "An object defining the default styles for series colors, marker shapes, and other style attributes. Properties specified on this object may be overridden by specifications on the data object.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "styleDefaults",
          "properties": {
            "animationDownColor": {
              "description": "The color of the indicator shown for a decreasing data change animation.",
              "type": "string",
              "displayName": "Animation Down Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.animationDownColor"
            },
            "animationDuration": {
              "description": "The duration of the animations in milliseconds.",
              "type": "number",
              "displayName": "Animation Duration",
              "value": null,
              "minimum": 0,
              "units": "milliseconds",
              "help": "styleDefaults.animationDuration"
            },
            "animationIndicators": {
              "description": "Defines whether data change indicators are displayed during animation.",
              "type": "string",
              "displayName": "Animation Indicators",
              "value": "all",
              "help": "styleDefaults.animationIndicators",
              "enumValues": [
                "all",
                "none"
              ],
              "propertyEditorValues": {
                "all": {
                  "displayName": "All"
                },
                "none": {
                  "displayName": "None"
                }
              }
            },
            "animationUpColor": {
              "description": "The color of the indicator shown for an increasing data change animation.",
              "type": "string",
              "displayName": "Animation Up Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.animationUpColor"
            },
            "barGapRatio": {
              "description": "Specifies the width of the bar group gap as a ratio of the group width. The valid value is a number from 0 to 1.",
              "type": "number",
              "displayName": "Bar Gap Ratio",
              "value": null,
              "maximum": 1,
              "minimum": 0,
              "help": "styleDefaults.barGapRatio"
            },
            "borderColor": {
              "description": "The default border color for the data items. For funnel and pyramid charts, it is used for the slice border.",
              "type": "string",
              "displayName": "Border Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.borderColor"
            },
            "borderWidth": {
              "description": "The default border width for the data items. For funnel and pyramid charts, it is used for the slice border.",
              "type": "number",
              "displayName": "Border Width",
              "value": null,
              "units": "pixels",
              "help": "styleDefaults.borderWidth"
            },
            "boxPlot": {
              "description": "An object containing the style properties of the box plot items.",
              "type": "object",
              "displayName": "Box Plot",
              "help": "styleDefaults.boxPlot",
              "properties": {
                "medianSvgClassName": {
                  "description": "The CSS style class to apply to the median line.",
                  "type": "string",
                  "displayName": "Median Svg Class Name",
                  "value": "",
                  "help": "styleDefaults.boxPlot.medianSvgClassName"
                },
                "medianSvgStyle": {
                  "description": "The CSS inline style to apply to the median line.",
                  "type": "object",
                  "displayName": "Median Svg Style",
                  "value": {},
                  "help": "styleDefaults.boxPlot.medianSvgStyle"
                },
                "whiskerEndLength": {
                  "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                  "type": "string",
                  "displayName": "Whisker End Length",
                  "value": null,
                  "help": "styleDefaults.boxPlot.whiskerEndLength"
                },
                "whiskerEndSvgClassName": {
                  "description": "The CSS style class to apply to the whisker ends.",
                  "type": "string",
                  "displayName": "Whisker End Svg Class Name",
                  "value": "",
                  "help": "styleDefaults.boxPlot.whiskerEndSvgClassName"
                },
                "whiskerEndSvgStyle": {
                  "description": "The CSS inline style to apply to the whisker ends.",
                  "type": "object",
                  "displayName": "Whisker End Svg Style",
                  "value": {},
                  "help": "styleDefaults.boxPlot.whiskerEndSvgStyle"
                },
                "whiskerSvgClassName": {
                  "description": "The CSS style class to apply to the whisker stems.",
                  "type": "string",
                  "displayName": "Whisker Svg Class Name",
                  "value": "",
                  "help": "styleDefaults.boxPlot.whiskerSvgClassName"
                },
                "whiskerSvgStyle": {
                  "description": "The CSS inline style to apply to the whisker stems.",
                  "type": "object",
                  "displayName": "Whisker Svg Style",
                  "value": {},
                  "help": "styleDefaults.boxPlot.whiskerSvgStyle"
                }
              }
            },
            "colors": {
              "description": "The array defining the default color ramp for the series.",
              "type": "Array<string>",
              "displayName": "Colors",
              "value": null,
              "help": "styleDefaults.colors"
            },
            "dataCursor": {
              "description": "An object defining the data cursor style.",
              "type": "object",
              "displayName": "Data Cursor",
              "help": "styleDefaults.dataCursor",
              "properties": {
                "lineColor": {
                  "description": "The color of the data cursor line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color",
                  "help": "styleDefaults.dataCursor.lineColor"
                },
                "lineStyle": {
                  "description": "The line style of the data cursor line.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "help": "styleDefaults.dataCursor.lineStyle",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the data cursor line in pixels.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "styleDefaults.dataCursor.lineWidth"
                },
                "markerColor": {
                  "description": "The color of the data cursor marker. Defaults to the data series color.",
                  "type": "string",
                  "displayName": "Marker Color",
                  "value": null,
                  "format": "color",
                  "help": "styleDefaults.dataCursor.markerColor"
                },
                "markerDisplayed": {
                  "description": "Whether the data cursor marker is displayed. Marker should only be hidden if the data cursor is displaying information for the entire group.",
                  "type": "string",
                  "displayName": "Marker Displayed",
                  "value": "on",
                  "help": "styleDefaults.dataCursor.markerDisplayed",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data cursor marker in pixels.",
                  "type": "number",
                  "displayName": "Marker Size",
                  "value": null,
                  "units": "pixels",
                  "help": "styleDefaults.dataCursor.markerSize"
                }
              }
            },
            "dataItemGaps": {
              "description": "Specifies the presence and size of the gaps between data items, such as bars, markers, and areas. Valid values are a percentage string from 0% to 100%, where 100% produces the maximum supported gaps.",
              "type": "string",
              "displayName": "Data Item Gaps",
              "value": null,
              "help": "styleDefaults.dataItemGaps"
            },
            "dataLabelPosition": {
              "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
              "type": "string|Array<string>",
              "displayName": "Data Label Position",
              "value": "auto",
              "help": "styleDefaults.dataLabelPosition",
              "enumValues": [
                "aboveMarker",
                "afterMarker",
                "auto",
                "beforeMarker",
                "belowMarker",
                "center",
                "insideBarEdge",
                "none",
                "outsideBarEdge",
                "outsideSlice"
              ],
              "propertyEditorValues": {
                "aboveMarker": {
                  "displayName": "Above Marker"
                },
                "afterMarker": {
                  "displayName": "After Marker"
                },
                "auto": {
                  "displayName": "Auto"
                },
                "beforeMarker": {
                  "displayName": "Before Marker"
                },
                "belowMarker": {
                  "displayName": "Below Marker"
                },
                "center": {
                  "displayName": "Center"
                },
                "insideBarEdge": {
                  "displayName": "Inside Bar Edge"
                },
                "none": {
                  "displayName": "None"
                },
                "outsideBarEdge": {
                  "displayName": "Outside Bar Edge"
                },
                "outsideSlice": {
                  "displayName": "Outside Slice"
                }
              }
            },
            "dataLabelStyle": {
              "description": "The CSS style object defining the style of the data label text. For range series, if an array of two values are provided, the first and second value will apply to the low and high point respectively.",
              "type": "object|Array<Object>",
              "displayName": "Data Label Style",
              "value": null,
              "help": "styleDefaults.dataLabelStyle"
            },
            "funnelBackgroundColor": {
              "description": "The default background color of funnel slices that show actual/target values.",
              "type": "string",
              "displayName": "Funnel Background Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.funnelBackgroundColor"
            },
            "groupSeparators": {
              "description": "An object defining the style for hierarchical label separators.",
              "type": "object",
              "displayName": "Group Separators",
              "help": "styleDefaults.groupSeparators",
              "properties": {
                "color": {
                  "description": "The color of the separators lines.",
                  "type": "string",
                  "displayName": "Color",
                  "value": null,
                  "format": "color",
                  "help": "styleDefaults.groupSeparators.color"
                },
                "rendered": {
                  "description": "Defines whether the group separators are displayed.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "help": "styleDefaults.groupSeparators.rendered",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                }
              }
            },
            "hoverBehaviorDelay": {
              "description": "Specifies initial hover delay in milliseconds for highlighting items in chart.",
              "type": "number",
              "displayName": "Hover Behavior Delay",
              "value": null,
              "minimum": 0,
              "units": "milliseconds",
              "help": "styleDefaults.hoverBehaviorDelay"
            },
            "lineStyle": {
              "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
              "type": "string",
              "displayName": "Line Style",
              "value": "solid",
              "help": "styleDefaults.lineStyle",
              "enumValues": [
                "dashed",
                "dotted",
                "solid"
              ],
              "propertyEditorValues": {
                "dashed": {
                  "displayName": "Dashed"
                },
                "dotted": {
                  "displayName": "Dotted"
                },
                "solid": {
                  "displayName": "Solid"
                }
              }
            },
            "lineType": {
              "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Line Type",
              "value": "auto",
              "help": "styleDefaults.lineType",
              "enumValues": [
                "auto",
                "centeredSegmented",
                "centeredStepped",
                "curved",
                "none",
                "segmented",
                "stepped",
                "straight"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "centeredSegmented": {
                  "displayName": "Centered Segmented"
                },
                "centeredStepped": {
                  "displayName": "Centered Stepped"
                },
                "curved": {
                  "displayName": "Curved"
                },
                "none": {
                  "displayName": "None"
                },
                "segmented": {
                  "displayName": "Segmented"
                },
                "stepped": {
                  "displayName": "Stepped"
                },
                "straight": {
                  "displayName": "Straight"
                }
              }
            },
            "lineWidth": {
              "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
              "type": "number",
              "displayName": "Line Width",
              "value": null,
              "minimum": 0,
              "units": "pixels",
              "help": "styleDefaults.lineWidth"
            },
            "markerColor": {
              "description": "The color of the data markers, if different from the series color.",
              "type": "string",
              "displayName": "Marker Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.markerColor"
            },
            "markerDisplayed": {
              "description": "Defines whether the data markers should be displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
              "type": "string",
              "displayName": "Marker Displayed",
              "value": "auto",
              "help": "styleDefaults.markerDisplayed",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "markerShape": {
              "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Marker Shape",
              "value": "auto",
              "help": "styleDefaults.markerShape",
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "human": {
                  "displayName": "Human"
                },
                "plus": {
                  "displayName": "Plus"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangleDown": {
                  "displayName": "Triangle Down"
                },
                "triangleUp": {
                  "displayName": "Triangle Up"
                }
              }
            },
            "markerSize": {
              "description": "The size of the data markers in pixels.",
              "type": "number",
              "displayName": "Marker Size",
              "value": null,
              "units": "pixels",
              "help": "styleDefaults.markerSize"
            },
            "marqueeBorderColor": {
              "description": "The border color of the marquee. Applies to marquee selection and marquee zoom.",
              "type": "string",
              "displayName": "Marquee Border Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.marqueeBorderColor"
            },
            "marqueeColor": {
              "description": "The fill color of the marquee. Applies to marquee selection and marquee zoom.",
              "type": "string",
              "displayName": "Marquee Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.marqueeColor"
            },
            "maxBarWidth": {
              "description": "Specifies the maximum width of each bar in pixels.",
              "type": "number",
              "displayName": "Max Bar Width",
              "value": null,
              "units": "pixels",
              "help": "styleDefaults.maxBarWidth"
            },
            "otherColor": {
              "description": "Specifies the color of the \"Other\" slice. Only applies to pie chart.",
              "type": "string",
              "displayName": "Other Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.otherColor"
            },
            "patterns": {
              "description": "The array defining the default pattern ramp for the series. This is used only when seriesEffect is 'pattern'.",
              "type": "Array<string>",
              "displayName": "Patterns",
              "value": null,
              "help": "styleDefaults.patterns"
            },
            "pieFeelerColor": {
              "description": "The color of the line extending from the pie slice to the slice label.",
              "type": "string",
              "displayName": "Pie Feeler Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.pieFeelerColor"
            },
            "pieInnerRadius": {
              "description": "Specifies the radius of the inner circle that can be used to create a donut chart. Valid values range from 0 (default) to 1. Not supported if 3D effect is on.",
              "type": "number",
              "displayName": "Pie Inner Radius",
              "value": 0,
              "maximum": 1,
              "minimum": 0,
              "help": "styleDefaults.pieInnerRadius"
            },
            "selectionEffect": {
              "description": "The selection effect that is applied to selected items. The values explode and highlightAndExplode only apply to pie charts.",
              "type": "string",
              "displayName": "Selection Effect",
              "value": "highlight",
              "help": "styleDefaults.selectionEffect",
              "enumValues": [
                "explode",
                "highlight",
                "highlightAndExplode"
              ],
              "propertyEditorValues": {
                "explode": {
                  "displayName": "Explode"
                },
                "highlight": {
                  "displayName": "Highlight"
                },
                "highlightAndExplode": {
                  "displayName": "Highlight And Explode"
                }
              }
            },
            "seriesEffect": {
              "description": "Defines the fill effect for the data items.",
              "type": "string",
              "displayName": "Series Effect",
              "value": "gradient",
              "help": "styleDefaults.seriesEffect",
              "enumValues": [
                "color",
                "gradient",
                "pattern"
              ],
              "propertyEditorValues": {
                "color": {
                  "displayName": "Color"
                },
                "gradient": {
                  "displayName": "Gradient"
                },
                "pattern": {
                  "displayName": "Pattern"
                }
              }
            },
            "shapes": {
              "description": "The array defining the default shape ramp for the series. Valid values are defined in the markerShape attribute.",
              "type": "Array<string>",
              "displayName": "Shapes",
              "value": null,
              "help": "styleDefaults.shapes"
            },
            "stackLabelStyle": {
              "description": "The CSS style object defining the style of the stack label. Only applies to stacked bar charts.",
              "type": "object",
              "displayName": "Stack Label Style",
              "value": {},
              "help": "styleDefaults.stackLabelStyle"
            },
            "stockFallingColor": {
              "description": "In stock charts, the color of the candlestick when the 'open' value is greater than the 'close' value.",
              "type": "string",
              "displayName": "Stock Falling Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.stockFallingColor"
            },
            "stockRangeColor": {
              "description": "In stock charts, the color of the range bars for candlestick.",
              "type": "string",
              "displayName": "Stock Range Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.stockRangeColor"
            },
            "stockRisingColor": {
              "description": "In stock charts, the color of the candlestick when the 'close' value is greater than the 'open' value.",
              "type": "string",
              "displayName": "Stock Rising Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.stockRisingColor"
            },
            "stockVolumeColor": {
              "description": "In stock charts, the color of the volume bars. If specified, overrides the default rising and falling colors used by the volume bars.",
              "type": "string",
              "displayName": "Stock Volume Color",
              "value": null,
              "format": "color",
              "help": "styleDefaults.stockVolumeColor"
            },
            "threeDEffect": {
              "description": "Defines whether the chart is displayed with a 3D effect. Only applies to pie, funnel and pyramid charts.",
              "type": "string",
              "displayName": "Three D Effect",
              "value": "off",
              "help": "styleDefaults.threeDEffect",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "tooltipLabelStyle": {
              "description": "The CSS style object defining the style of the labels in the tooltip.",
              "type": "object",
              "displayName": "Tooltip Label Style",
              "value": {},
              "help": "styleDefaults.tooltipLabelStyle"
            },
            "tooltipValueStyle": {
              "description": "The CSS style object defining the style of the values in the tooltip.",
              "type": "object",
              "displayName": "Tooltip Value Style",
              "value": {},
              "help": "styleDefaults.tooltipValueStyle"
            }
          }
        },
        "timeAxisType": {
          "description": "The type of time axis to display in the chart. Time axis is only supported for Cartesian bar, line, area, stock, box plot, and combo charts. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Time Axis Type",
          "value": "auto",
          "help": "timeAxisType",
          "enumValues": [
            "auto",
            "disabled",
            "enabled",
            "mixedFrequency",
            "skipGaps"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "disabled": {
              "displayName": "Disabled"
            },
            "enabled": {
              "displayName": "Enabled"
            },
            "mixedFrequency": {
              "displayName": "Mixed Frequency"
            },
            "skipGaps": {
              "displayName": "Skip Gaps"
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip for chart. The function takes a context argument, provided by the chart. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelClose": {
              "description": "Used for the close value in the tooltip for stock data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClose"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelDate": {
              "description": "Used for the date value in the tooltip, if a time axis is being used. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDate"
            },
            "labelDefaultGroupName": {
              "description": "Used when the group names are not specified. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDefaultGroupName"
            },
            "labelGroup": {
              "description": "Used for the default tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelGroup"
            },
            "labelHigh": {
              "description": ">Used for the high value in the tooltip for stock and range data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelHigh"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelLow": {
              "description": "Used for the low value in the tooltip for stock and range data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelLow"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "labelOpen": {
              "description": "Used for the open value in the tooltip for stock data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelOpen"
            },
            "labelOther": {
              "description": "Used for the other series label which aggregates small data values. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelOther"
            },
            "labelPercentage": {
              "description": "Used for displaying the percentage in the tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelPercentage"
            },
            "labelQ1": {
              "description": "Used for displaying the first quartile for box plots. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelQ1"
            },
            "labelQ2": {
              "description": "Used for displaying the second quartile (i.e. median) for box plots. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelQ2"
            },
            "labelQ3": {
              "description": "Used for displaying the third quartile for box plots. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelQ3"
            },
            "labelSeries": {
              "description": "Used for the default tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSeries"
            },
            "labelTargetValue": {
              "description": "Used for the funnel chart target value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelTargetValue"
            },
            "labelValue": {
              "description": "Used for the data item value in the tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelValue"
            },
            "labelVolume": {
              "description": "Used for the volume value in the tooltip for stock data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelVolume"
            },
            "labelX": {
              "description": "Used for the x value in the tooltip See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelX"
            },
            "labelY": {
              "description": "Used for the y value in the tooltip See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelY"
            },
            "labelZ": {
              "description": "Used for the z value in the tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelZ"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            },
            "tooltipPan": {
              "description": "Used for the pan tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipPan"
            },
            "tooltipSelect": {
              "description": "Used for the marquee select tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipSelect"
            },
            "tooltipZoom": {
              "description": "Used for the marquee zoom tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipZoom"
            }
          }
        },
        "type": {
          "description": "The chart type.",
          "type": "string",
          "displayName": "Type",
          "value": "bar",
          "help": "type",
          "enumValues": [
            "area",
            "bar",
            "boxPlot",
            "bubble",
            "combo",
            "funnel",
            "line",
            "lineWithArea",
            "pie",
            "pyramid",
            "scatter",
            "stock"
          ],
          "propertyEditorValues": {
            "area": {
              "displayName": "Area"
            },
            "bar": {
              "displayName": "Bar"
            },
            "boxPlot": {
              "displayName": "Box Plot"
            },
            "bubble": {
              "displayName": "Bubble"
            },
            "combo": {
              "displayName": "Combo"
            },
            "funnel": {
              "displayName": "Funnel"
            },
            "line": {
              "displayName": "Line"
            },
            "lineWithArea": {
              "displayName": "Line With Area"
            },
            "pie": {
              "displayName": "Pie"
            },
            "pyramid": {
              "displayName": "Pyramid"
            },
            "scatter": {
              "displayName": "Scatter"
            },
            "stock": {
              "displayName": "Stock"
            }
          }
        },
        "valueFormats": {
          "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to the attribute names on the data items.",
          "type": "object",
          "displayName": "Value Formats",
          "help": "valueFormats",
          "properties": {
            "close": {
              "description": "Specifies the value formatting and tooltip behavior for the close values of a stock chart.",
              "type": "object",
              "displayName": "Close",
              "help": "valueFormats.close",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.close.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.close.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.close.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.close.tooltipLabel"
                }
              }
            },
            "group": {
              "description": "Specifies tooltip behavior for the groups.",
              "type": "object",
              "displayName": "Group",
              "help": "valueFormats.group",
              "properties": {
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.group.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip. This value can also take an array of strings to be applied to hierarchical group names, from outermost to innermost.",
                  "type": "string|Array<string>",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.group.tooltipLabel"
                }
              }
            },
            "high": {
              "description": "Specifies the value formatting and tooltip behavior for the high values.",
              "type": "object",
              "displayName": "High",
              "help": "valueFormats.high",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.high.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.high.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.high.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.high.tooltipLabel"
                }
              }
            },
            "label": {
              "description": "Specifies the value formatting for the data item labels.",
              "type": "object",
              "displayName": "Label",
              "help": "valueFormats.label",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.label.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.label.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                }
              }
            },
            "low": {
              "description": "Specifies the value formatting and tooltip behavior for the low values.",
              "type": "object",
              "displayName": "Low",
              "help": "valueFormats.low",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.low.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.low.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.low.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.low.tooltipLabel"
                }
              }
            },
            "open": {
              "description": "Specifies the value formatting and tooltip behavior for the open values of a stock chart.",
              "type": "object",
              "displayName": "Open",
              "help": "valueFormats.open",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.open.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.open.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.open.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.open.tooltipLabel"
                }
              }
            },
            "q1": {
              "description": "Specifies the value formatting and tooltip behavior for the q1 values of a box plot.",
              "type": "object",
              "displayName": "Q1",
              "help": "valueFormats.q1",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.q1.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.q1.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.q1.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.q1.tooltipLabel"
                }
              }
            },
            "q2": {
              "description": "Specifies the value formatting and tooltip behavior for the q2 values of a box plot.",
              "type": "object",
              "displayName": "Q2",
              "help": "valueFormats.q2",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.q2.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.q2.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.q2.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.q2.tooltipLabel"
                }
              }
            },
            "q3": {
              "description": "Specifies the value formatting and tooltip behavior for the q3 values of a box plot.",
              "type": "object",
              "displayName": "Q3",
              "help": "valueFormats.q3",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.q3.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.q3.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.q3.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.q3.tooltipLabel"
                }
              }
            },
            "series": {
              "description": "Specifies tooltip behavior for the series.",
              "type": "object",
              "displayName": "Series",
              "help": "valueFormats.series",
              "properties": {
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.series.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.series.tooltipLabel"
                }
              }
            },
            "targetValue": {
              "description": "Specifies the value formatting and tooltip behavior for the target values of a funnel chart.",
              "type": "object",
              "displayName": "Target Value",
              "help": "valueFormats.targetValue",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.targetValue.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.targetValue.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.targetValue.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.targetValue.tooltipLabel"
                }
              }
            },
            "value": {
              "description": "Specifies the value formatting and tooltip behavior for the values.",
              "type": "object",
              "displayName": "Value",
              "help": "valueFormats.value",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.value.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.value.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.value.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.value.tooltipLabel"
                }
              }
            },
            "volume": {
              "description": "Specifies the value formatting and tooltip behavior for the volume values of a stock chart.",
              "type": "object",
              "displayName": "Volume",
              "help": "valueFormats.volume",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.volume.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.volume.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.volume.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.volume.tooltipLabel"
                }
              }
            },
            "x": {
              "description": "Specifies the value formatting and tooltip behavior for the x values.",
              "type": "object",
              "displayName": "X",
              "help": "valueFormats.x",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.x.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.x.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.x.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.x.tooltipLabel"
                }
              }
            },
            "y": {
              "description": "Specifies the value formatting and tooltip behavior for the y values.",
              "type": "object",
              "displayName": "Y",
              "help": "valueFormats.y",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.y.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.y.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.y.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.y.tooltipLabel"
                }
              }
            },
            "y2": {
              "description": "Specifies the value formatting and tooltip behavior for the y2 values.",
              "type": "object",
              "displayName": "Y2",
              "help": "valueFormats.y2",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.y2.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.y2.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.y2.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.y2.tooltipLabel"
                }
              }
            },
            "z": {
              "description": "Specifies the value formatting and tooltip behavior for the z values.",
              "type": "object",
              "displayName": "Z",
              "help": "valueFormats.z",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.z.converter"
                },
                "scaling": {
                  "description": "The scaling behavior of the value. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "valueFormats.z.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "tooltipDisplay": {
                  "description": "Whether the value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.z.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the value in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "value": null,
                  "translatable": true,
                  "help": "valueFormats.z.tooltipLabel"
                }
              }
            }
          }
        },
        "xAxis": {
          "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles.",
          "type": "object",
          "displayName": "X Axis",
          "help": "xAxis",
          "properties": {
            "axisLine": {
              "description": "An object defining properties for the axis line.",
              "type": "object",
              "displayName": "Axis Line",
              "help": "xAxis.axisLine",
              "properties": {
                "lineColor": {
                  "description": "The color of the axis line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color",
                  "help": "xAxis.axisLine.lineColor"
                },
                "lineWidth": {
                  "description": "The width of the axis line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "xAxis.axisLine.lineWidth"
                },
                "rendered": {
                  "description": "Defines whether the axis line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "on",
                  "help": "xAxis.axisLine.rendered",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "baselineScaling": {
              "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero. Only applies to numerical data axes.",
              "type": "string",
              "displayName": "Baseline Scaling",
              "value": "zero",
              "help": "xAxis.baselineScaling",
              "enumValues": [
                "min",
                "zero"
              ],
              "propertyEditorValues": {
                "min": {
                  "displayName": "Min"
                },
                "zero": {
                  "displayName": "Zero"
                }
              }
            },
            "dataMax": {
              "description": "The maximum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Data Max",
              "value": null,
              "help": "xAxis.dataMax"
            },
            "dataMin": {
              "description": "The minimum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Data Min",
              "value": null,
              "help": "xAxis.dataMin"
            },
            "majorTick": {
              "description": "An object defining properties for the major tick marks.",
              "type": "object",
              "displayName": "Major Tick",
              "help": "xAxis.majorTick",
              "properties": {
                "baselineColor": {
                  "description": "The color of the major tick mark at the baseline (x = 0). Valid values are auto, inherit, or a custom color. If set to inherit, it will follow the lineColor attribute.",
                  "type": "string",
                  "displayName": "Baseline Color",
                  "value": "auto",
                  "help": "xAxis.majorTick.baselineColor",
                  "enumValues": [
                    "auto",
                    "inherit"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "inherit": {
                      "displayName": "Inherit"
                    }
                  }
                },
                "baselineStyle": {
                  "description": "The line style of the major tick mark at the baseline (x = 0). If not specified, it will follow the lineStyle attribute.",
                  "type": "string",
                  "displayName": "Baseline Style",
                  "value": "solid",
                  "help": "xAxis.majorTick.baselineStyle",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "baselineWidth": {
                  "description": "The width of the major tick mark at the baseline (x = 0) If not specified, it will follow the lineWidth attribute.",
                  "type": "number",
                  "displayName": "Baseline Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "xAxis.majorTick.baselineWidth"
                },
                "lineColor": {
                  "description": "The color of the major tick marks.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color",
                  "help": "xAxis.majorTick.lineColor"
                },
                "lineStyle": {
                  "description": "The line style of the major tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "help": "xAxis.majorTick.lineStyle",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the major tick marks.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "xAxis.majorTick.lineWidth"
                },
                "rendered": {
                  "description": "Defines whether the major tick marks are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "help": "xAxis.majorTick.rendered",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "max": {
              "description": "The maximum value of the axis. Defaults to null for automatic calculation based on the data. See the Help documentation for more information.",
              "type": "number|string",
              "displayName": "Max",
              "value": null,
              "help": "xAxis.max"
            },
            "maxSize": {
              "description": "Defines the maximum size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Max Size",
              "value": null,
              "help": "xAxis.maxSize"
            },
            "min": {
              "description": "The minimum value of the axis. Defaults to null for automatic calculation based on the data. See the Help documentation for more information.",
              "type": "number|string",
              "displayName": "Min",
              "value": null,
              "help": "xAxis.min"
            },
            "minStep": {
              "description": "The minimum increment between major tick marks. This is typically used to prevent fractional axis values for discrete measures. Only applies to numerical axes.",
              "type": "number",
              "displayName": "Min Step",
              "value": null,
              "exclusiveMinimum": 0,
              "help": "xAxis.minStep"
            },
            "minorStep": {
              "description": "The increment between minor tick marks. Defaults to null for automatic calculation based on the data. Only applies to numerical axes. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Minor Step",
              "value": null,
              "exclusiveMinimum": 0,
              "help": "xAxis.minorStep"
            },
            "minorTick": {
              "description": "An object defining properties for the minor tick marks.",
              "type": "object",
              "displayName": "Minor Tick",
              "help": "xAxis.minorTick",
              "properties": {
                "lineColor": {
                  "description": "The color of the minor tick marks.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color",
                  "help": "xAxis.minorTick.lineColor"
                },
                "lineStyle": {
                  "description": "The line style of the minor tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "help": "xAxis.minorTick.lineStyle",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the minor tick marks.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "xAxis.minorTick.lineWidth"
                },
                "rendered": {
                  "description": "Defines whether the minor tick marks are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "help": "xAxis.minorTick.rendered",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "referenceObjects": {
              "description": "The array of reference objects associated with the axis.",
              "type": "Array<Object>",
              "displayName": "Reference Objects",
              "value": [],
              "help": "xAxis.referenceObjects",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "categories": {
                      "description": "An optional array of category strings corresponding to this reference object. This allows highlighting and filtering of a reference object through interactions with legend sections. If not defined, the reference object id is used.",
                      "type": "Array<string>",
                      "displayName": "Categories",
                      "value": null,
                      "help": "xAxis.referenceObjects[].categories"
                    },
                    "color": {
                      "description": "The color of the reference object.",
                      "type": "string",
                      "displayName": "Color",
                      "value": null,
                      "format": "color",
                      "help": "xAxis.referenceObjects[].color"
                    },
                    "displayInLegend": {
                      "description": "Defines whether the reference object should be shown in the legend.",
                      "type": "string",
                      "displayName": "Display In Legend",
                      "value": "off",
                      "help": "xAxis.referenceObjects[].displayInLegend",
                      "enumValues": [
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "off": {
                          "displayName": "Off"
                        },
                        "on": {
                          "displayName": "On"
                        }
                      }
                    },
                    "high": {
                      "description": "The high value of a reference area. For categorical axes, the value represents the group index. For example, 0 is the position of the first group, and 1.5 is the position half way between the second and the third group.",
                      "type": "number",
                      "displayName": "High",
                      "value": null,
                      "help": "xAxis.referenceObjects[].high"
                    },
                    "id": {
                      "description": "The id of the reference object.",
                      "type": "string",
                      "displayName": "Id",
                      "value": null,
                      "help": "xAxis.referenceObjects[].id"
                    },
                    "lineStyle": {
                      "description": "The line style of the reference line.",
                      "type": "string",
                      "displayName": "Line Style",
                      "value": "solid",
                      "help": "xAxis.referenceObjects[].lineStyle",
                      "enumValues": [
                        "dashed",
                        "dotted",
                        "solid"
                      ],
                      "propertyEditorValues": {
                        "dashed": {
                          "displayName": "Dashed"
                        },
                        "dotted": {
                          "displayName": "Dotted"
                        },
                        "solid": {
                          "displayName": "Solid"
                        }
                      }
                    },
                    "lineType": {
                      "description": "The line type of the reference line. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Line Type",
                      "value": "straight",
                      "help": "xAxis.referenceObjects[].lineType",
                      "enumValues": [
                        "centeredSegmented",
                        "centeredStepped",
                        "curved",
                        "segmented",
                        "stepped",
                        "straight"
                      ],
                      "propertyEditorValues": {
                        "centeredSegmented": {
                          "displayName": "Centered Segmented"
                        },
                        "centeredStepped": {
                          "displayName": "Centered Stepped"
                        },
                        "curved": {
                          "displayName": "Curved"
                        },
                        "segmented": {
                          "displayName": "Segmented"
                        },
                        "stepped": {
                          "displayName": "Stepped"
                        },
                        "straight": {
                          "displayName": "Straight"
                        }
                      }
                    },
                    "lineWidth": {
                      "description": "The width of the reference line.",
                      "type": "number",
                      "displayName": "Line Width",
                      "value": null,
                      "minimum": 0,
                      "units": "pixels",
                      "help": "xAxis.referenceObjects[].lineWidth"
                    },
                    "location": {
                      "description": "The location of the reference object relative to the data items.",
                      "type": "string",
                      "displayName": "Location",
                      "value": "back",
                      "help": "xAxis.referenceObjects[].location",
                      "enumValues": [
                        "back",
                        "front"
                      ],
                      "propertyEditorValues": {
                        "back": {
                          "displayName": "Back"
                        },
                        "front": {
                          "displayName": "Front"
                        }
                      }
                    },
                    "low": {
                      "description": "The low value of a reference area. For categorical axes, the value represents the group index. For example, 0 is the position of the first group, and 1.5 is the position half way between the second and the third group.",
                      "type": "number",
                      "displayName": "Low",
                      "value": null,
                      "help": "xAxis.referenceObjects[].low"
                    },
                    "shortDesc": {
                      "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                      "type": "string",
                      "displayName": "Short Desc",
                      "value": null,
                      "help": "xAxis.referenceObjects[].shortDesc"
                    },
                    "svgClassName": {
                      "description": "The CSS style class to apply to the reference object. See the Help documentation for more Information.",
                      "type": "string",
                      "displayName": "Svg Class Name",
                      "value": null,
                      "help": "xAxis.referenceObjects[].svgClassName"
                    },
                    "svgStyle": {
                      "description": "The CSS inline style to apply to the reference object. See the Help documentation for more Information.",
                      "type": "object",
                      "displayName": "Svg Style",
                      "value": null,
                      "help": "xAxis.referenceObjects[].svgStyle"
                    },
                    "text": {
                      "description": "The text displayed in the legend for the reference object.",
                      "type": "string",
                      "displayName": "Text",
                      "value": null,
                      "translatable": true,
                      "help": "xAxis.referenceObjects[].text"
                    },
                    "type": {
                      "description": "The type of reference object being shown.",
                      "type": "string",
                      "displayName": "Type",
                      "value": "line",
                      "help": "xAxis.referenceObjects[].type",
                      "enumValues": [
                        "area",
                        "line"
                      ],
                      "propertyEditorValues": {
                        "area": {
                          "displayName": "Area"
                        },
                        "line": {
                          "displayName": "Line"
                        }
                      }
                    },
                    "value": {
                      "description": "The value of a reference line. For categorical axes, the value represents the group index. For example, 0 is the position of the first group, and 1.5 is the position half way between the second and the third group.",
                      "type": "number",
                      "displayName": "Value",
                      "value": null,
                      "help": "xAxis.referenceObjects[].value"
                    }
                  }
                }
              }
            },
            "rendered": {
              "description": "Defines whether the axis is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "on",
              "help": "xAxis.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "scale": {
              "description": "Defines the axis scale. Only applies to numerical axes.",
              "type": "string",
              "displayName": "Scale",
              "value": "linear",
              "help": "xAxis.scale",
              "enumValues": [
                "linear",
                "log"
              ],
              "propertyEditorValues": {
                "linear": {
                  "displayName": "Linear"
                },
                "log": {
                  "displayName": "Log"
                }
              }
            },
            "size": {
              "description": "Defines the size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Size",
              "value": null,
              "help": "xAxis.size"
            },
            "step": {
              "description": "The increment between major tick marks. Defaults to null for automatic calculation based on the data. Only applies to time and numerical axes. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Step",
              "value": null,
              "exclusiveMinimum": 0,
              "help": "xAxis.step"
            },
            "tickLabel": {
              "description": "An object defining the properties of the tick labels.",
              "type": "object",
              "displayName": "Tick Label",
              "help": "xAxis.tickLabel",
              "properties": {
                "converter": {
                  "description": "The converter used to format the labels. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "xAxis.tickLabel.converter"
                },
                "rendered": {
                  "description": "Defines whether the tick labels are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "on",
                  "help": "xAxis.tickLabel.rendered",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                },
                "rotation": {
                  "description": "Defines whether the chart will automatically rotate the labels by 90 degrees in order to fit more labels on the axis. The rotation will only be applied to categorical labels for a horizontal axis.",
                  "type": "string",
                  "displayName": "Rotation",
                  "value": "auto",
                  "help": "xAxis.tickLabel.rotation",
                  "enumValues": [
                    "auto",
                    "none"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "none": {
                      "displayName": "None"
                    }
                  }
                },
                "scaling": {
                  "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "xAxis.tickLabel.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "style": {
                  "description": "The CSS style object defining the style of the labels. The CSS white-space property can be defined with value \"nowrap\" to disable default text wrapping of categorical labels.",
                  "type": "object",
                  "displayName": "Style",
                  "value": {},
                  "help": "xAxis.tickLabel.style"
                }
              }
            },
            "title": {
              "description": "The axis title. Does not apply to polar charts.",
              "type": "string",
              "displayName": "Title",
              "value": null,
              "translatable": true,
              "help": "xAxis.title"
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the axis title. The CSS white-space property can be defined with value \"nowrap\" to disable default text wrapping of the title.",
              "type": "object",
              "displayName": "Title Style",
              "value": {},
              "help": "xAxis.titleStyle"
            },
            "viewportEndGroup": {
              "description": "Specifies the end group of the current viewport. Only applies to charts with group or time axis. If not specified, the default end group is the last group in the data set.",
              "type": "number|string",
              "displayName": "Viewport End Group",
              "value": null,
              "help": "xAxis.viewportEndGroup"
            },
            "viewportMax": {
              "description": "Specifies the maximum x coordinate of the current viewport for zoom and scroll. See the Help documentation for more information.",
              "type": "number|string",
              "displayName": "Viewport Max",
              "value": null,
              "help": "xAxis.viewportMax"
            },
            "viewportMin": {
              "description": "Specifies the minimum x coordinate of the current viewport for zoom and scroll. See the Help documentation for more information.",
              "type": "number|string",
              "displayName": "Viewport Min",
              "value": null,
              "help": "xAxis.viewportMin"
            },
            "viewportStartGroup": {
              "description": "Specifies the start group of the current viewport. Only applies to charts with group or time axis. If not specified, the default start group is the first group in the data set.",
              "type": "number|string",
              "displayName": "Viewport Start Group",
              "value": null,
              "help": "xAxis.viewportStartGroup"
            }
          }
        },
        "y2Axis": {
          "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles. Y2 axis is only supported for Cartesian bar, line, area, and combo charts.",
          "type": "object",
          "displayName": "Y2 Axis",
          "help": "y2Axis",
          "properties": {
            "alignTickMarks": {
              "description": "Defines whether the tick marks of the y1 and y2 axes are aligned. Not supported for logarithmic axes.",
              "type": "string",
              "displayName": "Align Tick Marks",
              "value": "on",
              "help": "y2Axis.alignTickMarks",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "axisLine": {
              "description": "An object defining properties for the axis line.",
              "type": "object",
              "displayName": "Axis Line",
              "help": "y2Axis.axisLine",
              "properties": {
                "lineColor": {
                  "description": "The color of the axis line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color",
                  "help": "y2Axis.axisLine.lineColor"
                },
                "lineWidth": {
                  "description": "The width of the axis line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "y2Axis.axisLine.lineWidth"
                },
                "rendered": {
                  "description": "Defines whether the axis line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "help": "y2Axis.axisLine.rendered",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "baselineScaling": {
              "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero. Only applies to numerical data axes.",
              "type": "string",
              "displayName": "Baseline Scaling",
              "value": "zero",
              "help": "y2Axis.baselineScaling",
              "enumValues": [
                "min",
                "zero"
              ],
              "propertyEditorValues": {
                "min": {
                  "displayName": "Min"
                },
                "zero": {
                  "displayName": "Zero"
                }
              }
            },
            "dataMax": {
              "description": "The maximum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value.",
              "type": "number",
              "displayName": "Data Max",
              "value": null,
              "help": "y2Axis.dataMax"
            },
            "dataMin": {
              "description": "The minimum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value.",
              "type": "number",
              "displayName": "Data Min",
              "value": null,
              "help": "y2Axis.dataMin"
            },
            "majorTick": {
              "description": "An object defining properties for the major tick marks.",
              "type": "object",
              "displayName": "Major Tick",
              "help": "y2Axis.majorTick",
              "properties": {
                "baselineColor": {
                  "description": "The color of the major tick mark at the baseline (y = 0). Valid values are auto, inherit, or a custom color. If set to inherit, it will follow the lineColor attribute.",
                  "type": "string",
                  "displayName": "Baseline Color",
                  "value": "auto",
                  "help": "y2Axis.majorTick.baselineColor",
                  "enumValues": [
                    "auto",
                    "inherit"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "inherit": {
                      "displayName": "Inherit"
                    }
                  }
                },
                "baselineStyle": {
                  "description": "The line style of the major tick mark at the baseline (y = 0). If not specified, it will follow the lineStyle attribute.",
                  "type": "string",
                  "displayName": "Baseline Style",
                  "value": "solid",
                  "help": "y2Axis.majorTick.baselineStyle",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "baselineWidth": {
                  "description": "The width of the major tick mark at the baseline (y = 0) If not specified, it will follow the lineWidth attribute.",
                  "type": "number",
                  "displayName": "Baseline Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "y2Axis.majorTick.baselineWidth"
                },
                "lineColor": {
                  "description": "The color of the major tick marks.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color",
                  "help": "y2Axis.majorTick.lineColor"
                },
                "lineStyle": {
                  "description": "The line style of the major tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "help": "y2Axis.majorTick.lineStyle",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the major tick marks.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "y2Axis.majorTick.lineWidth"
                },
                "rendered": {
                  "description": "Defines whether the major tick marks are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "help": "y2Axis.majorTick.rendered",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "max": {
              "description": "The maximum value of the axis. Defaults to null for automatic calculation based on the data.",
              "type": "number",
              "displayName": "Max",
              "value": null,
              "help": "y2Axis.max"
            },
            "maxSize": {
              "description": "Defines the maximum size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Max Size",
              "value": null,
              "help": "y2Axis.maxSize"
            },
            "min": {
              "description": "The minimum value of the axis. Defaults to null for automatic calculation based on the data.",
              "type": "number",
              "displayName": "Min",
              "value": null,
              "help": "y2Axis.min"
            },
            "minStep": {
              "description": "The minimum increment between major tick marks. This is typically used to prevent fractional axis values for discrete measures.",
              "type": "number",
              "displayName": "Min Step",
              "value": null,
              "exclusiveMinimum": 0,
              "help": "y2Axis.minStep"
            },
            "minorStep": {
              "description": "The increment between minor tick marks. Defaults to null for automatic calculation based on the data. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Minor Step",
              "value": null,
              "exclusiveMinimum": 0,
              "help": "y2Axis.minorStep"
            },
            "minorTick": {
              "description": "An object defining properties for the minor tick marks.",
              "type": "object",
              "displayName": "Minor Tick",
              "help": "y2Axis.minorTick",
              "properties": {
                "lineColor": {
                  "description": "The color of the minor tick marks.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color",
                  "help": "y2Axis.minorTick.lineColor"
                },
                "lineStyle": {
                  "description": "The line style of the minor tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "help": "y2Axis.minorTick.lineStyle",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the minor tick marks.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "y2Axis.minorTick.lineWidth"
                },
                "rendered": {
                  "description": "Defines whether the minor tick marks are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "help": "y2Axis.minorTick.rendered",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "position": {
              "description": "The position of the axis relative to its content. For vertical charts, only start and end apply. For horizontal charts, only top and bottom apply.",
              "type": "string",
              "displayName": "Position",
              "value": "auto",
              "help": "y2Axis.position",
              "enumValues": [
                "auto",
                "bottom",
                "end",
                "start",
                "top"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "bottom": {
                  "displayName": "Bottom"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                },
                "top": {
                  "displayName": "Top"
                }
              }
            },
            "referenceObjects": {
              "description": "The array of reference objects associated with the axis.",
              "type": "Array<Object>",
              "displayName": "Reference Objects",
              "value": [],
              "help": "y2Axis.referenceObjects",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "categories": {
                      "description": "An optional array of category strings corresponding to this reference object. This allows highlighting and filtering of a reference object through interactions with legend sections. If not defined, the reference object id is used.",
                      "type": "Array<string>",
                      "displayName": "Categories",
                      "value": null,
                      "help": "y2Axis.referenceObjects[].categories"
                    },
                    "color": {
                      "description": "The color of the reference object.",
                      "type": "string",
                      "displayName": "Color",
                      "value": null,
                      "format": "color",
                      "help": "y2Axis.referenceObjects[].color"
                    },
                    "displayInLegend": {
                      "description": "Defines whether the reference object should be shown in the legend.",
                      "type": "string",
                      "displayName": "Display In Legend",
                      "value": "off",
                      "help": "y2Axis.referenceObjects[].displayInLegend",
                      "enumValues": [
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "off": {
                          "displayName": "Off"
                        },
                        "on": {
                          "displayName": "On"
                        }
                      }
                    },
                    "high": {
                      "description": "The high value of a reference area. This property defines a constant value across the entire reference area and is ignored if the items array is specified.",
                      "type": "number",
                      "displayName": "High",
                      "value": null,
                      "help": "y2Axis.referenceObjects[].high"
                    },
                    "id": {
                      "description": "The id of the reference object.",
                      "type": "string",
                      "displayName": "Id",
                      "value": null,
                      "help": "y2Axis.referenceObjects[].id"
                    },
                    "items": {
                      "description": "An array of values or an array of objects that define the data for a varying reference object. See the Help documentation for more information.",
                      "type": "Array<Object>|Array<number>",
                      "displayName": "Items",
                      "value": null,
                      "help": "y2Axis.referenceObjects[].items",
                      "properties": {
                        "high": {
                          "description": "The high value of this point of a reference area.",
                          "type": "number",
                          "displayName": "High",
                          "value": null,
                          "help": "y2Axis.referenceObjects[].items[].high"
                        },
                        "low": {
                          "description": "The low value of this point of a reference area.",
                          "type": "number",
                          "displayName": "Low",
                          "value": null,
                          "help": "y2Axis.referenceObjects[].items[].low"
                        },
                        "value": {
                          "description": "The value of this point of a line object. Null can be specified to skip a data point.",
                          "type": "number",
                          "displayName": "Value",
                          "value": null,
                          "help": "y2Axis.referenceObjects[].items[].value"
                        },
                        "x": {
                          "description": "The x value of this point. Mainly used for scatter and bubble charts, and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string",
                          "displayName": "X",
                          "value": null,
                          "help": "y2Axis.referenceObjects[].items[].x"
                        }
                      }
                    },
                    "lineStyle": {
                      "description": "The line style of the reference line.",
                      "type": "string",
                      "displayName": "Line Style",
                      "value": "solid",
                      "help": "y2Axis.referenceObjects[].lineStyle",
                      "enumValues": [
                        "dashed",
                        "dotted",
                        "solid"
                      ],
                      "propertyEditorValues": {
                        "dashed": {
                          "displayName": "Dashed"
                        },
                        "dotted": {
                          "displayName": "Dotted"
                        },
                        "solid": {
                          "displayName": "Solid"
                        }
                      }
                    },
                    "lineType": {
                      "description": "The line type of the reference line. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Line Type",
                      "value": "straight",
                      "help": "y2Axis.referenceObjects[].lineType",
                      "enumValues": [
                        "centeredSegmented",
                        "centeredStepped",
                        "curved",
                        "segmented",
                        "stepped",
                        "straight"
                      ],
                      "propertyEditorValues": {
                        "centeredSegmented": {
                          "displayName": "Centered Segmented"
                        },
                        "centeredStepped": {
                          "displayName": "Centered Stepped"
                        },
                        "curved": {
                          "displayName": "Curved"
                        },
                        "segmented": {
                          "displayName": "Segmented"
                        },
                        "stepped": {
                          "displayName": "Stepped"
                        },
                        "straight": {
                          "displayName": "Straight"
                        }
                      }
                    },
                    "lineWidth": {
                      "description": "The width of the reference line.",
                      "type": "number",
                      "displayName": "Line Width",
                      "value": null,
                      "minimum": 0,
                      "units": "pixels",
                      "help": "y2Axis.referenceObjects[].lineWidth"
                    },
                    "location": {
                      "description": "The location of the reference object relative to the data items.",
                      "type": "string",
                      "displayName": "Location",
                      "value": "back",
                      "help": "y2Axis.referenceObjects[].location",
                      "enumValues": [
                        "back",
                        "front"
                      ],
                      "propertyEditorValues": {
                        "back": {
                          "displayName": "Back"
                        },
                        "front": {
                          "displayName": "Front"
                        }
                      }
                    },
                    "low": {
                      "description": "The low value of a reference area. This property defines a constant value across the entire reference area and is ignored if the items array is specified.",
                      "type": "number",
                      "displayName": "Low",
                      "value": null,
                      "help": "y2Axis.referenceObjects[].low"
                    },
                    "shortDesc": {
                      "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                      "type": "string",
                      "displayName": "Short Desc",
                      "value": null,
                      "help": "y2Axis.referenceObjects[].shortDesc"
                    },
                    "svgClassName": {
                      "description": "The CSS style class to apply to the reference object. See the Help documentation for more Information.",
                      "type": "string",
                      "displayName": "Svg Class Name",
                      "value": null,
                      "help": "y2Axis.referenceObjects[].svgClassName"
                    },
                    "svgStyle": {
                      "description": "The CSS inline style to apply to the reference object. See the Help documentation for more Information.",
                      "type": "object",
                      "displayName": "Svg Style",
                      "value": null,
                      "help": "y2Axis.referenceObjects[].svgStyle"
                    },
                    "text": {
                      "description": "The text displayed in the legend for the reference object.",
                      "type": "string",
                      "displayName": "Text",
                      "value": null,
                      "translatable": true,
                      "help": "y2Axis.referenceObjects[].text"
                    },
                    "type": {
                      "description": "The type of reference object being shown.",
                      "type": "string",
                      "displayName": "Type",
                      "value": "line",
                      "help": "y2Axis.referenceObjects[].type",
                      "enumValues": [
                        "area",
                        "line"
                      ],
                      "propertyEditorValues": {
                        "area": {
                          "displayName": "Area"
                        },
                        "line": {
                          "displayName": "Line"
                        }
                      }
                    },
                    "value": {
                      "description": "The value of a reference line. This property defines a constant value across the entire reference line and is ignored if the items array is specified.",
                      "type": "number",
                      "displayName": "Value",
                      "value": null,
                      "help": "y2Axis.referenceObjects[].value"
                    }
                  }
                }
              }
            },
            "rendered": {
              "description": "Defines whether the axis is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "on",
              "help": "y2Axis.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "scale": {
              "description": "Defines the axis scale. Only applies to numerical axes.",
              "type": "string",
              "displayName": "Scale",
              "value": "linear",
              "help": "y2Axis.scale",
              "enumValues": [
                "linear",
                "log"
              ],
              "propertyEditorValues": {
                "linear": {
                  "displayName": "Linear"
                },
                "log": {
                  "displayName": "Log"
                }
              }
            },
            "size": {
              "description": "Defines the size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Size",
              "value": null,
              "help": "y2Axis.size"
            },
            "step": {
              "description": "The increment between major tick marks. Defaults to null for automatic calculation based on the data. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Step",
              "value": null,
              "exclusiveMinimum": 0,
              "help": "y2Axis.step"
            },
            "tickLabel": {
              "description": "An object defining the properties of the tick labels.",
              "type": "object",
              "displayName": "Tick Label",
              "help": "y2Axis.tickLabel",
              "properties": {
                "converter": {
                  "description": "The converter used to format the labels. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "y2Axis.tickLabel.converter"
                },
                "position": {
                  "description": "Defines the position of the tick labels relative to the plot area.",
                  "type": "string",
                  "displayName": "Position",
                  "value": "outside",
                  "help": "y2Axis.tickLabel.position",
                  "enumValues": [
                    "inside",
                    "outside"
                  ],
                  "propertyEditorValues": {
                    "inside": {
                      "displayName": "Inside"
                    },
                    "outside": {
                      "displayName": "Outside"
                    }
                  }
                },
                "rendered": {
                  "description": "Defines whether the tick labels are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "on",
                  "help": "y2Axis.tickLabel.rendered",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                },
                "scaling": {
                  "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "y2Axis.tickLabel.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "style": {
                  "description": "The CSS style object defining the style of the labels.",
                  "type": "object",
                  "displayName": "Style",
                  "value": {},
                  "help": "y2Axis.tickLabel.style"
                }
              }
            },
            "title": {
              "description": "The axis title.",
              "type": "string",
              "displayName": "Title",
              "value": null,
              "translatable": true,
              "help": "y2Axis.title"
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the axis title. The CSS white-space property can be defined with value \"nowrap\" to disable default text wrapping of the title.",
              "type": "object",
              "displayName": "Title Style",
              "value": {},
              "help": "y2Axis.titleStyle"
            }
          }
        },
        "yAxis": {
          "description": "An object defining properties for the axis, tick marks, tick labels, and axis titles.",
          "type": "object",
          "displayName": "Y Axis",
          "help": "yAxis",
          "properties": {
            "axisLine": {
              "description": "An object defining properties for the axis line.",
              "type": "object",
              "displayName": "Axis Line",
              "help": "yAxis.axisLine",
              "properties": {
                "lineColor": {
                  "description": "The color of the axis line.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color",
                  "help": "yAxis.axisLine.lineColor"
                },
                "lineWidth": {
                  "description": "The width of the axis line.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "yAxis.axisLine.lineWidth"
                },
                "rendered": {
                  "description": "Defines whether the axis line is rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "help": "yAxis.axisLine.rendered",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "baselineScaling": {
              "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero. Only applies to numerical data axes.",
              "type": "string",
              "displayName": "Baseline Scaling",
              "value": "zero",
              "help": "yAxis.baselineScaling",
              "enumValues": [
                "min",
                "zero"
              ],
              "propertyEditorValues": {
                "min": {
                  "displayName": "Min"
                },
                "zero": {
                  "displayName": "Zero"
                }
              }
            },
            "dataMax": {
              "description": "The maximum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value.",
              "type": "number",
              "displayName": "Data Max",
              "value": null,
              "help": "yAxis.dataMax"
            },
            "dataMin": {
              "description": "The minimum data value corresponding to an axis. If specified, the automatic axis extent calculation will use this value.",
              "type": "number",
              "displayName": "Data Min",
              "value": null,
              "help": "yAxis.dataMin"
            },
            "majorTick": {
              "description": "An object defining properties for the major tick marks.",
              "type": "object",
              "displayName": "Major Tick",
              "help": "yAxis.majorTick",
              "properties": {
                "baselineColor": {
                  "description": "The color of the major tick mark at the baseline (y = 0). Valid values are auto, inherit, or a custom color. If set to inherit, it will follow the lineColor attribute.",
                  "type": "string",
                  "displayName": "Baseline Color",
                  "value": "auto",
                  "help": "yAxis.majorTick.baselineColor",
                  "enumValues": [
                    "auto",
                    "inherit"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "inherit": {
                      "displayName": "Inherit"
                    }
                  }
                },
                "baselineStyle": {
                  "description": "The line style of the major tick mark at the baseline (y = 0). If not specified, it will follow the lineStyle attribute.",
                  "type": "string",
                  "displayName": "Baseline Style",
                  "value": "solid",
                  "help": "yAxis.majorTick.baselineStyle",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "baselineWidth": {
                  "description": "The width of the major tick mark at the baseline (y = 0) If not specified, it will follow the lineWidth attribute.",
                  "type": "number",
                  "displayName": "Baseline Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "yAxis.majorTick.baselineWidth"
                },
                "lineColor": {
                  "description": "The color of the major tick marks.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color",
                  "help": "yAxis.majorTick.lineColor"
                },
                "lineStyle": {
                  "description": "The line style of the major tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "help": "yAxis.majorTick.lineStyle",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the major tick marks.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "yAxis.majorTick.lineWidth"
                },
                "rendered": {
                  "description": "Defines whether the major tick marks are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "help": "yAxis.majorTick.rendered",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "max": {
              "description": "The maximum value of the axis. Defaults to null for automatic calculation based on the data.",
              "type": "number",
              "displayName": "Max",
              "value": null,
              "help": "yAxis.max"
            },
            "maxSize": {
              "description": "Defines the maximum size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Max Size",
              "value": null,
              "help": "yAxis.maxSize"
            },
            "min": {
              "description": "The minimum value of the axis. Defaults to null for automatic calculation based on the data.",
              "type": "number",
              "displayName": "Min",
              "value": null,
              "help": "yAxis.min"
            },
            "minStep": {
              "description": "The minimum increment between major tick marks. This is typically used to prevent fractional axis values for discrete measures.",
              "type": "number",
              "displayName": "Min Step",
              "value": null,
              "exclusiveMinimum": 0,
              "help": "yAxis.minStep"
            },
            "minorStep": {
              "description": "The increment between minor tick marks. Defaults to null for automatic calculation based on the data. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Minor Step",
              "value": null,
              "exclusiveMinimum": 0,
              "help": "yAxis.minorStep"
            },
            "minorTick": {
              "description": "An object defining properties for the minor tick marks.",
              "type": "object",
              "displayName": "Minor Tick",
              "help": "yAxis.minorTick",
              "properties": {
                "lineColor": {
                  "description": "The color of the minor tick marks.",
                  "type": "string",
                  "displayName": "Line Color",
                  "value": null,
                  "format": "color",
                  "help": "yAxis.minorTick.lineColor"
                },
                "lineStyle": {
                  "description": "The line style of the minor tick marks.",
                  "type": "string",
                  "displayName": "Line Style",
                  "value": "solid",
                  "help": "yAxis.minorTick.lineStyle",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "dashed": {
                      "displayName": "Dashed"
                    },
                    "dotted": {
                      "displayName": "Dotted"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "lineWidth": {
                  "description": "The width of the minor tick marks.",
                  "type": "number",
                  "displayName": "Line Width",
                  "value": null,
                  "minimum": 0,
                  "units": "pixels",
                  "help": "yAxis.minorTick.lineWidth"
                },
                "rendered": {
                  "description": "Defines whether the minor tick marks are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "auto",
                  "help": "yAxis.minorTick.rendered",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "position": {
              "description": "The position of the axis relative to its content. For vertical charts, only start and end apply. For horizontal charts, only top and bottom apply.",
              "type": "string",
              "displayName": "Position",
              "value": "auto",
              "help": "yAxis.position",
              "enumValues": [
                "auto",
                "bottom",
                "end",
                "start",
                "top"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "bottom": {
                  "displayName": "Bottom"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                },
                "top": {
                  "displayName": "Top"
                }
              }
            },
            "referenceObjects": {
              "description": "The array of reference objects associated with the axis.",
              "type": "Array<Object>",
              "displayName": "Reference Objects",
              "value": [],
              "help": "yAxis.referenceObjects",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "categories": {
                      "description": "An optional array of category strings corresponding to this reference object. This allows highlighting and filtering of a reference object through interactions with legend sections. If not defined, the reference object id is used.",
                      "type": "Array<string>",
                      "displayName": "Categories",
                      "value": null,
                      "help": "yAxis.referenceObjects[].categories"
                    },
                    "color": {
                      "description": "The color of the reference object.",
                      "type": "string",
                      "displayName": "Color",
                      "value": null,
                      "format": "color",
                      "help": "yAxis.referenceObjects[].color"
                    },
                    "displayInLegend": {
                      "description": "Defines whether the reference object should be shown in the legend.",
                      "type": "string",
                      "displayName": "Display In Legend",
                      "value": "off",
                      "help": "yAxis.referenceObjects[].displayInLegend",
                      "enumValues": [
                        "off",
                        "on"
                      ],
                      "propertyEditorValues": {
                        "off": {
                          "displayName": "Off"
                        },
                        "on": {
                          "displayName": "On"
                        }
                      }
                    },
                    "high": {
                      "description": "The high value of a reference area. This property defines a constant value across the entire reference area and is ignored if the items array is specified.",
                      "type": "number",
                      "displayName": "High",
                      "value": null,
                      "help": "yAxis.referenceObjects[].high"
                    },
                    "id": {
                      "description": "The id of the reference object.",
                      "type": "string",
                      "displayName": "Id",
                      "value": null,
                      "help": "yAxis.referenceObjects[].id"
                    },
                    "items": {
                      "description": "An array of values or an array of objects that define the data for a varying reference object. See the Help documentation for more information.",
                      "type": "Array<Object>|Array<number>",
                      "displayName": "Items",
                      "value": null,
                      "help": "yAxis.referenceObjects[].items",
                      "properties": {
                        "high": {
                          "description": "The high value of this point of a reference area.",
                          "type": "number",
                          "displayName": "High",
                          "value": null,
                          "help": "yAxis.referenceObjects[].items[].high"
                        },
                        "low": {
                          "description": "The low value of this point of a reference area.",
                          "type": "number",
                          "displayName": "Low",
                          "value": null,
                          "help": "yAxis.referenceObjects[].items[].low"
                        },
                        "value": {
                          "description": "The value of this point of a line object. Null can be specified to skip a data point.",
                          "type": "number",
                          "displayName": "Value",
                          "value": null,
                          "help": "yAxis.referenceObjects[].items[].value"
                        },
                        "x": {
                          "description": "The x value of this point. Mainly used for scatter and bubble charts, and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string",
                          "displayName": "X",
                          "value": null,
                          "help": "yAxis.referenceObjects[].items[].x"
                        }
                      }
                    },
                    "lineStyle": {
                      "description": "The line style of the reference line.",
                      "type": "string",
                      "displayName": "Line Style",
                      "value": "solid",
                      "help": "yAxis.referenceObjects[].lineStyle",
                      "enumValues": [
                        "dashed",
                        "dotted",
                        "solid"
                      ],
                      "propertyEditorValues": {
                        "dashed": {
                          "displayName": "Dashed"
                        },
                        "dotted": {
                          "displayName": "Dotted"
                        },
                        "solid": {
                          "displayName": "Solid"
                        }
                      }
                    },
                    "lineType": {
                      "description": "The line type of the reference line. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Line Type",
                      "value": "straight",
                      "help": "yAxis.referenceObjects[].lineType",
                      "enumValues": [
                        "centeredSegmented",
                        "centeredStepped",
                        "curved",
                        "segmented",
                        "stepped",
                        "straight"
                      ],
                      "propertyEditorValues": {
                        "centeredSegmented": {
                          "displayName": "Centered Segmented"
                        },
                        "centeredStepped": {
                          "displayName": "Centered Stepped"
                        },
                        "curved": {
                          "displayName": "Curved"
                        },
                        "segmented": {
                          "displayName": "Segmented"
                        },
                        "stepped": {
                          "displayName": "Stepped"
                        },
                        "straight": {
                          "displayName": "Straight"
                        }
                      }
                    },
                    "lineWidth": {
                      "description": "The width of the reference line.",
                      "type": "number",
                      "displayName": "Line Width",
                      "value": null,
                      "minimum": 0,
                      "units": "pixels",
                      "help": "yAxis.referenceObjects[].lineWidth"
                    },
                    "location": {
                      "description": "The location of the reference object relative to the data items.",
                      "type": "string",
                      "displayName": "Location",
                      "value": "back",
                      "help": "yAxis.referenceObjects[].location",
                      "enumValues": [
                        "back",
                        "front"
                      ],
                      "propertyEditorValues": {
                        "back": {
                          "displayName": "Back"
                        },
                        "front": {
                          "displayName": "Front"
                        }
                      }
                    },
                    "low": {
                      "description": "The low value of a reference area. This property defines a constant value across the entire reference area and is ignored if the items array is specified.",
                      "type": "number",
                      "displayName": "Low",
                      "value": null,
                      "help": "yAxis.referenceObjects[].low"
                    },
                    "shortDesc": {
                      "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                      "type": "string",
                      "displayName": "Short Desc",
                      "value": null,
                      "help": "yAxis.referenceObjects[].shortDesc"
                    },
                    "svgClassName": {
                      "description": "The CSS style class to apply to the reference object. See the Help documentation for more Information.",
                      "type": "string",
                      "displayName": "Svg Class Name",
                      "value": null,
                      "help": "yAxis.referenceObjects[].svgClassName"
                    },
                    "svgStyle": {
                      "description": "The CSS inline style to apply to the reference object. See the Help documentation for more Information.",
                      "type": "object",
                      "displayName": "Svg Style",
                      "value": null,
                      "help": "yAxis.referenceObjects[].svgStyle"
                    },
                    "text": {
                      "description": "The text displayed in the legend for the reference object.",
                      "type": "string",
                      "displayName": "Text",
                      "value": null,
                      "translatable": true,
                      "help": "yAxis.referenceObjects[].text"
                    },
                    "type": {
                      "description": "The type of reference object being shown.",
                      "type": "string",
                      "displayName": "Type",
                      "value": "line",
                      "help": "yAxis.referenceObjects[].type",
                      "enumValues": [
                        "area",
                        "line"
                      ],
                      "propertyEditorValues": {
                        "area": {
                          "displayName": "Area"
                        },
                        "line": {
                          "displayName": "Line"
                        }
                      }
                    },
                    "value": {
                      "description": "The value of a reference line. This property defines a constant value across the entire reference line and is ignored if the items array is specified.",
                      "type": "number",
                      "displayName": "Value",
                      "value": null,
                      "help": "yAxis.referenceObjects[].value"
                    }
                  }
                }
              }
            },
            "rendered": {
              "description": "Defines whether the axis is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "on",
              "help": "yAxis.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "scale": {
              "description": "Defines the axis scale. Only applies to numerical axes.",
              "type": "string",
              "displayName": "Scale",
              "value": "linear",
              "help": "yAxis.scale",
              "enumValues": [
                "linear",
                "log"
              ],
              "propertyEditorValues": {
                "linear": {
                  "displayName": "Linear"
                },
                "log": {
                  "displayName": "Log"
                }
              }
            },
            "size": {
              "description": "Defines the size of the axis in pixels (e.g. '50px') or percent (e.g. '15%').",
              "type": "string",
              "displayName": "Size",
              "value": null,
              "help": "yAxis.size"
            },
            "step": {
              "description": "The increment between major tick marks. Defaults to null for automatic calculation based on the data. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Step",
              "value": null,
              "exclusiveMinimum": 0,
              "help": "yAxis.step"
            },
            "tickLabel": {
              "description": "An object defining the properties of the tick labels.",
              "type": "object",
              "displayName": "Tick Label",
              "help": "yAxis.tickLabel",
              "properties": {
                "converter": {
                  "description": "The converter used to format the labels. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "yAxis.tickLabel.converter"
                },
                "position": {
                  "description": "Defines the position of the tick labels relative to the plot area. Inside position is not supported for scatter and bubble charts.",
                  "type": "string",
                  "displayName": "Position",
                  "value": "outside",
                  "help": "yAxis.tickLabel.position",
                  "enumValues": [
                    "inside",
                    "outside"
                  ],
                  "propertyEditorValues": {
                    "inside": {
                      "displayName": "Inside"
                    },
                    "outside": {
                      "displayName": "Outside"
                    }
                  }
                },
                "rendered": {
                  "description": "Defines whether the tick labels are rendered.",
                  "type": "string",
                  "displayName": "Rendered",
                  "value": "on",
                  "help": "yAxis.tickLabel.rendered",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                },
                "scaling": {
                  "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
                  "type": "string",
                  "displayName": "Scaling",
                  "value": "auto",
                  "help": "yAxis.tickLabel.scaling",
                  "enumValues": [
                    "auto",
                    "billion",
                    "million",
                    "none",
                    "quadrillion",
                    "thousand",
                    "trillion"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "billion": {
                      "displayName": "Billion"
                    },
                    "million": {
                      "displayName": "Million"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "quadrillion": {
                      "displayName": "Quadrillion"
                    },
                    "thousand": {
                      "displayName": "Thousand"
                    },
                    "trillion": {
                      "displayName": "Trillion"
                    }
                  }
                },
                "style": {
                  "description": "The CSS style object defining the style of the labels.",
                  "type": "object",
                  "displayName": "Style",
                  "value": {},
                  "help": "yAxis.tickLabel.style"
                }
              }
            },
            "title": {
              "description": "The axis title. Does not apply to polar charts.",
              "type": "string",
              "displayName": "Title",
              "value": null,
              "translatable": true,
              "help": "yAxis.title"
            },
            "titleStyle": {
              "description": "The CSS style object defining the style of the axis title. The CSS white-space property can be defined with value \"nowrap\" to disable default text wrapping of the title.",
              "type": "object",
              "displayName": "Title Style",
              "value": {},
              "help": "yAxis.titleStyle"
            },
            "viewportMax": {
              "description": "Specifies the maximum y coordinate of the current viewport for zoom and scroll. Only applies to bubble and scatter charts. If not specified, this value will be the axis max.",
              "type": "number",
              "displayName": "Viewport Max",
              "value": null,
              "help": "yAxis.viewportMax"
            },
            "viewportMin": {
              "description": "Specifies the minimum y coordinate of the current viewport for zoom and scroll. Only applies to bubble and scatter charts. If not specified, this value will be the axis min.",
              "type": "number",
              "displayName": "Viewport Min",
              "value": null,
              "help": "yAxis.viewportMin"
            }
          }
        },
        "zoomAndScroll": {
          "description": "Specifies the zoom and scroll behavior of the chart. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Zoom And Scroll",
          "value": "off",
          "help": "zoomAndScroll",
          "enumValues": [
            "delayed",
            "delayedScrollOnly",
            "live",
            "liveScrollOnly",
            "off"
          ],
          "propertyEditorValues": {
            "delayed": {
              "displayName": "Delayed"
            },
            "delayedScrollOnly": {
              "displayName": "Delayed Scroll Only"
            },
            "live": {
              "displayName": "Live"
            },
            "liveScrollOnly": {
              "displayName": "Live Scroll Only"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "zoomDirection": {
          "description": "Specifies the zoom direction of bubble and scatter charts. \"Auto\" zooms in both x and y direction. Use \"x\" or \"y\" for single direction zooming.",
          "type": "string",
          "displayName": "Zoom Direction",
          "value": "auto",
          "help": "zoomDirection",
          "enumValues": [
            "auto",
            "x",
            "y"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "x": {
              "displayName": "X"
            },
            "y": {
              "displayName": "Y"
            }
          }
        }
      },
      "methods": {
        "getGroup": {
          "description": "Returns the group corresponding to the given index",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getGroup",
          "params": [
            {
              "name": "groupIndex",
              "description": "the group index",
              "type": "string"
            }
          ],
          "return": "string"
        },
        "getSeries": {
          "description": "Returns the series corresponding to the given index",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getSeries",
          "params": [
            {
              "name": "seriesIndex",
              "description": "the series index",
              "type": "string"
            }
          ],
          "return": "string"
        },
        "getGroupCount": {
          "description": "Returns number of groups in the chart data",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getGroupCount",
          "return": "number"
        },
        "getSeriesCount": {
          "description": "Returns number of series in the chart data",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getSeriesCount",
          "return": "number"
        },
        "getDataItem": {
          "description": "Returns information for automation testing verification of a specified data item.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getDataItem",
          "params": [
            {
              "name": "seriesIndex",
              "description": "",
              "type": "number"
            },
            {
              "name": "groupIndex",
              "description": "",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getLegend": {
          "description": "Returns information for automation testing verification of the chart legend.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getLegend",
          "return": "object"
        },
        "getPlotArea": {
          "description": "Returns information for automation testing verification of the chart plot area.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getPlotArea",
          "return": "object"
        },
        "getXAxis": {
          "description": "Returns information for automation testing verification of the chart x axis.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getXAxis",
          "return": "object"
        },
        "getY2Axis": {
          "description": "Returns information for automation testing verification of the chart y2 axis.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getY2Axis",
          "return": "object"
        },
        "getValuesAt": {
          "description": "Returns the x, y, and y2 axis values at the specified X and Y coordinate.",
          "help": "getValuesAt",
          "params": [
            {
              "name": "x",
              "description": "The X coordinate relative to the component.",
              "type": "number"
            },
            {
              "name": "y",
              "description": "The Y coordinate relative to the component.",
              "type": "number"
            }
          ],
          "return": "object"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "getYAxis": {
          "description": "Returns information for automation testing verification of the chart y axis.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getYAxis",
          "return": "object"
        }
      },
      "events": {
        "ojSelectInput": {
          "description": "Triggered during a selection gesture, such as a change in the marquee selection rectangle.",
          "bubbles": true,
          "help": "selectInput",
          "detail": {
            "items": {
              "description": "an array containing the string ids of the selected data items",
              "type": "Array<string>"
            },
            "selectionData": {
              "description": "an array containing objects describing the selected data items",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "the data of the item, if one was specified",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string",
                          "translatable": true
                        },
                        "color": {
                          "description": "The color of the data item.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "\"smallChecker\"|\"smallCrosshatch\"|\"smallDiagonalLeft\"|\"smallDiagonalRight\"|\"smallDiamond\"|\"smallTriangle\"|\"largeChecker\"|\"largeCrosshatch\"|\"largeDiagonalLeft\"|\"largeDiagonalRight\"|\"largeDiamond\"|\"largeTriangle\"|\"auto\"",
                          "value": "\"auto\""
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "\"on\"|\"off\"|\"auto\""
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "\"circle\"|\"diamond\"|\"human\"|\"plus\"|\"square\"|\"star\"|\"triangleDown\"|\"triangleUp\"|\"auto\"|string"
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "\"center\"|\"outsideSlice\"|\"aboveMarker\"|\"belowMarker\"|\"beforeMarker\"|\"afterMarker\"|\"insideBarEdge\"|\"outsideBarEdge\"|\"none\"|\"auto\""
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively.",
                          "type": "object|Array<Object>"
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "\"on\"|\"off\"|\"inherit\"",
                          "value": "\"inherit\""
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems.",
                              "type": "object"
                            }
                          }
                        }
                      }
                    },
                    "itemData": {
                      "description": "the row data of the item, if one was specified. This will only be set if a DataProvider is used.",
                      "type": "object"
                    },
                    "groupData": {
                      "description": "the group data of the item",
                      "type": "Array<Object>",
                      "properties": {
                        "id": {
                          "description": "The id of the group. Defaults to the name if not specified. This is also used to specify the date for non mixed frequency time axes.",
                          "type": "string|number"
                        },
                        "groups": {
                          "description": "An array of nested group objects.",
                          "type": "Array<Object>"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
                          "type": "\"on\"|\"off\"|\"inherit\"",
                          "value": "\"inherit\""
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "name": {
                          "description": "The name of the group.",
                          "type": "string"
                        },
                        "shortDesc": {
                          "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
                          "type": "string",
                          "translatable": true
                        }
                      }
                    },
                    "seriesData": {
                      "description": "the series data of the item",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The id of the series. Defaults to the name or the series index if not specified.",
                          "type": "string|number"
                        },
                        "items": {
                          "description": "An array of values or an array of objects that defines the data items for the series.",
                          "type": "Array<Object>",
                          "properties": {
                            "id": {
                              "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                              "type": "any"
                            },
                            "items": {
                              "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                              "type": "Array<Object>|Array<number>"
                            },
                            "x": {
                              "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                              "type": "number|string"
                            },
                            "y": {
                              "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                              "type": "number"
                            },
                            "z": {
                              "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                              "type": "number"
                            },
                            "low": {
                              "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                              "type": "number"
                            },
                            "high": {
                              "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                              "type": "number"
                            },
                            "open": {
                              "description": "The open value for stock candlestick.",
                              "type": "number"
                            },
                            "close": {
                              "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                              "type": "number"
                            },
                            "volume": {
                              "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                              "type": "number"
                            },
                            "q1": {
                              "description": "The first quartile value for box plot.",
                              "type": "number"
                            },
                            "q2": {
                              "description": "The second quartile (median) value for box plot.",
                              "type": "number"
                            },
                            "q3": {
                              "description": "The third quartile value for box plot.",
                              "type": "number"
                            },
                            "shortDesc": {
                              "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                              "type": "string",
                              "translatable": true
                            },
                            "color": {
                              "description": "The color of the data item.",
                              "type": "string",
                              "format": "color"
                            },
                            "borderColor": {
                              "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                              "type": "string",
                              "format": "color"
                            },
                            "borderWidth": {
                              "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "pattern": {
                              "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                              "type": "\"smallChecker\"|\"smallCrosshatch\"|\"smallDiagonalLeft\"|\"smallDiagonalRight\"|\"smallDiamond\"|\"smallTriangle\"|\"largeChecker\"|\"largeCrosshatch\"|\"largeDiagonalLeft\"|\"largeDiagonalRight\"|\"largeDiamond\"|\"largeTriangle\"|\"auto\"",
                              "value": "\"auto\""
                            },
                            "svgClassName": {
                              "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "markerDisplayed": {
                              "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                              "type": "\"on\"|\"off\"|\"auto\""
                            },
                            "markerShape": {
                              "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                              "type": "\"circle\"|\"diamond\"|\"human\"|\"plus\"|\"square\"|\"star\"|\"triangleDown\"|\"triangleUp\"|\"auto\"|string"
                            },
                            "markerSize": {
                              "description": "The size of the data markers. Does not apply to bubble charts, which calculate marker size based on the z values.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "source": {
                              "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                              "type": "string"
                            },
                            "sourceHover": {
                              "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                              "type": "string"
                            },
                            "sourceSelected": {
                              "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                              "type": "string"
                            },
                            "sourceHoverSelected": {
                              "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                              "type": "string"
                            },
                            "label": {
                              "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                              "type": "string|Array<string>",
                              "translatable": true
                            },
                            "labelPosition": {
                              "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                              "type": "\"center\"|\"outsideSlice\"|\"aboveMarker\"|\"belowMarker\"|\"beforeMarker\"|\"afterMarker\"|\"insideBarEdge\"|\"outsideBarEdge\"|\"none\"|\"auto\""
                            },
                            "labelStyle": {
                              "description": "The CSS style object defining the style of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively.",
                              "type": "object|Array<Object>"
                            },
                            "categories": {
                              "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                              "type": "Array<string>"
                            },
                            "value": {
                              "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                              "type": "number"
                            },
                            "targetValue": {
                              "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                              "type": "number"
                            },
                            "drilling": {
                              "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                              "type": "\"on\"|\"off\"|\"inherit\"",
                              "value": "\"inherit\""
                            },
                            "boxPlot": {
                              "description": "An object containing the style properties of the box plot item.",
                              "type": "object",
                              "properties": {
                                "medianSvgClassName": {
                                  "description": "The CSS style class to apply to the median line.",
                                  "type": "string"
                                },
                                "medianSvgStyle": {
                                  "description": "The CSS inline style to apply to the median line.",
                                  "type": "object"
                                },
                                "q2Color": {
                                  "description": "The color of the Q2 segment of the box.",
                                  "type": "string",
                                  "format": "color"
                                },
                                "q2SvgClassName": {
                                  "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                                  "type": "string"
                                },
                                "q2SvgStyle": {
                                  "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                                  "type": "object"
                                },
                                "q3Color": {
                                  "description": "The color of the Q3 segment of the box.",
                                  "type": "string",
                                  "format": "color"
                                },
                                "q3SvgClassName": {
                                  "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                                  "type": "string"
                                },
                                "q3SvgStyle": {
                                  "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                                  "type": "object"
                                },
                                "whiskerEndLength": {
                                  "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                                  "type": "string"
                                },
                                "whiskerEndSvgClassName": {
                                  "description": "The CSS style class to apply to the whisker ends.",
                                  "type": "string"
                                },
                                "whiskerEndSvgStyle": {
                                  "description": "The CSS inline style to apply to the whisker ends.",
                                  "type": "object"
                                },
                                "whiskerSvgClassName": {
                                  "description": "The CSS style class to apply to the whisker stems.",
                                  "type": "string"
                                },
                                "whiskerSvgStyle": {
                                  "description": "The CSS inline style to apply to the whisker stems.",
                                  "type": "object"
                                }
                              }
                            }
                          }
                        },
                        "areaColor": {
                          "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
                          "type": "string",
                          "format": "color"
                        },
                        "areaSvgClassName": {
                          "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "areaSvgStyle": {
                          "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "assignedToY2": {
                          "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
                          "type": "\"on\"|\"off\"",
                          "value": "\"off\""
                        },
                        "borderColor": {
                          "description": "The border color of the series.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the series.",
                          "type": "number",
                          "minimum": 0,
                          "units": "pixels"
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot series.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems.",
                              "type": "object"
                            }
                          }
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
                          "type": "Array<string>"
                        },
                        "color": {
                          "description": "The color of the series.",
                          "type": "string",
                          "format": "color"
                        },
                        "displayInLegend": {
                          "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                          "type": "\"on\"|\"off\"|\"auto\"",
                          "value": "\"auto\""
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
                          "type": "\"on\"|\"off\"|\"inherit\"",
                          "value": "\"inherit\""
                        },
                        "lineStyle": {
                          "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                          "type": "\"dotted\"|\"dashed\"|\"solid\"",
                          "value": "\"solid\""
                        },
                        "lineType": {
                          "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                          "type": "\"straight\"|\"curved\"|\"stepped\"|\"centeredStepped\"|\"segmented\"|\"centeredSegmented\"|\"none\"|\"auto\"",
                          "value": "\"auto\""
                        },
                        "lineWidth": {
                          "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                          "type": "number",
                          "minimum": 0,
                          "units": "pixels"
                        },
                        "markerColor": {
                          "description": "The color of the data markers, if different from the series color.",
                          "type": "string",
                          "format": "color"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                          "type": "\"on\"|\"off\"|\"auto\"",
                          "value": "\"auto\""
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "\"auto\"|\"square\"|\"circle\"|\"diamond\"|\"plus\"|\"triangleDown\"|\"triangleUp\"|\"human\"|\"star\"|string",
                          "value": "auto"
                        },
                        "markerSize": {
                          "description": "The size of the data markers.",
                          "type": "number",
                          "minimum": 0,
                          "units": "pixels"
                        },
                        "markerSvgClassName": {
                          "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "markerSvgStyle": {
                          "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "name": {
                          "description": "The name of the series, displayed in the legend and tooltips.",
                          "type": "string"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "\"smallChecker\"|\"smallCrosshatch\"|\"smallDiagonalLeft\"|\"smallDiagonalRight\"|\"smallDiamond\"|\"smallTriangle\"|\"largeChecker\"|\"largeCrosshatch\"|\"largeDiagonalLeft\"|\"largeDiagonalRight\"|\"largeDiamond\"|\"largeTriangle\"|\"auto\"",
                          "value": "\"auto\""
                        },
                        "pieSliceExplode": {
                          "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
                          "type": "number",
                          "value": 0,
                          "maximum": 1,
                          "minimum": 0
                        },
                        "shortDesc": {
                          "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
                          "type": "string",
                          "translatable": true
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "stackCategory": {
                          "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "type": {
                          "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
                          "type": "\"bar\"|\"line\"|\"area\"|\"lineWithArea\"|\"candlestick\"|\"boxPlot\"|\"auto\"",
                          "value": "\"auto\""
                        }
                      }
                    }
                  }
                }
              }
            },
            "endGroup": {
              "description": "the end group of a marquee selection on a chart with categorical axis",
              "type": "string"
            },
            "startGroup": {
              "description": "the start group of a marquee selection on a chart with categorical axis",
              "type": "string"
            },
            "xMax": {
              "description": "the maximum x value of a marquee selection",
              "type": "number"
            },
            "xMin": {
              "description": "the minimum x value of a marquee selection",
              "type": "number"
            },
            "yMax": {
              "description": "the maximum y value of a marquee selection",
              "type": "number"
            },
            "yMin": {
              "description": "the minimum y value of a marquee selection",
              "type": "number"
            }
          }
        },
        "ojViewportChange": {
          "description": "Triggered after the viewport is changed due to a zoom or scroll operation.",
          "bubbles": true,
          "help": "viewportChange",
          "detail": {
            "endGroup": {
              "description": "the end group of the new viewport on a chart with categorical axis",
              "type": "string"
            },
            "startGroup": {
              "description": "the start group of the new viewport on a chart with categorical axis",
              "type": "string"
            },
            "xMax": {
              "description": "the maximum x value of the new viewport",
              "type": "number"
            },
            "xMin": {
              "description": "the minimum x value of the new viewport",
              "type": "number"
            },
            "yMax": {
              "description": "the maximum y value of the new viewport",
              "type": "number"
            },
            "yMin": {
              "description": "the minimum y value of the new viewport",
              "type": "number"
            }
          }
        },
        "ojViewportChangeInput": {
          "description": "Triggered during a viewport change gesture, such as a drag operation on the overview window. See the Help documentation for more information.",
          "bubbles": true,
          "help": "viewportChangeInput",
          "detail": {
            "endGroup": {
              "description": "the end group of the new viewport on a chart with categorical axis",
              "type": "string"
            },
            "startGroup": {
              "description": "the start group of the new viewport on a chart with categorical axis",
              "type": "string"
            },
            "xMax": {
              "description": "the maximum x value of the new viewport",
              "type": "number"
            },
            "xMin": {
              "description": "the minimum x value of the new viewport",
              "type": "number"
            },
            "yMax": {
              "description": "the maximum y value of the new viewport",
              "type": "number"
            },
            "yMin": {
              "description": "the minimum y value of the new viewport",
              "type": "number"
            }
          }
        },
        "ojDrill": {
          "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise).",
          "bubbles": true,
          "help": "drill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "string"
            },
            "series": {
              "description": "the series id of the drilled object, if applicable",
              "type": "string"
            },
            "group": {
              "description": "the group id of the drilled object, if applicable",
              "type": "string"
            },
            "data": {
              "description": "the data object of the drilled item",
              "type": "object|null",
              "properties": {
                "id": {
                  "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                  "type": "any"
                },
                "items": {
                  "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                  "type": "Array<Object>|Array<number>"
                },
                "x": {
                  "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                  "type": "number|string"
                },
                "y": {
                  "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                  "type": "number"
                },
                "z": {
                  "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                  "type": "number"
                },
                "low": {
                  "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "high": {
                  "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "open": {
                  "description": "The open value for stock candlestick.",
                  "type": "number"
                },
                "close": {
                  "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                  "type": "number"
                },
                "volume": {
                  "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                  "type": "number"
                },
                "q1": {
                  "description": "The first quartile value for box plot.",
                  "type": "number"
                },
                "q2": {
                  "description": "The second quartile (median) value for box plot.",
                  "type": "number"
                },
                "q3": {
                  "description": "The third quartile value for box plot.",
                  "type": "number"
                },
                "shortDesc": {
                  "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string",
                  "translatable": true
                },
                "color": {
                  "description": "The color of the data item.",
                  "type": "string",
                  "format": "color"
                },
                "borderColor": {
                  "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "number",
                  "units": "pixels"
                },
                "pattern": {
                  "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "\"smallChecker\"|\"smallCrosshatch\"|\"smallDiagonalLeft\"|\"smallDiagonalRight\"|\"smallDiamond\"|\"smallTriangle\"|\"largeChecker\"|\"largeCrosshatch\"|\"largeDiagonalLeft\"|\"largeDiagonalRight\"|\"largeDiamond\"|\"largeTriangle\"|\"auto\"",
                  "value": "\"auto\""
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                  "type": "object"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                  "type": "\"on\"|\"off\"|\"auto\""
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "\"circle\"|\"diamond\"|\"human\"|\"plus\"|\"square\"|\"star\"|\"triangleDown\"|\"triangleUp\"|\"auto\"|string"
                },
                "markerSize": {
                  "description": "The size of the data markers. Does not apply to bubble charts, which calculate marker size based on the z values.",
                  "type": "number",
                  "units": "pixels"
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "label": {
                  "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                  "type": "string|Array<string>",
                  "translatable": true
                },
                "labelPosition": {
                  "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                  "type": "\"center\"|\"outsideSlice\"|\"aboveMarker\"|\"belowMarker\"|\"beforeMarker\"|\"afterMarker\"|\"insideBarEdge\"|\"outsideBarEdge\"|\"none\"|\"auto\""
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively.",
                  "type": "object|Array<Object>"
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                  "type": "Array<string>"
                },
                "value": {
                  "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                  "type": "number"
                },
                "targetValue": {
                  "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                  "type": "number"
                },
                "drilling": {
                  "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                  "type": "\"on\"|\"off\"|\"inherit\"",
                  "value": "\"inherit\""
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot item.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems.",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "itemData": {
              "description": "the row data object of the drilled item. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "seriesData": {
              "description": "the data for the series of the drilled object",
              "type": "object|null",
              "properties": {
                "id": {
                  "description": "The id of the series. Defaults to the name or the series index if not specified.",
                  "type": "string|number"
                },
                "items": {
                  "description": "An array of values or an array of objects that defines the data items for the series.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string",
                          "translatable": true
                        },
                        "color": {
                          "description": "The color of the data item.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "\"smallChecker\"|\"smallCrosshatch\"|\"smallDiagonalLeft\"|\"smallDiagonalRight\"|\"smallDiamond\"|\"smallTriangle\"|\"largeChecker\"|\"largeCrosshatch\"|\"largeDiagonalLeft\"|\"largeDiagonalRight\"|\"largeDiamond\"|\"largeTriangle\"|\"auto\"",
                          "value": "\"auto\""
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "\"on\"|\"off\"|\"auto\""
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "\"circle\"|\"diamond\"|\"human\"|\"plus\"|\"square\"|\"star\"|\"triangleDown\"|\"triangleUp\"|\"auto\"|string"
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "\"center\"|\"outsideSlice\"|\"aboveMarker\"|\"belowMarker\"|\"beforeMarker\"|\"afterMarker\"|\"insideBarEdge\"|\"outsideBarEdge\"|\"none\"|\"auto\""
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively.",
                          "type": "object|Array<Object>"
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "\"on\"|\"off\"|\"inherit\"",
                          "value": "\"inherit\""
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems.",
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "areaColor": {
                  "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
                  "type": "string",
                  "format": "color"
                },
                "areaSvgClassName": {
                  "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "string"
                },
                "areaSvgStyle": {
                  "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "object"
                },
                "assignedToY2": {
                  "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
                  "type": "\"on\"|\"off\"",
                  "value": "\"off\""
                },
                "borderColor": {
                  "description": "The border color of the series.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot series.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems.",
                      "type": "object"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The color of the series.",
                  "type": "string",
                  "format": "color"
                },
                "displayInLegend": {
                  "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                  "type": "\"on\"|\"off\"|\"auto\"",
                  "value": "\"auto\""
                },
                "drilling": {
                  "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
                  "type": "\"on\"|\"off\"|\"inherit\"",
                  "value": "\"inherit\""
                },
                "lineStyle": {
                  "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "\"dotted\"|\"dashed\"|\"solid\"",
                  "value": "\"solid\""
                },
                "lineType": {
                  "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "\"straight\"|\"curved\"|\"stepped\"|\"centeredStepped\"|\"segmented\"|\"centeredSegmented\"|\"none\"|\"auto\"",
                  "value": "\"auto\""
                },
                "lineWidth": {
                  "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerColor": {
                  "description": "The color of the data markers, if different from the series color.",
                  "type": "string",
                  "format": "color"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "\"on\"|\"off\"|\"auto\"",
                  "value": "\"auto\""
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "\"auto\"|\"square\"|\"circle\"|\"diamond\"|\"plus\"|\"triangleDown\"|\"triangleUp\"|\"human\"|\"star\"|string",
                  "value": "auto"
                },
                "markerSize": {
                  "description": "The size of the data markers.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerSvgClassName": {
                  "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
                  "type": "string"
                },
                "markerSvgStyle": {
                  "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
                  "type": "object"
                },
                "name": {
                  "description": "The name of the series, displayed in the legend and tooltips.",
                  "type": "string"
                },
                "pattern": {
                  "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "\"smallChecker\"|\"smallCrosshatch\"|\"smallDiagonalLeft\"|\"smallDiagonalRight\"|\"smallDiamond\"|\"smallTriangle\"|\"largeChecker\"|\"largeCrosshatch\"|\"largeDiagonalLeft\"|\"largeDiagonalRight\"|\"largeDiamond\"|\"largeTriangle\"|\"auto\"",
                  "value": "\"auto\""
                },
                "pieSliceExplode": {
                  "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
                  "type": "number",
                  "value": 0,
                  "maximum": 1,
                  "minimum": 0
                },
                "shortDesc": {
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
                  "type": "string",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "stackCategory": {
                  "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
                  "type": "object"
                },
                "type": {
                  "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
                  "type": "\"bar\"|\"line\"|\"area\"|\"lineWithArea\"|\"candlestick\"|\"boxPlot\"|\"auto\"",
                  "value": "\"auto\""
                }
              }
            },
            "groupData": {
              "description": "an array of data for the group the drilled object belongs to. For hierarchical groups, it will be an array of outermost to innermost group data related to the drilled object",
              "type": "Array<Object>|null",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "description": "The id of the group. Defaults to the name if not specified. This is also used to specify the date for non mixed frequency time axes.",
                      "type": "string|number"
                    },
                    "groups": {
                      "description": "An array of nested group objects.",
                      "type": "Array<Object>"
                    },
                    "drilling": {
                      "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
                      "type": "\"on\"|\"off\"|\"inherit\"",
                      "value": "\"inherit\""
                    },
                    "labelStyle": {
                      "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "name": {
                      "description": "The name of the group.",
                      "type": "string"
                    },
                    "shortDesc": {
                      "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
                      "type": "string",
                      "translatable": true
                    }
                  }
                }
              }
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "groupTemplate": {
          "description": "The groupTemplate slot is used to specify the template for generating the group properties of the chart. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "groupTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-chart> custom element",
              "type": "Element"
            },
            "index": {
              "description": "The group index",
              "type": "number"
            },
            "ids": {
              "description": "An array of group IDs, from the outermost group to the current group. For non-hierarchical group, the array will contain only one id.",
              "type": "Array<string>"
            },
            "depth": {
              "description": "The depth of the group. The depth of the outermost group under the invisible root is 1.",
              "type": "number"
            },
            "leaf": {
              "description": "True if the group is a leaf group.",
              "type": "boolean"
            },
            "items": {
              "description": "The array of objects which are chart items that belong to this group. The objects will have the following properties:",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object for the item",
                      "type": "object"
                    },
                    "index": {
                      "description": "The zero-based index of the item",
                      "type": "number"
                    },
                    "key": {
                      "description": "The key of the current item",
                      "type": "any"
                    }
                  }
                }
              }
            }
          }
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the chart. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-chart> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current item",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent item",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item",
              "type": "any"
            }
          }
        },
        "pieCenterTemplate": {
          "description": "The pieCenterTemplate slot is used to specify custom center content for a pie chart. This slot takes precedence over the pieCenter.renderer property if specified. See the Help documentation for more information.",
          "help": "pieCenterTemplate",
          "data": {
            "outerBounds": {
              "description": "Object containing (x, y, width, height) of the rectangle circumscribing the center area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate of the rectangle circumscribing the center area, relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate of the rectangle circumscribing the center area, relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the rectangle circumscribing the center area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the rectangle circumscribing the center area.",
                  "type": "number"
                }
              }
            },
            "innerBounds": {
              "description": "Object containing (x, y, width, height) of the rectangle inscribed in the center area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate of the rectangle inscribed in the center area, relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate of the rectangle inscribed in the center area, relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the rectangle inscribed in the center area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the rectangle inscribed in the center area.",
                  "type": "number"
                }
              }
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object"
            },
            "label": {
              "description": "The pieCenter label.",
              "type": "string"
            },
            "totalValue": {
              "description": "The total of all values in the pie chart.",
              "type": "number"
            },
            "componentElement": {
              "description": "The chart element.",
              "type": "Element"
            }
          }
        },
        "seriesTemplate": {
          "description": "The seriesTemplate slot is used to specify the template for generating the series properties of the chart. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "seriesTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-chart> custom element",
              "type": "Element"
            },
            "index": {
              "description": "The series index",
              "type": "number"
            },
            "id": {
              "description": "The series id",
              "type": "string"
            },
            "items": {
              "description": "The array of objects which are chart items that belong to this series. The objects will have the following properties",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object for the item",
                      "type": "object"
                    },
                    "index": {
                      "description": "The zero-based index of the item",
                      "type": "number"
                    },
                    "key": {
                      "description": "The key of the current item",
                      "type": "any"
                    }
                  }
                }
              }
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. This can be used to change the tooltip border or background color.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered item.",
              "type": "any"
            },
            "series": {
              "description": "The id of the series the hovered item belongs to.",
              "type": "string"
            },
            "group": {
              "description": "The ids or an array of ids of the group(s) the hovered item belongs to. For hierarchical groups, it will be an array of outermost to innermost group ids.",
              "type": "string|Array<string>"
            },
            "label": {
              "description": "The data label of the hovered item.",
              "type": "string"
            },
            "value": {
              "description": "The values of the hovered item.",
              "type": "number"
            },
            "x": {
              "description": "The values of the hovered item.",
              "type": "number|string"
            },
            "y": {
              "description": "The values of the hovered item.",
              "type": "number"
            },
            "z": {
              "description": "The values of the hovered item.",
              "type": "number"
            },
            "low": {
              "description": "The values of the hovered item.",
              "type": "number"
            },
            "high": {
              "description": "The values of the hovered item.",
              "type": "number"
            },
            "open": {
              "description": "The values of the hovered item.",
              "type": "number"
            },
            "close": {
              "description": "The values of the hovered item.",
              "type": "number"
            },
            "volume": {
              "description": "The values of the hovered item.",
              "type": "number"
            },
            "targetValue": {
              "description": "The values of the hovered item.",
              "type": "number"
            },
            "data": {
              "description": "The data object of the hovered item. For nested items, it will be an array containing the parent item data and nested item data.",
              "type": "object|null",
              "properties": {
                "id": {
                  "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                  "type": "any"
                },
                "items": {
                  "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                  "type": "Array<Object>|Array<number>"
                },
                "x": {
                  "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                  "type": "number|string"
                },
                "y": {
                  "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                  "type": "number"
                },
                "z": {
                  "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                  "type": "number"
                },
                "low": {
                  "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "high": {
                  "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "open": {
                  "description": "The open value for stock candlestick.",
                  "type": "number"
                },
                "close": {
                  "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                  "type": "number"
                },
                "volume": {
                  "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                  "type": "number"
                },
                "q1": {
                  "description": "The first quartile value for box plot.",
                  "type": "number"
                },
                "q2": {
                  "description": "The second quartile (median) value for box plot.",
                  "type": "number"
                },
                "q3": {
                  "description": "The third quartile value for box plot.",
                  "type": "number"
                },
                "shortDesc": {
                  "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string",
                  "translatable": true
                },
                "color": {
                  "description": "The color of the data item.",
                  "type": "string",
                  "format": "color"
                },
                "borderColor": {
                  "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "number",
                  "units": "pixels"
                },
                "pattern": {
                  "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "\"smallChecker\"|\"smallCrosshatch\"|\"smallDiagonalLeft\"|\"smallDiagonalRight\"|\"smallDiamond\"|\"smallTriangle\"|\"largeChecker\"|\"largeCrosshatch\"|\"largeDiagonalLeft\"|\"largeDiagonalRight\"|\"largeDiamond\"|\"largeTriangle\"|\"auto\"",
                  "value": "\"auto\""
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                  "type": "object"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                  "type": "\"on\"|\"off\"|\"auto\""
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "\"circle\"|\"diamond\"|\"human\"|\"plus\"|\"square\"|\"star\"|\"triangleDown\"|\"triangleUp\"|\"auto\"|string"
                },
                "markerSize": {
                  "description": "The size of the data markers. Does not apply to bubble charts, which calculate marker size based on the z values.",
                  "type": "number",
                  "units": "pixels"
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "label": {
                  "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                  "type": "string|Array<string>",
                  "translatable": true
                },
                "labelPosition": {
                  "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                  "type": "\"center\"|\"outsideSlice\"|\"aboveMarker\"|\"belowMarker\"|\"beforeMarker\"|\"afterMarker\"|\"insideBarEdge\"|\"outsideBarEdge\"|\"none\"|\"auto\""
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively.",
                  "type": "object|Array<Object>"
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                  "type": "Array<string>"
                },
                "value": {
                  "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                  "type": "number"
                },
                "targetValue": {
                  "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                  "type": "number"
                },
                "drilling": {
                  "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                  "type": "\"on\"|\"off\"|\"inherit\"",
                  "value": "\"inherit\""
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot item.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems.",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "itemData": {
              "description": "The row data object for the hovered item. This will only be set if a DataProvider is being used.",
              "type": "object|null"
            },
            "seriesData": {
              "description": "The data for the series the hovered item belongs to.",
              "type": "object|null",
              "properties": {
                "id": {
                  "description": "The id of the series. Defaults to the name or the series index if not specified.",
                  "type": "string|number"
                },
                "items": {
                  "description": "An array of values or an array of objects that defines the data items for the series.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                          "type": "any"
                        },
                        "items": {
                          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                          "type": "Array<Object>|Array<number>"
                        },
                        "x": {
                          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                          "type": "number|string"
                        },
                        "y": {
                          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                          "type": "number"
                        },
                        "z": {
                          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                          "type": "number"
                        },
                        "low": {
                          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "high": {
                          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                          "type": "number"
                        },
                        "open": {
                          "description": "The open value for stock candlestick.",
                          "type": "number"
                        },
                        "close": {
                          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                          "type": "number"
                        },
                        "volume": {
                          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                          "type": "number"
                        },
                        "q1": {
                          "description": "The first quartile value for box plot.",
                          "type": "number"
                        },
                        "q2": {
                          "description": "The second quartile (median) value for box plot.",
                          "type": "number"
                        },
                        "q3": {
                          "description": "The third quartile value for box plot.",
                          "type": "number"
                        },
                        "shortDesc": {
                          "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                          "type": "string",
                          "translatable": true
                        },
                        "color": {
                          "description": "The color of the data item.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderColor": {
                          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "string",
                          "format": "color"
                        },
                        "borderWidth": {
                          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "pattern": {
                          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                          "type": "\"smallChecker\"|\"smallCrosshatch\"|\"smallDiagonalLeft\"|\"smallDiagonalRight\"|\"smallDiamond\"|\"smallTriangle\"|\"largeChecker\"|\"largeCrosshatch\"|\"largeDiagonalLeft\"|\"largeDiagonalRight\"|\"largeDiamond\"|\"largeTriangle\"|\"auto\"",
                          "value": "\"auto\""
                        },
                        "svgClassName": {
                          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                          "type": "object"
                        },
                        "markerDisplayed": {
                          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                          "type": "\"on\"|\"off\"|\"auto\""
                        },
                        "markerShape": {
                          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                          "type": "\"circle\"|\"diamond\"|\"human\"|\"plus\"|\"square\"|\"star\"|\"triangleDown\"|\"triangleUp\"|\"auto\"|string"
                        },
                        "markerSize": {
                          "description": "The size of the data markers. Does not apply to bubble charts, which calculate marker size based on the z values.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "source": {
                          "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                          "type": "string"
                        },
                        "sourceHover": {
                          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceSelected": {
                          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "sourceHoverSelected": {
                          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                          "type": "string"
                        },
                        "label": {
                          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                          "type": "string|Array<string>",
                          "translatable": true
                        },
                        "labelPosition": {
                          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                          "type": "\"center\"|\"outsideSlice\"|\"aboveMarker\"|\"belowMarker\"|\"beforeMarker\"|\"afterMarker\"|\"insideBarEdge\"|\"outsideBarEdge\"|\"none\"|\"auto\""
                        },
                        "labelStyle": {
                          "description": "The CSS style object defining the style of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively.",
                          "type": "object|Array<Object>"
                        },
                        "categories": {
                          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                          "type": "Array<string>"
                        },
                        "value": {
                          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                          "type": "number"
                        },
                        "targetValue": {
                          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                          "type": "number"
                        },
                        "drilling": {
                          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                          "type": "\"on\"|\"off\"|\"inherit\"",
                          "value": "\"inherit\""
                        },
                        "boxPlot": {
                          "description": "An object containing the style properties of the box plot item.",
                          "type": "object",
                          "properties": {
                            "medianSvgClassName": {
                              "description": "The CSS style class to apply to the median line.",
                              "type": "string"
                            },
                            "medianSvgStyle": {
                              "description": "The CSS inline style to apply to the median line.",
                              "type": "object"
                            },
                            "q2Color": {
                              "description": "The color of the Q2 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q2SvgClassName": {
                              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q2SvgStyle": {
                              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "q3Color": {
                              "description": "The color of the Q3 segment of the box.",
                              "type": "string",
                              "format": "color"
                            },
                            "q3SvgClassName": {
                              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "q3SvgStyle": {
                              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                              "type": "object"
                            },
                            "whiskerEndLength": {
                              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                              "type": "string"
                            },
                            "whiskerEndSvgClassName": {
                              "description": "The CSS style class to apply to the whisker ends.",
                              "type": "string"
                            },
                            "whiskerEndSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker ends.",
                              "type": "object"
                            },
                            "whiskerSvgClassName": {
                              "description": "The CSS style class to apply to the whisker stems.",
                              "type": "string"
                            },
                            "whiskerSvgStyle": {
                              "description": "The CSS inline style to apply to the whisker stems.",
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "areaColor": {
                  "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
                  "type": "string",
                  "format": "color"
                },
                "areaSvgClassName": {
                  "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "string"
                },
                "areaSvgStyle": {
                  "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
                  "type": "object"
                },
                "assignedToY2": {
                  "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
                  "type": "\"on\"|\"off\"",
                  "value": "\"off\""
                },
                "borderColor": {
                  "description": "The border color of the series.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot series.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems.",
                      "type": "object"
                    }
                  }
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The color of the series.",
                  "type": "string",
                  "format": "color"
                },
                "displayInLegend": {
                  "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
                  "type": "\"on\"|\"off\"|\"auto\"",
                  "value": "\"auto\""
                },
                "drilling": {
                  "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
                  "type": "\"on\"|\"off\"|\"inherit\"",
                  "value": "\"inherit\""
                },
                "lineStyle": {
                  "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "\"dotted\"|\"dashed\"|\"solid\"",
                  "value": "\"solid\""
                },
                "lineType": {
                  "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "\"straight\"|\"curved\"|\"stepped\"|\"centeredStepped\"|\"segmented\"|\"centeredSegmented\"|\"none\"|\"auto\"",
                  "value": "\"auto\""
                },
                "lineWidth": {
                  "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerColor": {
                  "description": "The color of the data markers, if different from the series color.",
                  "type": "string",
                  "format": "color"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
                  "type": "\"on\"|\"off\"|\"auto\"",
                  "value": "\"auto\""
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "\"auto\"|\"square\"|\"circle\"|\"diamond\"|\"plus\"|\"triangleDown\"|\"triangleUp\"|\"human\"|\"star\"|string",
                  "value": "auto"
                },
                "markerSize": {
                  "description": "The size of the data markers.",
                  "type": "number",
                  "minimum": 0,
                  "units": "pixels"
                },
                "markerSvgClassName": {
                  "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
                  "type": "string"
                },
                "markerSvgStyle": {
                  "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
                  "type": "object"
                },
                "name": {
                  "description": "The name of the series, displayed in the legend and tooltips.",
                  "type": "string"
                },
                "pattern": {
                  "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "\"smallChecker\"|\"smallCrosshatch\"|\"smallDiagonalLeft\"|\"smallDiagonalRight\"|\"smallDiamond\"|\"smallTriangle\"|\"largeChecker\"|\"largeCrosshatch\"|\"largeDiagonalLeft\"|\"largeDiagonalRight\"|\"largeDiamond\"|\"largeTriangle\"|\"auto\"",
                  "value": "\"auto\""
                },
                "pieSliceExplode": {
                  "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
                  "type": "number",
                  "value": 0,
                  "maximum": 1,
                  "minimum": 0
                },
                "shortDesc": {
                  "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
                  "type": "string",
                  "translatable": true
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "stackCategory": {
                  "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
                  "type": "object"
                },
                "type": {
                  "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
                  "type": "\"bar\"|\"line\"|\"area\"|\"lineWithArea\"|\"candlestick\"|\"boxPlot\"|\"auto\"",
                  "value": "\"auto\""
                }
              }
            },
            "groupData": {
              "description": "An array of data for the group the hovered item belongs to. For hierarchical groups, it will be an array of outermost to innermost group data related to the hovered item.",
              "type": "Array<Object>|null",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "id": {
                      "description": "The id of the group. Defaults to the name if not specified. This is also used to specify the date for non mixed frequency time axes.",
                      "type": "string|number"
                    },
                    "groups": {
                      "description": "An array of nested group objects.",
                      "type": "Array<Object>"
                    },
                    "drilling": {
                      "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
                      "type": "\"on\"|\"off\"|\"inherit\"",
                      "value": "\"inherit\""
                    },
                    "labelStyle": {
                      "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "name": {
                      "description": "The name of the group.",
                      "type": "string"
                    },
                    "shortDesc": {
                      "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
                      "type": "string",
                      "translatable": true
                    }
                  }
                }
              }
            },
            "componentElement": {
              "description": "The chart element.",
              "type": "Element"
            },
            "color": {
              "description": "The color of the hovered item.",
              "type": "string"
            }
          }
        }
      }
    },
    "oj-chart-group": {
      "name": "oj-chart-group",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Chart Group",
      "type": "core",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart"
        }
      },
      "description": "ojChartGroup",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojChartGroup.html",
      "properties": {
        "drilling": {
          "description": "Whether drilling is enabled on the group label. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the group label text. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Label Style",
          "help": "labelStyle"
        },
        "name": {
          "description": "The name of the group.",
          "type": "string",
          "displayName": "Name",
          "help": "name"
        },
        "shortDesc": {
          "description": "The description of the group. This is used for customizing the tooltip text and only applies to a categorical axis.",
          "type": "string",
          "displayName": "Short Desc",
          "translatable": true,
          "help": "shortDesc"
        }
      }
    },
    "oj-chart-item": {
      "name": "oj-chart-item",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Chart Item",
      "type": "core",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart"
        }
      },
      "description": "ojChartItem",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojChartItem.html",
      "properties": {
        "borderColor": {
          "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "borderColor"
        },
        "borderWidth": {
          "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
          "type": "number",
          "displayName": "Border Width",
          "units": "pixels",
          "help": "borderWidth"
        },
        "boxPlot": {
          "description": "An object containing the style properties of the box plot item.",
          "type": "object",
          "displayName": "Box Plot",
          "help": "boxPlot",
          "properties": {
            "medianSvgClassName": {
              "description": "The CSS style class to apply to the median line.",
              "type": "string"
            },
            "medianSvgStyle": {
              "description": "The CSS inline style to apply to the median line.",
              "type": "object"
            },
            "q2Color": {
              "description": "The color of the Q2 segment of the box.",
              "type": "string",
              "format": "color"
            },
            "q2SvgClassName": {
              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
              "type": "string"
            },
            "q2SvgStyle": {
              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
              "type": "object"
            },
            "q3Color": {
              "description": "The color of the Q3 segment of the box.",
              "type": "string",
              "format": "color"
            },
            "q3SvgClassName": {
              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
              "type": "string"
            },
            "q3SvgStyle": {
              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
              "type": "object"
            },
            "whiskerEndLength": {
              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
              "type": "string"
            },
            "whiskerEndSvgClassName": {
              "description": "The CSS style class to apply to the whisker ends.",
              "type": "string"
            },
            "whiskerEndSvgStyle": {
              "description": "The CSS inline style to apply to the whisker ends.",
              "type": "object"
            },
            "whiskerSvgClassName": {
              "description": "The CSS style class to apply to the whisker stems.",
              "type": "string"
            },
            "whiskerSvgStyle": {
              "description": "The CSS inline style to apply to the whisker stems.",
              "type": "object"
            }
          }
        },
        "categories": {
          "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
          "type": "Array<string>",
          "displayName": "Categories",
          "help": "categories"
        },
        "close": {
          "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
          "type": "number",
          "displayName": "Close",
          "help": "close"
        },
        "color": {
          "description": "The color of the data item.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "color"
        },
        "drilling": {
          "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "groupId": {
          "description": "The array of id(s) for the group(s) the item belongs to. For hierarchical groups, it will be an array of outermost to innermost group ids. This is also used to specify the date for non mixed frequency time axes.",
          "type": "Array<(string|number)>",
          "displayName": "Group Id",
          "required": true,
          "help": "groupId"
        },
        "high": {
          "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
          "type": "number",
          "displayName": "High",
          "help": "high"
        },
        "items": {
          "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
          "type": "Array<Object>|Array<number>",
          "displayName": "Items",
          "help": "items",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The id of the chart item. This id will be provided as part of the context for events on the chart.",
                  "type": "any"
                },
                "items": {
                  "description": "An array of nested data items to be used for defining the markers for outliers or additional data items of a box plot.",
                  "type": "Array<Object>|Array<number>"
                },
                "x": {
                  "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
                  "type": "number|string"
                },
                "y": {
                  "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
                  "type": "number"
                },
                "z": {
                  "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
                  "type": "number"
                },
                "low": {
                  "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "high": {
                  "description": "The high value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
                  "type": "number"
                },
                "open": {
                  "description": "The open value for stock candlestick.",
                  "type": "number"
                },
                "close": {
                  "description": "The close value for stock candlestick. When bar, line, or area series type are used on a stock chart, this value is displayed.",
                  "type": "number"
                },
                "volume": {
                  "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
                  "type": "number"
                },
                "q1": {
                  "description": "The first quartile value for box plot.",
                  "type": "number"
                },
                "q2": {
                  "description": "The second quartile (median) value for box plot.",
                  "type": "number"
                },
                "q3": {
                  "description": "The third quartile value for box plot.",
                  "type": "number"
                },
                "shortDesc": {
                  "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string",
                  "translatable": true
                },
                "color": {
                  "description": "The color of the data item.",
                  "type": "string",
                  "format": "color"
                },
                "borderColor": {
                  "description": "The border color of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "string",
                  "format": "color"
                },
                "borderWidth": {
                  "description": "The border width of the data item. For funnel and pyramid charts, it is used for the slice border.",
                  "type": "number",
                  "units": "pixels"
                },
                "pattern": {
                  "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ]
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
                  "type": "object"
                },
                "markerDisplayed": {
                  "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
                  "type": "string",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                },
                "markerShape": {
                  "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
                  "type": "string",
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "displayName": "Diamond"
                    },
                    "human": {
                      "displayName": "Human"
                    },
                    "plus": {
                      "displayName": "Plus"
                    },
                    "square": {
                      "displayName": "Square"
                    },
                    "star": {
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers. Does not apply to bubble charts, which calculate marker size based on the z values.",
                  "type": "number",
                  "units": "pixels"
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "label": {
                  "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
                  "type": "string|Array<string>",
                  "translatable": true
                },
                "labelPosition": {
                  "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
                  "type": "string",
                  "enumValues": [
                    "aboveMarker",
                    "afterMarker",
                    "auto",
                    "beforeMarker",
                    "belowMarker",
                    "center",
                    "insideBarEdge",
                    "none",
                    "outsideBarEdge",
                    "outsideSlice"
                  ]
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively.",
                  "type": "object|Array<Object>"
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend or other visualization elements. If not defined, series categories are used.",
                  "type": "Array<string>"
                },
                "value": {
                  "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
                  "type": "number"
                },
                "targetValue": {
                  "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
                  "type": "number"
                },
                "drilling": {
                  "description": "Whether drilling is enabled for the data item. See the Help documentation for more information.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "boxPlot": {
                  "description": "An object containing the style properties of the box plot item.",
                  "type": "object",
                  "properties": {
                    "medianSvgClassName": {
                      "description": "The CSS style class to apply to the median line.",
                      "type": "string"
                    },
                    "medianSvgStyle": {
                      "description": "The CSS inline style to apply to the median line.",
                      "type": "object"
                    },
                    "q2Color": {
                      "description": "The color of the Q2 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q2SvgClassName": {
                      "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q2SvgStyle": {
                      "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "q3Color": {
                      "description": "The color of the Q3 segment of the box.",
                      "type": "string",
                      "format": "color"
                    },
                    "q3SvgClassName": {
                      "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "q3SvgStyle": {
                      "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
                      "type": "object"
                    },
                    "whiskerEndLength": {
                      "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
                      "type": "string"
                    },
                    "whiskerEndSvgClassName": {
                      "description": "The CSS style class to apply to the whisker ends.",
                      "type": "string"
                    },
                    "whiskerEndSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker ends.",
                      "type": "object"
                    },
                    "whiskerSvgClassName": {
                      "description": "The CSS style class to apply to the whisker stems.",
                      "type": "string"
                    },
                    "whiskerSvgStyle": {
                      "description": "The CSS inline style to apply to the whisker stems.",
                      "type": "object"
                    }
                  }
                }
              }
            }
          }
        },
        "label": {
          "description": "The label for the data item. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. Not supported for box plot or candlestick.",
          "type": "string|Array<string>",
          "displayName": "Label",
          "translatable": true,
          "help": "label"
        },
        "labelPosition": {
          "description": "The position of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively. See the Help documentation for more information.",
          "type": "string|Array<string>",
          "displayName": "Label Position",
          "help": "labelPosition",
          "enumValues": [
            "aboveMarker",
            "afterMarker",
            "auto",
            "beforeMarker",
            "belowMarker",
            "center",
            "insideBarEdge",
            "none",
            "outsideBarEdge",
            "outsideSlice"
          ],
          "propertyEditorValues": {
            "aboveMarker": {
              "displayName": "Above Marker"
            },
            "afterMarker": {
              "displayName": "After Marker"
            },
            "auto": {
              "displayName": "Auto"
            },
            "beforeMarker": {
              "displayName": "Before Marker"
            },
            "belowMarker": {
              "displayName": "Below Marker"
            },
            "center": {
              "displayName": "Center"
            },
            "insideBarEdge": {
              "displayName": "Inside Bar Edge"
            },
            "none": {
              "displayName": "None"
            },
            "outsideBarEdge": {
              "displayName": "Outside Bar Edge"
            },
            "outsideSlice": {
              "displayName": "Outside Slice"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the data label. For range series, if an array of two values is provided, the first and second value will apply to the low and high point respectively.",
          "type": "object|Array<Object>",
          "displayName": "Label Style",
          "help": "labelStyle"
        },
        "low": {
          "description": "The low value for range bar/area, stock candlestick, or box plot item. Define 'low' and 'high' instead of 'value' or 'y' to create a range bar/area chart.",
          "type": "number",
          "displayName": "Low",
          "help": "low"
        },
        "markerDisplayed": {
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. If auto, the markers will be displayed whenever the data points are not connected by a line.",
          "type": "string",
          "displayName": "Marker Displayed",
          "help": "markerDisplayed",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "markerShape": {
          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Shape",
          "help": "markerShape",
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "plus": {
              "displayName": "Plus"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSize": {
          "description": "The size of the data markers. Does not apply to bubble charts, which calculate marker size based on the z values.",
          "type": "number",
          "displayName": "Marker Size",
          "units": "pixels",
          "help": "markerSize"
        },
        "open": {
          "description": "The open value for stock candlestick.",
          "type": "number",
          "displayName": "Open",
          "help": "open"
        },
        "pattern": {
          "description": "The pattern used to fill the data item. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
          "type": "string",
          "displayName": "Pattern",
          "value": "auto",
          "help": "pattern",
          "enumValues": [
            "auto",
            "largeChecker",
            "largeCrosshatch",
            "largeDiagonalLeft",
            "largeDiagonalRight",
            "largeDiamond",
            "largeTriangle",
            "smallChecker",
            "smallCrosshatch",
            "smallDiagonalLeft",
            "smallDiagonalRight",
            "smallDiamond",
            "smallTriangle"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "largeChecker": {
              "displayName": "Large Checker"
            },
            "largeCrosshatch": {
              "displayName": "Large Crosshatch"
            },
            "largeDiagonalLeft": {
              "displayName": "Large Diagonal Left"
            },
            "largeDiagonalRight": {
              "displayName": "Large Diagonal Right"
            },
            "largeDiamond": {
              "displayName": "Large Diamond"
            },
            "largeTriangle": {
              "displayName": "Large Triangle"
            },
            "smallChecker": {
              "displayName": "Small Checker"
            },
            "smallCrosshatch": {
              "displayName": "Small Crosshatch"
            },
            "smallDiagonalLeft": {
              "displayName": "Small Diagonal Left"
            },
            "smallDiagonalRight": {
              "displayName": "Small Diagonal Right"
            },
            "smallDiamond": {
              "displayName": "Small Diamond"
            },
            "smallTriangle": {
              "displayName": "Small Triangle"
            }
          }
        },
        "q1": {
          "description": "The first quartile value for box plot.",
          "type": "number",
          "displayName": "Q1",
          "help": "q1"
        },
        "q2": {
          "description": "The second quartile (median) value for box plot.",
          "type": "number",
          "displayName": "Q2",
          "help": "q2"
        },
        "q3": {
          "description": "The third quartile value for box plot.",
          "type": "number",
          "displayName": "Q3",
          "help": "q3"
        },
        "seriesId": {
          "description": "The id for the series the item belongs to.",
          "type": "string|number",
          "displayName": "Series Id",
          "required": true,
          "help": "seriesId"
        },
        "shortDesc": {
          "description": "The description of this object. This is used for accessibility and also for customizing the tooltip text.",
          "type": "string",
          "displayName": "Short Desc",
          "translatable": true,
          "help": "shortDesc"
        },
        "source": {
          "description": "The URI of the custom image. If specified, it takes precedence over shape.",
          "type": "string",
          "displayName": "Source",
          "help": "source"
        },
        "sourceHover": {
          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover",
          "help": "sourceHover"
        },
        "sourceHoverSelected": {
          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover Selected",
          "help": "sourceHoverSelected"
        },
        "sourceSelected": {
          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Selected",
          "help": "sourceSelected"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Svg Class Name",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The CSS inline style to apply to the data item. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Svg Style",
          "help": "svgStyle"
        },
        "targetValue": {
          "description": "The target value for a funnel chart. When this is set, the value attribute defines the filled area within the slice and this represents the value of the whole slice.",
          "type": "number",
          "displayName": "Target Value",
          "help": "targetValue"
        },
        "value": {
          "description": "The value for this data item. Corresponding to the y value for bar, line, area, and combo charts and the slice values for pie, funnel and pyramid charts. Null can be specified to skip a data point.",
          "type": "number",
          "displayName": "Value",
          "help": "value"
        },
        "volume": {
          "description": "The value for stock volume bar. When this value is provided, the volume bar is displayed on the y2 axis.",
          "type": "number",
          "displayName": "Volume",
          "help": "volume"
        },
        "x": {
          "description": "The x value. Mainly used for scatter and bubble chart and to specify the date for mixed-frequency time axis. See the Help documentation for more information.",
          "type": "number|string",
          "displayName": "X",
          "help": "x"
        },
        "y": {
          "description": "The y value. Also the primary value for charts without a y-Axis, such as pie charts.",
          "type": "number",
          "displayName": "Y",
          "help": "y"
        },
        "z": {
          "description": "The z value. Defines the bubble radius for a bubble chart, as well as the width of a bar or a box plot item.",
          "type": "number",
          "displayName": "Z",
          "help": "z"
        }
      }
    },
    "oj-chart-series": {
      "name": "oj-chart-series",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Chart Series",
      "type": "core",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart"
        }
      },
      "description": "ojChartSeries",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojChartSeries.html",
      "properties": {
        "areaColor": {
          "description": "The area color of the series. Only applies if series type is area or lineWithArea.",
          "type": "string",
          "displayName": "Area Color",
          "format": "color",
          "help": "areaColor"
        },
        "areaSvgClassName": {
          "description": "The CSS style class to apply if series type is area or lineWithArea. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Area Svg Class Name",
          "help": "areaSvgClassName"
        },
        "areaSvgStyle": {
          "description": "The inline style to apply if series type is area or lineWithArea. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Area Svg Style",
          "help": "areaSvgStyle"
        },
        "assignedToY2": {
          "description": "Defines whether the series is associated with the y2 axis. Only applies to Cartesian bar, line, area, and combo charts.",
          "type": "string",
          "displayName": "Assigned To Y2",
          "value": "off",
          "help": "assignedToY2",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "borderColor": {
          "description": "The border color of the series.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "borderColor"
        },
        "borderWidth": {
          "description": "The border width of the series.",
          "type": "number",
          "displayName": "Border Width",
          "minimum": 0,
          "units": "pixels",
          "help": "borderWidth"
        },
        "boxPlot": {
          "description": "An object containing the style properties of the box plot series.",
          "type": "object",
          "displayName": "Box Plot",
          "help": "boxPlot",
          "properties": {
            "medianSvgClassName": {
              "description": "The CSS style class to apply to the median line.",
              "type": "string"
            },
            "medianSvgStyle": {
              "description": "The CSS inline style to apply to the median line.",
              "type": "object"
            },
            "q2Color": {
              "description": "The color of the Q2 segment of the box.",
              "type": "string",
              "format": "color"
            },
            "q2SvgClassName": {
              "description": "The CSS style class to apply to the Q2 segment of the box. See the Help documentation for more information.",
              "type": "string"
            },
            "q2SvgStyle": {
              "description": "The CSS inline style to apply to the Q2 segment of the box. See the Help documentation for more information.",
              "type": "object"
            },
            "q3Color": {
              "description": "The color of the Q3 segment of the box.",
              "type": "string",
              "format": "color"
            },
            "q3SvgClassName": {
              "description": "The CSS style class to apply to the Q3 segment of the box. See the Help documentation for more information.",
              "type": "string"
            },
            "q3SvgStyle": {
              "description": "The CSS inline style to apply to the Q3 segment of the box. See the Help documentation for more information.",
              "type": "object"
            },
            "whiskerEndLength": {
              "description": "Specifies the length of the whisker ends in pixels (e.g. '9px') or as a percentage of the box width (e.g. '50%').",
              "type": "string"
            },
            "whiskerEndSvgClassName": {
              "description": "The CSS style class to apply to the whisker ends.",
              "type": "string"
            },
            "whiskerEndSvgStyle": {
              "description": "The CSS inline style to apply to the whisker ends.",
              "type": "object"
            },
            "whiskerSvgClassName": {
              "description": "The CSS style class to apply to the whisker stems.",
              "type": "string"
            },
            "whiskerSvgStyle": {
              "description": "The CSS inline style to apply to the whisker stems.",
              "type": "object"
            }
          }
        },
        "categories": {
          "description": "An optional array of category strings corresponding to this series. This allows highlighting and filtering of a series through interactions with legend sections. If not defined, the series id is used.",
          "type": "Array<string>",
          "displayName": "Categories",
          "help": "categories"
        },
        "color": {
          "description": "The color of the series.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "color"
        },
        "displayInLegend": {
          "description": "Defines whether the series should be shown in the legend. When set to 'auto', the series will not be displayed in the legend if it has null data or if it is a stock, funnel, or pyramid series.",
          "type": "string",
          "displayName": "Display In Legend",
          "value": "auto",
          "help": "displayInLegend",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "drilling": {
          "description": "Whether drilling is enabled on the series item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "lineStyle": {
          "description": "The line style of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
          "type": "string",
          "displayName": "Line Style",
          "value": "solid",
          "help": "lineStyle",
          "enumValues": [
            "dashed",
            "dotted",
            "solid"
          ],
          "propertyEditorValues": {
            "dashed": {
              "displayName": "Dashed"
            },
            "dotted": {
              "displayName": "Dotted"
            },
            "solid": {
              "displayName": "Solid"
            }
          }
        },
        "lineType": {
          "description": "The line type of the data line or area. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Line Type",
          "value": "auto",
          "help": "lineType",
          "enumValues": [
            "auto",
            "centeredSegmented",
            "centeredStepped",
            "curved",
            "none",
            "segmented",
            "stepped",
            "straight"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "centeredSegmented": {
              "displayName": "Centered Segmented"
            },
            "centeredStepped": {
              "displayName": "Centered Stepped"
            },
            "curved": {
              "displayName": "Curved"
            },
            "none": {
              "displayName": "None"
            },
            "segmented": {
              "displayName": "Segmented"
            },
            "stepped": {
              "displayName": "Stepped"
            },
            "straight": {
              "displayName": "Straight"
            }
          }
        },
        "lineWidth": {
          "description": "The width of the data line. Only applies to line, lineWithArea, scatter, and bubble series.",
          "type": "number",
          "displayName": "Line Width",
          "minimum": 0,
          "units": "pixels",
          "help": "lineWidth"
        },
        "markerColor": {
          "description": "The color of the data markers, if different from the series color.",
          "type": "string",
          "displayName": "Marker Color",
          "format": "color",
          "help": "markerColor"
        },
        "markerDisplayed": {
          "description": "Defines whether the data marker is displayed. Only applies to line, area, scatter, and bubble series. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Displayed",
          "value": "auto",
          "help": "markerDisplayed",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "markerShape": {
          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Shape",
          "value": "auto",
          "help": "markerShape",
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "plus": {
              "displayName": "Plus"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSize": {
          "description": "The size of the data markers.",
          "type": "number",
          "displayName": "Marker Size",
          "minimum": 0,
          "units": "pixels",
          "help": "markerSize"
        },
        "markerSvgClassName": {
          "description": "The CSS style class to apply to the data markers. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Svg Class Name",
          "help": "markerSvgClassName"
        },
        "markerSvgStyle": {
          "description": "The inline style to apply to the data markers. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Marker Svg Style",
          "help": "markerSvgStyle"
        },
        "name": {
          "description": "The name of the series, displayed in the legend and tooltips.",
          "type": "string",
          "displayName": "Name",
          "help": "name"
        },
        "pattern": {
          "description": "The pattern used to fill the series. A solid fill is used by default, unless the seriesEffect is 'pattern'.",
          "type": "string",
          "displayName": "Pattern",
          "value": "auto",
          "help": "pattern",
          "enumValues": [
            "auto",
            "largeChecker",
            "largeCrosshatch",
            "largeDiagonalLeft",
            "largeDiagonalRight",
            "largeDiamond",
            "largeTriangle",
            "smallChecker",
            "smallCrosshatch",
            "smallDiagonalLeft",
            "smallDiagonalRight",
            "smallDiamond",
            "smallTriangle"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "largeChecker": {
              "displayName": "Large Checker"
            },
            "largeCrosshatch": {
              "displayName": "Large Crosshatch"
            },
            "largeDiagonalLeft": {
              "displayName": "Large Diagonal Left"
            },
            "largeDiagonalRight": {
              "displayName": "Large Diagonal Right"
            },
            "largeDiamond": {
              "displayName": "Large Diamond"
            },
            "largeTriangle": {
              "displayName": "Large Triangle"
            },
            "smallChecker": {
              "displayName": "Small Checker"
            },
            "smallCrosshatch": {
              "displayName": "Small Crosshatch"
            },
            "smallDiagonalLeft": {
              "displayName": "Small Diagonal Left"
            },
            "smallDiagonalRight": {
              "displayName": "Small Diagonal Right"
            },
            "smallDiamond": {
              "displayName": "Small Diamond"
            },
            "smallTriangle": {
              "displayName": "Small Triangle"
            }
          }
        },
        "pieSliceExplode": {
          "description": "A number from 0 to 1 indicating the amount to explode the pie slice. Only applies to pie charts.",
          "type": "number",
          "displayName": "Pie Slice Explode",
          "value": 0,
          "maximum": 1,
          "minimum": 0,
          "help": "pieSliceExplode"
        },
        "shortDesc": {
          "description": "The description of this series. This is used for accessibility and for customizing the tooltip text on the corresponding legend item for the series.",
          "type": "string",
          "displayName": "Short Desc",
          "translatable": true,
          "help": "shortDesc"
        },
        "source": {
          "description": "The URI of the custom image. If specified, it takes precedence over shape.",
          "type": "string",
          "displayName": "Source",
          "help": "source"
        },
        "sourceHover": {
          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover",
          "help": "sourceHover"
        },
        "sourceHoverSelected": {
          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover Selected",
          "help": "sourceHoverSelected"
        },
        "sourceSelected": {
          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Selected",
          "help": "sourceSelected"
        },
        "stackCategory": {
          "description": "In stacked charts, groups series together for stacking. All series without a stackCategory will be assigned to the same stack.",
          "type": "string",
          "displayName": "Stack Category",
          "help": "stackCategory"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Svg Class Name",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the series. For series of type lineWithArea, this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Svg Style",
          "help": "svgStyle"
        },
        "type": {
          "description": "The type of data objects to display for this series. Only applies to bar, line, area, stock, box plot, and combo charts.",
          "type": "string",
          "displayName": "Type",
          "value": "auto",
          "help": "type",
          "enumValues": [
            "area",
            "auto",
            "bar",
            "boxPlot",
            "candlestick",
            "line",
            "lineWithArea"
          ],
          "propertyEditorValues": {
            "area": {
              "displayName": "Area"
            },
            "auto": {
              "displayName": "Auto"
            },
            "bar": {
              "displayName": "Bar"
            },
            "boxPlot": {
              "displayName": "Box Plot"
            },
            "candlestick": {
              "displayName": "Candlestick"
            },
            "line": {
              "displayName": "Line"
            },
            "lineWithArea": {
              "displayName": "Line With Area"
            }
          }
        }
      }
    },
    "oj-checkboxset": {
      "name": "oj-checkboxset",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Checkbox Set",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcheckboxset"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-choice-direction-column"
          ],
          "description": "This is the default. It lays out the checkboxes in a column."
        },
        {
          "styleGroup": [
            "oj-choice-direction-row"
          ],
          "description": "It lays out the checkboxes in a row."
        },
        {
          "styleGroup": [
            "oj-checkboxset-no-chrome"
          ],
          "description": "Use this styleclass if you don't want the chrome around the set."
        },
        {
          "styleGroup": [
            "oj-checkboxset-input-start"
          ],
          "description": "Use this styleclass to order the checkbox at the start and label text at the end even if a theme has a different default order."
        },
        {
          "styleGroup": [
            "oj-checkboxset-input-end"
          ],
          "description": "Use this styleclass to order the checkbox at the end and the label text at the start even if a theme has a different default order."
        }
      ],
      "description": "A checkbox set allows the user to select one or more options from a set.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojCheckboxset.html",
      "properties": {
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies if the component is disabled. If true, then all of its inputs and labels are also disabled. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documenation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "optionRenderer"
        },
        "options": {
          "description": "The option items for the Checkboxset.",
          "type": "object|null",
          "displayName": "Options",
          "value": null,
          "help": "options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "optionsKeys",
          "properties": {
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "optionsKeys.value"
            }
          }
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Read Only",
          "value": false,
          "help": "readOnly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "readonlyNoValue": {
              "description": "Used for the readonly checkboxset when no option is selected. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.readonlyNoValue"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "An array that represents the value of the component. See the Help documentation for more information.",
          "type": "Array<any>",
          "displayName": "Value",
          "writeback": true,
          "help": "value"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the checkboxset. A refresh is required after a checkboxset is programmatically changed. See the Help documentation for more information.",
          "help": "refresh",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise<string>"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-checkboxset element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-collapsible": {
      "name": "oj-collapsible",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Collapsible",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcollapsible"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-clickthrough-disabled"
          ],
          "description": "Use on any element inside the header where you do not want Collapsible to process the click event."
        }
      ],
      "description": "A collapsible displays a header that can be expanded to show its content.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojCollapsible.html",
      "properties": {
        "disabled": {
          "description": "Disables the collapsible if set to true.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "expandArea": {
          "description": "Where in the header to click to toggle disclosure.",
          "type": "string",
          "displayName": "Expand Area",
          "value": "header",
          "help": "expandArea",
          "enumValues": [
            "disclosureIcon",
            "header"
          ],
          "propertyEditorValues": {
            "disclosureIcon": {
              "description": "click the disclosureIcon to toggle disclosure",
              "displayName": "Disclosure Icon"
            },
            "header": {
              "description": "click any where in the header to toggle disclosure",
              "displayName": "Header"
            }
          }
        },
        "expanded": {
          "description": "Specifies if the content is expanded.",
          "type": "boolean",
          "displayName": "Expanded",
          "value": false,
          "writeback": true,
          "help": "expanded"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the visual state of the collapsible. This method does not accept any arguments.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeExpand": {
          "description": "Triggered immediately before the collapsible is expanded.",
          "cancelable": true,
          "help": "beforeExpand",
          "detail": {
            "header": {
              "description": "The header that is about to be expanded.",
              "type": "Element"
            },
            "content": {
              "description": "The content that is about to be expanded.",
              "type": "Element"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered immediately after the collapsible is expanded.",
          "help": "expand",
          "detail": {
            "header": {
              "description": "The header that was just expanded.",
              "type": "Element"
            },
            "content": {
              "description": "The content that was just expanded.",
              "type": "Element"
            }
          }
        },
        "ojBeforeCollapse": {
          "description": "Triggered immediately before the collapsible is collapsed.",
          "cancelable": true,
          "help": "beforeCollapse",
          "detail": {
            "header": {
              "description": "The header that is about to be collapsed.",
              "type": "Element"
            },
            "content": {
              "description": "The content that is about to be collapsed.",
              "type": "Element"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered immediately after the collapsible is collapsed.",
          "help": "collapse",
          "detail": {
            "header": {
              "description": "The header that was just collapsed.",
              "type": "Element"
            },
            "content": {
              "description": "The content that was just collapsed.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The default slot is the collapsible's content.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "header": {
          "description": "The header slot is the collapsible's header. If not specified, the header contains only an open/close icon. Note that the header text is required for JET collapsible for accessibility purposes.",
          "help": "header"
        }
      }
    },
    "oj-color-palette": {
      "name": "oj-color-palette",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Color Palette",
      "type": "core",
      "since": "3.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcolorpalette"
        }
      },
      "description": "A color palette displays a set of predefined colors from which a specific color can be selected.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojColorPalette.html",
      "properties": {
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelDisplay": {
          "description": "Specifies whether a text label accompanies the color swatch.",
          "type": "string",
          "displayName": "Label Display",
          "value": "off",
          "help": "labelDisplay",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "labels are displayed if the layout property is 'list' and swatch-size is 'sm' or if the layout is 'grid' and swatch-size is 'lg'",
              "displayName": "Auto"
            },
            "off": {
              "description": "labels are not displayed",
              "displayName": "Off"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "Used to establish a relationship between this element and another element.",
          "type": "string",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "layout": {
          "description": "Specifies the layout of the color swatches.",
          "type": "string",
          "displayName": "Layout",
          "value": "grid",
          "help": "layout",
          "enumValues": [
            "grid",
            "list"
          ],
          "propertyEditorValues": {
            "grid": {
              "description": "Layout the color swatches in a grid",
              "displayName": "Grid"
            },
            "list": {
              "description": "Layout the color swatches in a list",
              "displayName": "List"
            }
          }
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "palette": {
          "description": "Specifies an array of objects defining the palette's color set.",
          "type": "Array<Object>",
          "displayName": "Palette",
          "value": null,
          "translatable": true,
          "help": "palette",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "color": {
                  "description": "the color definition",
                  "type": "object"
                },
                "label": {
                  "description": "optional descriptive string (refer to attribute label-display). If omitted, label defaults to the color's hex string format.",
                  "type": "string"
                }
              }
            }
          }
        },
        "swatchSize": {
          "description": "Specifies the swatch size.",
          "type": "string",
          "displayName": "Swatch Size",
          "value": "lg",
          "help": "swatchSize",
          "enumValues": [
            "xs",
            "sm",
            "lg"
          ],
          "propertyEditorValues": {
            "xs": {
              "description": "extra small swatch",
              "displayName": "Extra Small"
            },
            "sm": {
              "description": "small swatch",
              "displayName": "Small"
            },
            "lg": {
              "description": "large swatch",
              "displayName": "Large"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "labelNone": {
              "description": "Label for swatch with no color. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNone"
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The current value of the palette element.",
          "type": "object",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "format": "color",
          "help": "value"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ]
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ]
        },
        "refresh": {
          "description": "Called when the DOM underneath the component changes, requiring a re-render of the component.",
          "help": "refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-color-spectrum": {
      "name": "oj-color-spectrum",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Color Spectrum",
      "type": "core",
      "since": "3.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojcolorspectrum"
        }
      },
      "description": "A color spectrum allows a custom color value to be specified from a display containing a saturation/luminosity spectrum, plus hue and opacity sliders.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojColorSpectrum.html",
      "properties": {
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "Used to establish a relationship between this element and another element.",
          "type": "string",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "transientValue": {
          "description": "Retrieves the transient value of the component.",
          "type": "object",
          "displayName": "Transient Value",
          "writeback": true,
          "readOnly": true,
          "format": "color",
          "help": "transientValue"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "labelHue": {
              "description": "Label for Hue slider tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelHue"
            },
            "labelOpacity": {
              "description": "Label for Opacity slider tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelOpacity"
            },
            "labelSatLum": {
              "description": "Label for spectrum thumb tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSatLum"
            },
            "labelThumbDesc": {
              "description": "Label for spectrum thumb description. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelThumbDesc"
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "Specifies the value of the element representing the current color.",
          "type": "object",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "format": "color",
          "help": "value"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ]
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ]
        },
        "refresh": {
          "description": "Called when the DOM underneath the component changes, requiring a re-render of the component.",
          "help": "refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-combobox-many": {
      "name": "oj-combobox-many",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Multi-select Combobox",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojselectcombobox"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "A combobox many is a dropdown list that supports multiple selections, text input, and search filtering.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojComboboxMany.html",
      "properties": {
        "asyncValidators": {
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "asyncValidators"
        },
        "converter": {
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Converter",
          "value": null,
          "help": "converter",
          "properties": {
            "type": {
              "description": "the converter type registered with the oj.ConverterFactory. Supported types are 'number' and 'datetime'. See ConverterFactory for details. E.g., {converter: {type: 'number'}",
              "type": "string",
              "enumValues": [
                "datetime",
                "number"
              ]
            },
            "options": {
              "description": "optional Object literal of options that the converter expects. See IntlNumberConverter for options supported by the number converter. E.g., {converter: {type: 'number', options: {style: 'decimal'}}",
              "type": "object"
            }
          }
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "minLength": {
          "description": "The minimum number of characters a user must type before search filtering is performed.",
          "type": "number",
          "displayName": "Min Length",
          "value": 0,
          "minimum": 0,
          "help": "minLength"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "optionRenderer"
        },
        "options": {
          "description": "The option items for the Combobox.",
          "type": "Array<Object>|object|null",
          "displayName": "Options",
          "value": null,
          "help": "options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "optionsKeys",
          "properties": {
            "childKeys": {
              "description": "The object for the child keys. It is ignored when using a TreeDataProvider.",
              "type": "object",
              "displayName": "Child Keys",
              "value": null,
              "help": "optionsKeys.childKeys",
              "properties": {
                "label": {
                  "description": "The key name for the label.",
                  "type": "string"
                },
                "value": {
                  "description": "The key name for the value.",
                  "type": "string"
                },
                "children": {
                  "description": "The key name for the children.",
                  "type": "string"
                },
                "childKeys": {
                  "description": "The object for the child keys.",
                  "type": "object",
                  "properties": {
                    "label": {
                      "description": "The key name for the label.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The key name for the value.",
                      "type": "string"
                    },
                    "children": {
                      "description": "The key name for the children.",
                      "type": "string"
                    },
                    "childKeys": {
                      "description": "The object for the child keys.",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "children": {
              "description": "The key name for the children. It is ignored when using a TreeDataProvider.",
              "type": "string",
              "displayName": "Children",
              "value": null,
              "help": "optionsKeys.children"
            },
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "optionsKeys.value"
            }
          }
        },
        "pickerAttributes": {
          "description": "The style attributes for the drop down.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "pickerAttributes",
          "properties": {
            "style": {
              "description": "The css style to append to the picker.",
              "type": "string"
            },
            "class": {
              "description": "The css class to append to the picker.",
              "type": "string"
            }
          }
        },
        "placeholder": {
          "description": "A short hint that can be displayed before user selects or enters a value.",
          "type": "string|null",
          "displayName": "Placeholder",
          "value": null,
          "help": "placeholder"
        },
        "rawValue": {
          "description": "The currently displayed text retrieved from the input field.",
          "type": "string",
          "displayName": "Raw Value",
          "value": null,
          "writeback": true,
          "readOnly": true,
          "help": "rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Read Only",
          "value": false,
          "help": "readOnly"
        },
        "required": {
          "description": "Specifies whether a value is required.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "filterFurther": {
              "description": "Text at the top of drop down when not all results are fetched and users need to filter further.",
              "type": "string",
              "help": "translations.filterFurther"
            },
            "moreMatchesFound": {
              "description": "Text for the drop down when more than one options are found.",
              "type": "string",
              "help": "translations.moreMatchesFound"
            },
            "noMatchesFound": {
              "description": "No options found text for drop down.",
              "type": "string",
              "help": "translations.noMatchesFound"
            },
            "oneMatchesFound": {
              "description": "Text for the drop down when one option is found.",
              "type": "string",
              "help": "translations.oneMatchesFound"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "description": "Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array",
          "displayName": "Validators",
          "value": [],
          "help": "validators",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. E.g., {validators: [{type: 'regExp'}]}",
                  "type": "string"
                },
                "options": {
                  "description": "optional Object literal of options that the validator expects. E.g., {validators: [{type: 'regExp', options: {pattern: '[a-zA-Z0-9]{3,}'}}]}",
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the element.",
          "type": "Array<any>|null",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "help": "value"
        },
        "valueOptions": {
          "description": "The current values of the element and their associated display labels.",
          "type": "null|Array<Object>",
          "displayName": "Value Options",
          "value": null,
          "writeback": true,
          "help": "valueOptions",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "value": {
                  "description": "a current value of JET Combobox",
                  "type": "any"
                },
                "label": {
                  "description": "display label of value above. If missing, String(value) is used.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the combobox.",
          "help": "refresh",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-combobox-many element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-combobox-one": {
      "name": "oj-combobox-one",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Single-select Combobox",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojselectcombobox"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "A combobox one is a dropdown list that supports single selection, text input, and search filtering.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojComboboxOne.html",
      "properties": {
        "asyncValidators": {
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "asyncValidators"
        },
        "converter": {
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Converter",
          "value": null,
          "help": "converter",
          "properties": {
            "type": {
              "description": "the converter type registered with the oj.ConverterFactory. Supported types are 'number' and 'datetime'. See ConverterFactory for details. E.g., {converter: {type: 'number'}",
              "type": "string",
              "enumValues": [
                "datetime",
                "number"
              ]
            },
            "options": {
              "description": "optional Object literal of options that the converter expects. See IntlNumberConverter for options supported by the number converter. E.g., {converter: {type: 'number', options: {style: 'decimal'}}",
              "type": "object"
            }
          }
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "filterOnOpen": {
          "description": "Whether to filter the drop down list on open.",
          "type": "string",
          "displayName": "Filter On Open",
          "value": "none",
          "help": "filterOnOpen",
          "enumValues": [
            "none",
            "rawValue"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "Show all available options without filtering on open.",
              "displayName": "None"
            },
            "rawValue": {
              "description": "Filter the drop down list on open with the rawValue (current display value).",
              "displayName": "Raw Value"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "minLength": {
          "description": "The minimum number of characters a user must type before search filtering is performed.",
          "type": "number",
          "displayName": "Min Length",
          "value": 0,
          "minimum": 0,
          "help": "minLength"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "optionRenderer"
        },
        "options": {
          "description": "The option items for the Combobox.",
          "type": "Array<Object>|object|null",
          "displayName": "Options",
          "value": null,
          "help": "options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "optionsKeys",
          "properties": {
            "childKeys": {
              "description": "The object for the child keys. It is ignored when using a TreeDataProvider.",
              "type": "object",
              "displayName": "Child Keys",
              "value": null,
              "help": "optionsKeys.childKeys",
              "properties": {
                "label": {
                  "description": "The key name for the label.",
                  "type": "string"
                },
                "value": {
                  "description": "The key name for the value.",
                  "type": "string"
                },
                "children": {
                  "description": "The key name for the children.",
                  "type": "string"
                },
                "childKeys": {
                  "description": "The object for the child keys.",
                  "type": "object",
                  "properties": {
                    "label": {
                      "description": "The key name for the label.",
                      "type": "string"
                    },
                    "value": {
                      "description": "The key name for the value.",
                      "type": "string"
                    },
                    "children": {
                      "description": "The key name for the children.",
                      "type": "string"
                    },
                    "childKeys": {
                      "description": "The object for the child keys.",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "children": {
              "description": "The key name for the children. It is ignored when using a TreeDataProvider.",
              "type": "string",
              "displayName": "Children",
              "value": null,
              "help": "optionsKeys.children"
            },
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "optionsKeys.value"
            }
          }
        },
        "pickerAttributes": {
          "description": "The style attributes for the drop down.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "pickerAttributes",
          "properties": {
            "style": {
              "description": "The css style to append to the picker.",
              "type": "string"
            },
            "class": {
              "description": "The css class to append to the picker.",
              "type": "string"
            }
          }
        },
        "placeholder": {
          "description": "A short hint that can be displayed before user selects or enters a value.",
          "type": "string|null",
          "displayName": "Placeholder",
          "value": null,
          "help": "placeholder"
        },
        "rawValue": {
          "description": "The currently displayed text retrieved from the input field.",
          "type": "string",
          "displayName": "Raw Value",
          "value": null,
          "writeback": true,
          "readOnly": true,
          "help": "rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Read Only",
          "value": false,
          "help": "readOnly"
        },
        "required": {
          "description": "Specifies whether a value is required.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "filterFurther": {
              "description": "Text at the top of drop down when not all results are fetched and users need to filter further.",
              "type": "string",
              "help": "translations.filterFurther"
            },
            "moreMatchesFound": {
              "description": "Text for the drop down when more than one options are found.",
              "type": "string",
              "help": "translations.moreMatchesFound"
            },
            "noMatchesFound": {
              "description": "No options found text for drop down.",
              "type": "string",
              "help": "translations.noMatchesFound"
            },
            "oneMatchesFound": {
              "description": "Text for the drop down when one option is found.",
              "type": "string",
              "help": "translations.oneMatchesFound"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "description": "Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array",
          "displayName": "Validators",
          "value": [],
          "help": "validators",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. E.g., {validators: [{type: 'regExp'}]}",
                  "type": "string"
                },
                "options": {
                  "description": "optional Object literal of options that the validator expects. E.g., {validators: [{type: 'regExp', options: {pattern: '[a-zA-Z0-9]{3,}'}}]}",
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the element.",
          "type": "any",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "help": "value"
        },
        "valueOption": {
          "description": "The current value of the element and its associated display label.",
          "type": "null|object",
          "displayName": "Value Option",
          "value": null,
          "writeback": true,
          "help": "valueOption",
          "properties": {
            "value": {
              "description": "current value of JET Combobox",
              "type": "any"
            },
            "label": {
              "description": "display label of value above. If missing, String(value) is used.",
              "type": "string"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the combobox.",
          "help": "refresh",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojValueUpdated": {
          "description": "Event handler for when the value is submitted by the user.",
          "help": "valueUpdated",
          "detail": {
            "value": {
              "description": "the current value",
              "type": "any"
            },
            "previousValue": {
              "description": "the previous value",
              "type": "any"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-combobox-one element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "end": {
          "description": "The end slot enables replacement of the combobox's drop down arrow and divider. See the Help documentation for more information.",
          "help": "end"
        }
      }
    },
    "oj-conveyor-belt": {
      "name": "oj-conveyor-belt",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Conveyor Belt",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojconveyorbelt"
        }
      },
      "description": "A conveyor belt manages overflow for its child elements and allows scrolling among them.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojConveyorBelt.html",
      "properties": {
        "contentParent": {
          "description": "Specify the selector of the descendant DOM element in the conveyorBelt that directly contains the items to scroll among.",
          "type": "string",
          "displayName": "Content Parent",
          "value": null,
          "help": "contentParent"
        },
        "orientation": {
          "description": "Specifies the orientation of the conveyorBelt.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "description": "Orient the conveyorBelt horizontally.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "Orient the conveyorBelt vertically.",
              "displayName": "Vertical"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the visual state of the conveyorBelt.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-conveyor-belt element manages overflow for its child elements and allows scrolling among them. See the Help documentation for more information.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-data-grid": {
      "name": "oj-data-grid",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Data Grid",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatagrid"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-[size]-justify-content-[flexjustify]"
          ],
          "description": "Use this class on cells' and headers' className property to align your content horizontally. By default the alignment is flex-end on cells and varies on headers, see other possibilities in the [Flex Layout]{@link FlexLayout} justify section for size and flexjustify options."
        },
        {
          "styleGroup": [
            "oj-[size]-align-items-[flexalign]"
          ],
          "description": "Use this class on cells' and headers' className property to align your content vertically. By default the alignment is center on cells and headers, see other possibilities in the [Flex Layout]{@link FlexLayout} align section for size and flexalign options."
        },
        {
          "styleGroup": [
            "oj-helper-justify-content-[direction]"
          ],
          "description": "Direction can be left or right. Use this class on cells' and headers' className align your content horizontally to the left or right. See the [Helpers]{@link Helpers} section for details. This handles the always one direction case that flexjustify does not."
        },
        {
          "styleGroup": [
            "oj-datagrid-cell-no-padding"
          ],
          "description": "Used to style a datagrid cell so that it has no padding."
        },
        {
          "styleGroup": [
            "oj-datagrid-cell-padding"
          ],
          "description": "Used to style a datagrid cell so that it has the default padding."
        },
        {
          "styleGroup": [
            "oj-datagrid-depth-[1-7]"
          ],
          "description": "Used to style the default header widths and heights. By default the datagrid supports up to depth 7. If you have headers width depth greater than 7 specify the defaults using the class name description or use apply custom style rules to the headers."
        }
      ],
      "description": "A data grid displays data in a cell oriented grid.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojDataGrid.html",
      "properties": {
        "bandingInterval": {
          "description": "Specifies the data body row and column banding intervals.",
          "type": "object",
          "displayName": "Banding Interval",
          "help": "bandingInterval",
          "properties": {
            "column": {
              "description": "Specifies the data body column banding intervals.",
              "type": "number",
              "displayName": "Column",
              "value": 0,
              "minimum": 0,
              "help": "bandingInterval.column"
            },
            "row": {
              "description": "Specifies the data body row banding intervals.",
              "type": "number",
              "displayName": "Row",
              "value": 0,
              "minimum": 0,
              "help": "bandingInterval.row"
            }
          }
        },
        "cell": {
          "description": "Specifies attributes on the cells.",
          "type": "object",
          "displayName": "Cell",
          "help": "cell",
          "properties": {
            "className": {
              "description": "Specifies CSS class names to apply to cells. See the Help documentation for more information.",
              "type": "function|string|null",
              "displayName": "Class Name",
              "value": null,
              "help": "cell.className"
            },
            "renderer": {
              "description": "A function that returns cell content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null,
              "help": "cell.renderer"
            },
            "style": {
              "description": "Specifies inline style to add to the cells. See the Help documentation for more information.",
              "type": "function|string|null",
              "displayName": "Style",
              "value": null,
              "help": "cell.style"
            }
          }
        },
        "currentCell": {
          "description": "Specifies the grid's currently focused cell.",
          "type": "object",
          "displayName": "Current Cell",
          "value": null,
          "writeback": true,
          "help": "currentCell"
        },
        "data": {
          "description": "Specifies the data for the grid. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "dnd": {
          "description": "Specifies drag and drop features.",
          "type": "object",
          "displayName": "Dnd",
          "help": "dnd",
          "properties": {
            "reorder": {
              "description": "Specifies drag and drop reordering features.",
              "type": "object",
              "displayName": "Reorder",
              "help": "dnd.reorder",
              "properties": {
                "row": {
                  "description": "Specifies whether drag and drop row reordering is enabled.",
                  "type": "string",
                  "displayName": "Row",
                  "value": "disable",
                  "help": "dnd.reorder.row",
                  "enumValues": [
                    "disable",
                    "enable"
                  ],
                  "propertyEditorValues": {
                    "disable": {
                      "description": "disable row reordering",
                      "displayName": "Disable"
                    },
                    "enable": {
                      "description": "enable row reordering",
                      "displayName": "Enable"
                    }
                  }
                }
              }
            }
          }
        },
        "editMode": {
          "description": "Specifies if the grid is read-only or editable.",
          "type": "string",
          "displayName": "Edit Mode",
          "value": "none",
          "writeback": true,
          "help": "editMode",
          "enumValues": [
            "cellEdit",
            "cellNavigation",
            "none"
          ],
          "propertyEditorValues": {
            "cellEdit": {
              "description": "the DataGrid cells are individually tabbable and editable",
              "displayName": "Cell Edit"
            },
            "cellNavigation": {
              "description": "the DataGrid is a single tab stop and editable at the cell level, but currently read-only",
              "displayName": "Cell Navigation"
            },
            "none": {
              "description": "the DataGrid is read-only",
              "displayName": "None"
            }
          }
        },
        "gridlines": {
          "description": "Specifies the visibility of the grid body vertical and horizontal gridlines.",
          "type": "object",
          "displayName": "Gridlines",
          "help": "gridlines",
          "properties": {
            "horizontal": {
              "description": "Specifies the visibility of the horizontal gridlines.",
              "type": "string",
              "displayName": "Horizontal",
              "value": "visible",
              "help": "gridlines.horizontal",
              "enumValues": [
                "hidden",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "hide horizontal gridlines",
                  "displayName": "Hidden"
                },
                "visible": {
                  "description": "show horizontal gridlines",
                  "displayName": "Visible"
                }
              }
            },
            "vertical": {
              "description": "Specifies the visibility of the vertical gridlines.",
              "type": "string",
              "displayName": "Vertical",
              "value": "visible",
              "help": "gridlines.vertical",
              "enumValues": [
                "hidden",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "hide vertical gridlines",
                  "displayName": "Hidden"
                },
                "visible": {
                  "description": "show vertical gridlines",
                  "displayName": "Visible"
                }
              }
            }
          }
        },
        "header": {
          "description": "Specifies attributes on the headers.",
          "type": "object",
          "displayName": "Header",
          "help": "header",
          "properties": {
            "column": {
              "description": "Specifies attributes on the column headers.",
              "type": "object",
              "displayName": "Column",
              "help": "header.column",
              "properties": {
                "className": {
                  "description": "Specifies CSS class names to apply to column headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Class Name",
                  "value": null,
                  "help": "header.column.className"
                },
                "label": {
                  "description": "Specifies attributes on the column header labels.",
                  "type": "object",
                  "displayName": "Label",
                  "help": "header.column.label",
                  "properties": {
                    "className": {
                      "description": "Specifies CSS class names to apply to column header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Class Name",
                      "value": null,
                      "help": "header.column.label.className"
                    },
                    "renderer": {
                      "description": "A function that returns column header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                      "type": "function|null",
                      "displayName": "Renderer",
                      "value": null,
                      "help": "header.column.label.renderer"
                    },
                    "style": {
                      "description": "Specifies inline style to apply to column header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Style",
                      "value": null,
                      "help": "header.column.label.style"
                    }
                  }
                },
                "renderer": {
                  "description": "A function that returns column header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Renderer",
                  "value": null,
                  "help": "header.column.renderer"
                },
                "resizable": {
                  "description": "Specifies resizing options along the column headers.",
                  "type": "object",
                  "displayName": "Resizable",
                  "help": "header.column.resizable",
                  "properties": {
                    "height": {
                      "description": "Enable or disable height resizing along the column headers.",
                      "type": "string",
                      "displayName": "Height",
                      "value": "disable",
                      "help": "header.column.resizable.height",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable height resizing on column headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable height resizing on column headers",
                          "displayName": "Enable"
                        }
                      }
                    },
                    "width": {
                      "description": "Enable or disable width resizing along the column headers.",
                      "type": "string|function",
                      "displayName": "Width",
                      "value": "disable",
                      "help": "header.column.resizable.width",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable width resizing on column headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable width resizing on column headers",
                          "displayName": "Enable"
                        }
                      }
                    }
                  }
                },
                "sortable": {
                  "description": "Specifies whether sorting is enabled on the column headers. See the Help documentation for more information.",
                  "type": "function|string",
                  "displayName": "Sortable",
                  "value": "auto",
                  "help": "header.column.sortable",
                  "enumValues": [
                    "auto",
                    "disable",
                    "enable"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "get the sortable property from the data source",
                      "displayName": "Auto"
                    },
                    "disable": {
                      "description": "disable sorting on column headers",
                      "displayName": "Disable"
                    },
                    "enable": {
                      "description": "enable sorting on column headers",
                      "displayName": "Enable"
                    }
                  }
                },
                "style": {
                  "description": "Specifies inline style to add to the column headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Style",
                  "value": null,
                  "help": "header.column.style"
                }
              }
            },
            "columnEnd": {
              "description": "Specifies attributes on the column end headers.",
              "type": "object",
              "displayName": "Column End",
              "help": "header.columnEnd",
              "properties": {
                "className": {
                  "description": "Specifies CSS class names to apply to column end headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Class Name",
                  "value": null,
                  "help": "header.columnEnd.className"
                },
                "label": {
                  "description": "Specifies attributes on the column end header labels.",
                  "type": "object",
                  "displayName": "Label",
                  "help": "header.columnEnd.label",
                  "properties": {
                    "className": {
                      "description": "Specifies CSS class names to apply to column end header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Class Name",
                      "value": null,
                      "help": "header.columnEnd.label.className"
                    },
                    "renderer": {
                      "description": "A function that returns column end header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                      "type": "function|null",
                      "displayName": "Renderer",
                      "value": null,
                      "help": "header.columnEnd.label.renderer"
                    },
                    "style": {
                      "description": "Specifies inline style to apply to column end header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Style",
                      "value": null,
                      "help": "header.columnEnd.label.style"
                    }
                  }
                },
                "renderer": {
                  "description": "A function that returns column end header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Renderer",
                  "value": null,
                  "help": "header.columnEnd.renderer"
                },
                "resizable": {
                  "description": "Specifies resizing options along the column end headers.",
                  "type": "object",
                  "displayName": "Resizable",
                  "help": "header.columnEnd.resizable",
                  "properties": {
                    "height": {
                      "description": "Enable or disable height resizing along the column end headers.",
                      "type": "string",
                      "displayName": "Height",
                      "value": "disable",
                      "help": "header.columnEnd.resizable.height",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable height resizing on columnEnd headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable height resizing on columnEnd headers",
                          "displayName": "Enable"
                        }
                      }
                    },
                    "width": {
                      "description": "Enable or disable width resizing along the column end headers.",
                      "type": "string|function",
                      "displayName": "Width",
                      "value": "disable",
                      "help": "header.columnEnd.resizable.width",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable width resizing on columnEnd headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable width resizing on columnEnd headers",
                          "displayName": "Enable"
                        }
                      }
                    }
                  }
                },
                "style": {
                  "description": "Specifies inline style to add to the column end headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Style",
                  "value": null,
                  "help": "header.columnEnd.style"
                }
              }
            },
            "row": {
              "description": "Specifies attributes on the row headers.",
              "type": "object",
              "displayName": "Row",
              "help": "header.row",
              "properties": {
                "className": {
                  "description": "Specifies CSS class names to apply to row headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Class Name",
                  "value": null,
                  "help": "header.row.className"
                },
                "label": {
                  "description": "Specifies attributes on the row header labels.",
                  "type": "object",
                  "displayName": "Label",
                  "help": "header.row.label",
                  "properties": {
                    "className": {
                      "description": "Specifies CSS class names to apply to row header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Class Name",
                      "value": null,
                      "help": "header.row.label.className"
                    },
                    "renderer": {
                      "description": "A function that returns row header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                      "type": "function|null",
                      "displayName": "Renderer",
                      "value": null,
                      "help": "header.row.label.renderer"
                    },
                    "style": {
                      "description": "Specifies inline style to apply to row header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Style",
                      "value": null,
                      "help": "header.row.label.style"
                    }
                  }
                },
                "renderer": {
                  "description": "A function that returns row header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Renderer",
                  "value": null,
                  "help": "header.row.renderer"
                },
                "resizable": {
                  "description": "Specifies resizing options on the row headers.",
                  "type": "object",
                  "displayName": "Resizable",
                  "help": "header.row.resizable",
                  "properties": {
                    "height": {
                      "description": "Enable or disable height resizing along the row headers.",
                      "type": "string|function",
                      "displayName": "Height",
                      "value": "disable",
                      "help": "header.row.resizable.height",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable height resizing on row headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable height resizing on row headers",
                          "displayName": "Enable"
                        }
                      }
                    },
                    "width": {
                      "description": "Enable or disable width resizing along the row headers.",
                      "type": "string",
                      "displayName": "Width",
                      "value": "disable",
                      "help": "header.row.resizable.width",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable width resizing on row headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable width resizing on row headers",
                          "displayName": "Enable"
                        }
                      }
                    }
                  }
                },
                "sortable": {
                  "description": "Specifies whether sorting is enabled on the row headers. See the Help documentation for more information.",
                  "type": "function|string",
                  "displayName": "Sortable",
                  "value": "auto",
                  "help": "header.row.sortable",
                  "enumValues": [
                    "auto",
                    "disable",
                    "enable"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "get the sortable property from the data source",
                      "displayName": "Auto"
                    },
                    "disable": {
                      "description": "disable sorting on row headers",
                      "displayName": "Disable"
                    },
                    "enable": {
                      "description": "enable sorting on row headers",
                      "displayName": "Enable"
                    }
                  }
                },
                "style": {
                  "description": "Specifies inline style to add to the row headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Style",
                  "value": null,
                  "help": "header.row.style"
                }
              }
            },
            "rowEnd": {
              "description": "Specifies attributes on the row end headers.",
              "type": "object",
              "displayName": "Row End",
              "help": "header.rowEnd",
              "properties": {
                "className": {
                  "description": "Specifies CSS class names to apply to row end headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Class Name",
                  "value": null,
                  "help": "header.rowEnd.className"
                },
                "label": {
                  "description": "Specifies attributes on the row end header labels.",
                  "type": "object",
                  "displayName": "Label",
                  "help": "header.rowEnd.label",
                  "properties": {
                    "className": {
                      "description": "Specifies CSS class names to apply to row end header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Class Name",
                      "value": null,
                      "help": "header.rowEnd.label.className"
                    },
                    "renderer": {
                      "description": "A function that returns row end header label content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                      "type": "function|null",
                      "displayName": "Renderer",
                      "value": null,
                      "help": "header.rowEnd.label.renderer"
                    },
                    "style": {
                      "description": "Specifies inline style to apply to row end header labels. See the Help documentation for more information.",
                      "type": "function|string|null",
                      "displayName": "Style",
                      "value": null,
                      "help": "header.rowEnd.label.style"
                    }
                  }
                },
                "renderer": {
                  "description": "A function that returns row end header content. The function takes a context argument, provided by the datagrid. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Renderer",
                  "value": null,
                  "help": "header.rowEnd.renderer"
                },
                "resizable": {
                  "description": "Specifies resizing options along the row end headers.",
                  "type": "object",
                  "displayName": "Resizable",
                  "help": "header.rowEnd.resizable",
                  "properties": {
                    "height": {
                      "description": "Enable or disable height resizing along the row end headers.",
                      "type": "string|function",
                      "displayName": "Height",
                      "value": "disable",
                      "help": "header.rowEnd.resizable.height",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable height resizing on rowEnd headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable height resizing on rowEnd headers",
                          "displayName": "Enable"
                        }
                      }
                    },
                    "width": {
                      "description": "Enable or disable width resizing along the row end headers.",
                      "type": "string",
                      "displayName": "Width",
                      "value": "disable",
                      "help": "header.rowEnd.resizable.width",
                      "enumValues": [
                        "disable",
                        "enable"
                      ],
                      "propertyEditorValues": {
                        "disable": {
                          "description": "disable width resizing on rowEnd headers",
                          "displayName": "Disable"
                        },
                        "enable": {
                          "description": "enable width resizing on rowEnd headers",
                          "displayName": "Enable"
                        }
                      }
                    }
                  }
                },
                "style": {
                  "description": "Specifies inline style to add to the row end headers. See the Help documentation for more information.",
                  "type": "function|string|null",
                  "displayName": "Style",
                  "value": null,
                  "help": "header.rowEnd.style"
                }
              }
            }
          }
        },
        "scrollPolicy": {
          "description": "Specifies how data are fetched as user scrolls through the data grid.",
          "type": "string|null",
          "displayName": "Scroll Policy",
          "value": "auto",
          "help": "scrollPolicy",
          "enumValues": [
            "auto",
            "loadMoreOnScroll",
            "scroll"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "the DataGrid will decide the scroll policy",
              "displayName": "Auto"
            },
            "loadMoreOnScroll": {
              "description": "additional data are fetched when the user scrolls to the bottom of the DataGrid and all previous data are kept in the DOM. If you are using Paging Control with the DataGrid, please note that \"loadMoreOnScroll\" scroll-policy is not compatible with Paging Control \"loadMore\" mode.",
              "displayName": "Load More On Scroll"
            },
            "scroll": {
              "description": "virtual scrolling is used meaning only rows/columns visible in the viewport are fetched and kept in the DOM",
              "displayName": "Scroll"
            }
          }
        },
        "scrollPolicyOptions": {
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches.",
          "type": "object|null",
          "displayName": "Scroll Policy Options",
          "help": "scrollPolicyOptions",
          "properties": {
            "maxColumnCount": {
              "description": "The maximum number of columns to display before fetching more data rows will be stopped.",
              "type": "number",
              "displayName": "Max Column Count",
              "value": 500,
              "minimum": -1,
              "help": "scrollPolicyOptions.maxColumnCount"
            },
            "maxRowCount": {
              "description": "The maximum number of rows to display before fetching more data rows will be stopped.",
              "type": "number",
              "displayName": "Max Row Count",
              "value": 500,
              "minimum": -1,
              "help": "scrollPolicyOptions.maxRowCount"
            }
          }
        },
        "scrollPosition": {
          "description": "Specifies the current scroll position of the data grid. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Scroll Position",
          "value": {
            "x": 0,
            "y": 0
          },
          "writeback": true,
          "help": "scrollPosition",
          "properties": {
            "x": {
              "description": "the horizontal position in pixel",
              "type": "number"
            },
            "y": {
              "description": "the vertical position in pixel",
              "type": "number"
            },
            "rowIndex": {
              "description": "the zero-based row index of the cell at the origin of the grid. If scrollPolicy is set to 'loadMoreOnScroll' and the index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the list is reached and there's no more items to fetch.",
              "type": "number"
            },
            "columnIndex": {
              "description": "the zero-based column index of the cell at the origin of the grid. If scrollPolicy is set to 'loadMoreOnScroll' and the index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the list is reached and there's no more items to fetch.",
              "type": "number"
            },
            "rowKey": {
              "description": "the row key of the cell at the origin of the grid. If DataGridDataSource is used for data and the key does not exist in the DataGridDataSource, then the value is ignored. If it is unknown in the data source then the grid will fetch and scroll until the item is found or the end of the axis is reached and there's no more items to fetch.",
              "type": "any"
            },
            "columnKey": {
              "description": "the column key of the cell at the origin of the grid. If DataGridDataSource is used for data and the key does not exist in the DataGridDataSource, then the value is ignored. If it is unknown in the data source then the grid will fetch and scroll until the item is found or the end of the axis is reached and there's no more items to fetch.",
              "type": "any"
            },
            "offsetX": {
              "description": "the horizontal offset in pixel relative to the cell identified by key/index.",
              "type": "number"
            },
            "offsetY": {
              "description": "the vertical offset in pixel relative to the cell identified by key/index.",
              "type": "number"
            }
          }
        },
        "selection": {
          "description": "Specifies the grid's current selection.",
          "type": "Array<Object>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the row and cell selection modes. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Selection Mode",
          "help": "selectionMode",
          "properties": {
            "cell": {
              "description": "Specifies the cell selection mode. By default, cell selection is disabled.",
              "type": "string",
              "displayName": "Cell",
              "value": "none",
              "help": "selectionMode.cell",
              "enumValues": [
                "multiple",
                "none",
                "single"
              ],
              "propertyEditorValues": {
                "multiple": {
                  "description": "any number of cells selected at a time",
                  "displayName": "Multiple"
                },
                "none": {
                  "description": "no cell selection",
                  "displayName": "None"
                },
                "single": {
                  "description": "at most one cell selected at a time",
                  "displayName": "Single"
                }
              }
            },
            "row": {
              "description": "Specifies the row selection mode. By default, row selection is disabled.",
              "type": "string",
              "displayName": "Row",
              "value": "none",
              "help": "selectionMode.row",
              "enumValues": [
                "multiple",
                "none",
                "single"
              ],
              "propertyEditorValues": {
                "multiple": {
                  "description": "any number of rows selected at a time",
                  "displayName": "Multiple"
                },
                "none": {
                  "description": "no row selection",
                  "displayName": "None"
                },
                "single": {
                  "description": "at most one row selected at a time",
                  "displayName": "Single"
                }
              }
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "accessibleActionableMode": {
              "description": "Provides properties to customize the accesible context to enter actionable mode. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleActionableMode"
            },
            "accessibleColumnContext": {
              "description": "Provides properties to customize the accesible context for the column index. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleColumnContext"
            },
            "accessibleColumnEndHeaderContext": {
              "description": "Provides properties to customize the accesible context for the column end header index. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleColumnEndHeaderContext"
            },
            "accessibleColumnEndHeaderLabelContext": {
              "description": "Provides properties to customize the accesible context for the column end header label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleColumnEndHeaderLabelContext"
            },
            "accessibleColumnHeaderContext": {
              "description": "Provides properties to customize the accesible context for the column header index. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleColumnHeaderContext"
            },
            "accessibleColumnHeaderLabelContext": {
              "description": "Provides properties to customize the accesible context for the column header label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleColumnHeaderLabelContext"
            },
            "accessibleColumnSelected": {
              "description": "Provides properties to customize the accesible context when a column is selected. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleColumnSelected"
            },
            "accessibleColumnSpanContext": {
              "description": "Provides properties to customize the accesible context for the cell column extent/span. See the translations option for usage examples.",
              "type": "string",
              "help": "translations.accessibleColumnSpanContext"
            },
            "accessibleFirstColumn": {
              "description": "Provides properties to customize the accesible context when the first column is reached. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleFirstColumn"
            },
            "accessibleFirstRow": {
              "description": "Provides properties to customize the accesible context when the first row is reached. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleFirstRow"
            },
            "accessibleLastColumn": {
              "description": "Provides properties to customize the accesible context when the last column is reached. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleLastColumn"
            },
            "accessibleLastRow": {
              "description": "Provides properties to customize the accesible context when the last row is reached. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleLastRow"
            },
            "accessibleLevelContext": {
              "description": "Provides properties to customize the accesible context for the header level. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleLevelContext"
            },
            "accessibleMultiCellSelected": {
              "description": "Provides properties to customize the accesible context when mulitple cells are selected. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleMultiCellSelected"
            },
            "accessibleNavigationMode": {
              "description": "Provides properties to customize the accesible context to enter navigation mode. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleNavigationMode"
            },
            "accessibleRangeSelectModeOff": {
              "description": "Provides properties to customize the accesible context for discontinuous selection off. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRangeSelectModeOff"
            },
            "accessibleRangeSelectModeOn": {
              "description": "Provides properties to customize the accesible context for discontinuous selection on. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRangeSelectModeOn"
            },
            "accessibleRowCollapsed": {
              "description": "Provides properties to customize the accesible context when a row is collapsed. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowCollapsed"
            },
            "accessibleRowContext": {
              "description": "Provides properties to customize the accesible context for the row index. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowContext"
            },
            "accessibleRowEndHeaderContext": {
              "description": "Provides properties to customize the accesible context for the row end header index. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowEndHeaderContext"
            },
            "accessibleRowEndHeaderLabelContext": {
              "description": "Provides properties to customize the accesible context for the row end header label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowEndHeaderLabelContext"
            },
            "accessibleRowExpanded": {
              "description": "Provides properties to customize the accesible context when a row is expanded. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowExpanded"
            },
            "accessibleRowHeaderContext": {
              "description": "Provides properties to customize the accesible context for the row header index. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowHeaderContext"
            },
            "accessibleRowHeaderLabelContext": {
              "description": "Provides properties to customize the accesible context for the row header label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowHeaderLabelContext"
            },
            "accessibleRowSelected": {
              "description": "Provides properties to customize the accesible context when a row is selected. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowSelected"
            },
            "accessibleRowSpanContext": {
              "description": "Provides properties to customize the accesible context for the cell extent/span. See the translations option for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowSpanContext"
            },
            "accessibleSelectionAffordanceBottom": {
              "description": "Provides properties to customize the accesible context for the bottom selection affordance on touch device. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleSelectionAffordanceBottom"
            },
            "accessibleSelectionAffordanceTop": {
              "description": "Provides properties to customize the accesible context for the top selection affordance on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleSelectionAffordanceTop"
            },
            "accessibleSortAscending": {
              "description": "Provides properties to customize the accesible text when a header is sorted ascending. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleSortAscending"
            },
            "accessibleSortDescending": {
              "description": "Provides properties to customize the accesible text when a header is sorted descending. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleSortDescending"
            },
            "accessibleStateSelected": {
              "description": "Provides properties to customize the accesible context when an item has been selected. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleStateSelected"
            },
            "accessibleSummaryEstimate": {
              "description": "Provides properties to customize the accesible context read when the exact row and column count are unknown. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleSummaryEstimate"
            },
            "accessibleSummaryExact": {
              "description": "Provides properties to customize the accesible context read when the exact row and column count are known. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleSummaryExact"
            },
            "accessibleSummaryExpanded": {
              "description": "Provides properties to customize the accesible context reading out the total number of rows expanded inside the data grid. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleSummaryExpanded"
            },
            "labelCut": {
              "description": "Provides properties to customize the context menu cut label for row reordering. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCut"
            },
            "labelDisableNonContiguous": {
              "description": "Provides properties to customize the context menu label for exiting non-contigous selection. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDisableNonContiguous"
            },
            "labelEnableNonContiguous": {
              "description": "Provides properties to customize the context menu label for entering non-contigous selection. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelEnableNonContiguous"
            },
            "labelPaste": {
              "description": "Provides properties to customize the context menu paste label for row reordering. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelPaste"
            },
            "labelResize": {
              "description": "Provides properties to customize the context menu resize label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelResize"
            },
            "labelResizeDialogSubmit": {
              "description": "Provides properties to customize the resize dialog submit button. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelResizeDialogSubmit"
            },
            "labelResizeHeight": {
              "description": "Provides properties to customize the context menu resize height label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelResizeHeight"
            },
            "labelResizeWidth": {
              "description": "Provides properties to customize the context menu resize width label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelResizeWidth"
            },
            "labelSortCol": {
              "description": "Provides properties to customize the context menu sort column label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSortCol"
            },
            "labelSortColAsc": {
              "description": "Provides properties to customize the context menu sort column ascending label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSortColAsc"
            },
            "labelSortColDsc": {
              "description": "Provides properties to customize the context menu sort column descending label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSortColDsc"
            },
            "labelSortRow": {
              "description": "Provides properties to customize the context menu sort row label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSortRow"
            },
            "labelSortRowAsc": {
              "description": "Provides properties to customize the context menu sort row ascending label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSortRowAsc"
            },
            "labelSortRowDsc": {
              "description": "Provides properties to customize the context menu sort row descending label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSortRowDsc"
            },
            "msgFetchingData": {
              "description": "Provides properties to customize the text when fetching data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgFetchingData"
            },
            "msgNoData": {
              "description": "Provides properties to customize the empty data grid text. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgNoData"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refresh the data grid.",
          "help": "refresh",
          "return": "void"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "the child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojResize": {
          "description": "Triggered when a portion of the DataGrid is resized.",
          "help": "resize",
          "detail": {
            "header": {
              "description": "the key of the header which was resized",
              "type": "string|number"
            },
            "oldDimensions": {
              "description": "the oldDimensions",
              "type": "object",
              "properties": {
                "width": {
                  "description": "the old pixel size (ex: '75px' would be 75)",
                  "type": "number"
                },
                "height": {
                  "description": "the old pixel size (ex: '75px' would be 75)",
                  "type": "number"
                }
              }
            },
            "newDimensions": {
              "description": "the newDimensions",
              "type": "object",
              "properties": {
                "width": {
                  "description": "the new pixel size (ex: '75px' would be 75)",
                  "type": "number"
                },
                "height": {
                  "description": "the new pixel size (ex: '75px' would be 75)",
                  "type": "number"
                }
              }
            }
          }
        },
        "ojSort": {
          "description": "Triggered when a sort is performed on the DataGrid.",
          "help": "sort",
          "detail": {
            "header": {
              "description": "the key of the header which was sorted on",
              "type": "any"
            },
            "direction": {
              "description": "the direction of the sort ascending/descending",
              "type": "'ascending'|'descending'"
            }
          }
        },
        "ojScroll": {
          "description": "Triggered after the DataGrid has been scrolled.",
          "help": "scroll",
          "detail": {
            "scrollX": {
              "description": "the x position in pixels of the scrollable region calculated from the origin of the DataGrid. In RTL this would be the right of the grid.",
              "type": "number"
            },
            "scrollY": {
              "description": "the y position in pixels of the scrollable region",
              "type": "number"
            }
          }
        },
        "ojBeforeCurrentCell": {
          "description": "Triggered before the current cell is changed.",
          "help": "beforeCurrentCell",
          "detail": {
            "currentCell": {
              "description": "the new current cell, see currentCell for the object information",
              "type": "object",
              "properties": {
                "type": {
                  "description": "designates whether a header or databody cell is the current cell",
                  "type": "\"cell\"|\"header\"|\"label\""
                },
                "axis": {
                  "description": "header axis, available if type is header or label",
                  "type": "\"column\"|\"columnEnd\"|\"row\"|\"rowEnd\""
                },
                "index": {
                  "description": "header index, available if type is header",
                  "type": "number"
                },
                "level": {
                  "description": "header level, available if type is header or label",
                  "type": "number"
                },
                "key": {
                  "description": "header key, available if type is header",
                  "type": "any"
                },
                "indexes": {
                  "description": "cell indexes, available if type is cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "cell row index",
                      "type": "number"
                    },
                    "column": {
                      "description": "cell column index",
                      "type": "number"
                    }
                  }
                },
                "keys": {
                  "description": "cell keys, available if type is cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "cell row key",
                      "type": "any"
                    },
                    "column": {
                      "description": "cell column key",
                      "type": "any"
                    }
                  }
                }
              }
            },
            "previousCurrentCell": {
              "description": "the previous current cell, see currentCell for the object information",
              "type": "object",
              "properties": {
                "type": {
                  "description": "designates whether a header or databody cell is the current cell",
                  "type": "\"cell\"|\"header\"|\"label\""
                },
                "axis": {
                  "description": "header axis, available if type is header or label",
                  "type": "\"column\"|\"columnEnd\"|\"row\"|\"rowEnd\""
                },
                "index": {
                  "description": "header index, available if type is header",
                  "type": "number"
                },
                "level": {
                  "description": "header level, available if type is header or label",
                  "type": "number"
                },
                "key": {
                  "description": "header key, available if type is header",
                  "type": "any"
                },
                "indexes": {
                  "description": "cell indexes, available if type is cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "cell row index",
                      "type": "number"
                    },
                    "column": {
                      "description": "cell column index",
                      "type": "number"
                    }
                  }
                },
                "keys": {
                  "description": "cell keys, available if type is cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "cell row key",
                      "type": "any"
                    },
                    "column": {
                      "description": "cell column key",
                      "type": "any"
                    }
                  }
                }
              }
            }
          }
        },
        "ojBeforeEdit": {
          "description": "Triggered before the DataGrid is going to enter edit mode.",
          "help": "beforeEdit",
          "detail": {
            "cellContext": {
              "description": "the cellContext of the cell that editing is going to be performed on",
              "type": "object",
              "properties": {
                "componentElement": {
                  "description": "a reference to the DataGrid root Element",
                  "type": "Element"
                },
                "parentElement": {
                  "description": "empty rendered cell element",
                  "type": "Element"
                },
                "cell": {
                  "description": "the container data object for the header",
                  "type": "object"
                },
                "data": {
                  "description": "the data object for the header",
                  "type": "any"
                },
                "datasource": {
                  "description": "a reference to the data source object",
                  "type": "object|null"
                },
                "indexes": {
                  "description": "the object that contains both the zero based row index and column index in which the cell is bound to",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the zero based absolute row index",
                      "type": "number"
                    },
                    "column": {
                      "description": "the zero based absolute column index",
                      "type": "number"
                    }
                  }
                },
                "keys": {
                  "description": "the object that contains both the row key and column key which identifies the cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the row key",
                      "type": "any"
                    },
                    "column": {
                      "description": "the column key",
                      "type": "any"
                    }
                  }
                },
                "extents": {
                  "description": "the object that contains both the row extent and column extent of the cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the row extent",
                      "type": "number"
                    },
                    "column": {
                      "description": "the column extent",
                      "type": "number"
                    }
                  }
                },
                "indexFromParent": {
                  "description": "if flattened tree data provider, the offset from the parent key",
                  "type": "number"
                },
                "parentKey": {
                  "description": "if flattened tree data provider, the parent row key",
                  "type": "K"
                },
                "treeDepth": {
                  "description": "if flattened tree data provider, the depth of the node",
                  "type": "number"
                },
                "isLeaf": {
                  "description": "if flattened tree data provider, true if it is a leaf node",
                  "type": "boolean"
                }
              }
            }
          }
        },
        "ojBeforeEditEnd": {
          "description": "Triggered before the DataGrid is going to exit edit mode. See the Help documentation for more information.",
          "help": "beforeEditEnd",
          "detail": {
            "cellContext": {
              "description": "the cellContext of the cell that editing is going to be performed on",
              "type": "object",
              "properties": {
                "componentElement": {
                  "description": "a reference to the DataGrid root Element",
                  "type": "Element"
                },
                "parentElement": {
                  "description": "empty rendered cell element",
                  "type": "Element"
                },
                "cell": {
                  "description": "the container data object for the header",
                  "type": "object"
                },
                "data": {
                  "description": "the data object for the header",
                  "type": "any"
                },
                "datasource": {
                  "description": "a reference to the data source object",
                  "type": "object|null"
                },
                "indexes": {
                  "description": "the object that contains both the zero based row index and column index in which the cell is bound to",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the zero based absolute row index",
                      "type": "number"
                    },
                    "column": {
                      "description": "the zero based absolute column index",
                      "type": "number"
                    }
                  }
                },
                "keys": {
                  "description": "the object that contains both the row key and column key which identifies the cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the row key",
                      "type": "any"
                    },
                    "column": {
                      "description": "the column key",
                      "type": "any"
                    }
                  }
                },
                "extents": {
                  "description": "the object that contains both the row extent and column extent of the cell",
                  "type": "object",
                  "properties": {
                    "row": {
                      "description": "the row extent",
                      "type": "number"
                    },
                    "column": {
                      "description": "the column extent",
                      "type": "number"
                    }
                  }
                },
                "indexFromParent": {
                  "description": "if flattened tree data provider, the offset from the parent key",
                  "type": "number"
                },
                "parentKey": {
                  "description": "if flattened tree data provider, the parent row key",
                  "type": "K"
                },
                "treeDepth": {
                  "description": "if flattened tree data provider, the depth of the node",
                  "type": "number"
                },
                "isLeaf": {
                  "description": "if flattened tree data provider, true if it is a leaf node",
                  "type": "boolean"
                }
              }
            },
            "cancelEdit": {
              "description": "true if the edit should be negated based on actions (i.e. escape key)",
              "type": "boolean"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-date-picker": {
      "name": "oj-date-picker",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Inline Date Picker",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatetimepicker"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "A date picker is an inline element for picking a date value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojDatePicker.html",
      "properties": {
        "asyncValidators": {
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "asyncValidators"
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "autofocus"
        },
        "converter": {
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "value": "oj.Validation.converterFactory('datetime').createConverter({\"day\":\"2-digit\",\"month\":\"2-digit\",\"year\":\"2-digit\"})",
          "help": "converter",
          "properties": {
            "type": {
              "description": "the converter type registered with the oj.ConverterFactory. Usually 'datetime'. See DateTimeConverterFactory for details. E.g., {converter: {type: 'datetime'}",
              "type": "string"
            },
            "options": {
              "description": "optional Object literal of options that the converter expects. See IntlDateTimeConverter for options supported by the jet datetime converter. E.g., {converter: {type: 'datetime', options: {formatType: 'date'}}",
              "type": "object"
            }
          }
        },
        "datePicker": {
          "description": "An object whose properties describe the appearance and behavior of the date picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Date Picker",
          "help": "datePicker",
          "properties": {
            "changeMonth": {
              "description": "Specifies whether the month should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Month",
              "value": "select",
              "help": "datePicker.changeMonth",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "month is rendered as a text",
                  "displayName": "None"
                },
                "select": {
                  "description": "month is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "changeYear": {
              "description": "Specifies whether the year should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Year",
              "value": "select",
              "help": "datePicker.changeYear",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "As text",
                  "displayName": "None"
                },
                "select": {
                  "description": "As a button",
                  "displayName": "Select"
                }
              }
            },
            "currentMonthPos": {
              "description": "Specifies the postion in multiple months at which to show the current month (starting at 0).",
              "type": "number",
              "displayName": "Current Month Pos",
              "value": 0,
              "maximum": 12,
              "minimum": 0,
              "help": "datePicker.currentMonthPos"
            },
            "daysOutsideMonth": {
              "description": "Specifies the behavior of days outside the current viewing month.",
              "type": "string",
              "displayName": "Days Outside Month",
              "value": "hidden",
              "help": "datePicker.daysOutsideMonth",
              "enumValues": [
                "hidden",
                "selectable",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "Days outside the current viewing month will be hidden",
                  "displayName": "Hidden"
                },
                "selectable": {
                  "description": "Days outside the current viewing month will be visible + selectable",
                  "displayName": "Selectable"
                },
                "visible": {
                  "description": "Days outside the current viewing month will be visible",
                  "displayName": "Visible"
                }
              }
            },
            "footerLayout": {
              "description": "Specifies what content is shown within the footer of the calendar.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "today",
              "help": "datePicker.footerLayout",
              "enumValues": [
                "",
                "today"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "today": {
                  "description": "Show the today button",
                  "displayName": "Today"
                }
              }
            },
            "numberOfMonths": {
              "description": "Specifies the number of months to show at once. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Number Of Months",
              "value": 1,
              "minimum": 1,
              "help": "datePicker.numberOfMonths"
            },
            "showOn": {
              "description": "Specifies when the date picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "datePicker.showOn",
              "enumValues": [
                "focus",
                "image"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger calendar image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger calendar image is clicked",
                  "displayName": "Image"
                }
              }
            },
            "stepBigMonths": {
              "description": "Specifies the number of months to step backwards and forwards for the Alt+Page Up and Alt+Page Down keystrokes.",
              "type": "number",
              "displayName": "Step Big Months",
              "value": 12,
              "help": "datePicker.stepBigMonths"
            },
            "stepMonths": {
              "description": "Specifies how the prev and next keys will step backwards and forwards through the months. See the Help documentation for more information.",
              "type": "string|number",
              "displayName": "Step Months",
              "value": "numberOfMonths",
              "help": "datePicker.stepMonths"
            },
            "weekDisplay": {
              "description": "Specifies whether the week of the year will be shown.",
              "type": "string",
              "displayName": "Week Display",
              "value": "none",
              "help": "datePicker.weekDisplay",
              "enumValues": [
                "none",
                "number"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "Nothing will be shown",
                  "displayName": "None"
                },
                "number": {
                  "description": "Will show the week of the year as a number",
                  "displayName": "Number"
                }
              }
            },
            "yearRange": {
              "description": "Specifies the range of years displayed in the year drop-down. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Year Range",
              "value": "c-10:c+10",
              "help": "datePicker.yearRange"
            }
          }
        },
        "dayFormatter": {
          "description": "Specifies a callback function used when rendering the day. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Day Formatter",
          "value": null,
          "help": "dayFormatter"
        },
        "dayMetaData": {
          "description": "Specifies additional information to be used when rendering the day. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Day Meta Data",
          "value": null,
          "help": "dayMetaData"
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "keyboardEdit": {
          "description": "Determines if keyboard entry of the text is allowed. When the datepicker is inline, the only supported value is \"disabled\".",
          "type": "string",
          "displayName": "Keyboard Edit",
          "value": "disabled",
          "help": "keyboardEdit",
          "enumValues": [
            "disabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Changing the date can only be done with the picker.",
              "displayName": "Disabled"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "max": {
          "description": "The maximum selectable date, in ISO string format. When set to null, there is no maximum.",
          "type": "string|null",
          "displayName": "Max",
          "value": null,
          "format": "date",
          "help": "max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "min": {
          "description": "The minimum selectable date, in ISO string format. When set to null, there is no minimum.",
          "type": "string|null",
          "displayName": "Min",
          "value": null,
          "format": "date",
          "help": "min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "name"
        },
        "pickerAttributes": {
          "description": "Specifies attributes to be set on the picker DOM element when it is launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "pickerAttributes",
          "properties": {
            "style": {
              "description": "Deprecated: this property is deprecated since 7.0.0 and will be removed in the future. Please use the \"class\" property to set a CSS class instead.",
              "type": "string"
            },
            "class": {
              "description": "",
              "type": "string"
            }
          }
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "help": "placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "renderMode": {
          "description": "Specifies whether to render the date picker in JET, or as a native picker control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Render Mode",
          "value": "jet",
          "help": "renderMode",
          "enumValues": [
            "jet"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Applications get full JET functionality.",
              "displayName": "Jet"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "currentText": {
              "description": "The text to display for the current day link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.currentText"
            },
            "dateRestriction": {
              "description": "Provides properties to customize the hint and message text used by the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.dateRestriction",
              "properties": {
                "hint": {
                  "description": "Hint text used by the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.hint"
                },
                "messageDetail": {
                  "description": "Message detail for the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.messageDetail"
                },
                "messageSummary": {
                  "description": "Message summary for the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.messageSummary"
                }
              }
            },
            "dateTimeRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.dateTimeRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.hint",
                  "properties": {
                    "inRange": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.messageDetail",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "nextText": {
              "description": "The text to display for the next month link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.nextText"
            },
            "prevText": {
              "description": "The text to display for the previous month link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.prevText"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            },
            "tooltipCalendar": {
              "description": "Tooltip text for the calendar icon. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendar"
            },
            "tooltipCalendarDisabled": {
              "description": "Tooltip text for the calendar icon when the component is disabled. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarDisabled"
            },
            "tooltipCalendarTime": {
              "description": "Tooltip text for the calendar + time icon. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarTime"
            },
            "tooltipCalendarTimeDisabled": {
              "description": "Tooltip text for the calendar + time icon when the component is disabled. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarTimeDisabled"
            },
            "weekHeader": {
              "description": "The text to display for the week of the year column heading. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.weekHeader"
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "description": "A list of validators used by the element, along with any implicit component validators, when performing validation. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "validators",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. ",
                  "type": "string"
                },
                "options": {
                  "description": "optional Object literal of options that the validator expects.",
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the date picker element, which must be an ISOString. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Value",
          "writeback": true,
          "format": "date",
          "help": "value"
        }
      },
      "methods": {
        "hide": {
          "description": "Hides the datepicker. Note that this function is a no-op when renderMode is 'native'.",
          "help": "hide",
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the element. Usually called after dom changes have been made.",
          "help": "refresh",
          "return": "void"
        },
        "show": {
          "description": "Shows the datepicker",
          "help": "show",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise<string>"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-date-time-picker": {
      "name": "oj-date-time-picker",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Inline Date Time Picker",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatetimepicker"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "A date time picker is an inline element for picking a date and time value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojDateTimePicker.html",
      "properties": {
        "asyncValidators": {
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "asyncValidators"
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "autofocus"
        },
        "converter": {
          "description": "An object that converts the datetime value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "value": "oj.Validation.converterFactory('datetime').createConverter({\"day\": \"2-digit\", \"month\": \"2-digit\", \"year\": \"2-digit\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"})",
          "help": "converter",
          "properties": {
            "type": {
              "description": "the name of the factory registered converter",
              "type": "string"
            },
            "options": {
              "description": "options to the converter",
              "type": "object"
            }
          }
        },
        "datePicker": {
          "description": "An object whose properties describe the appearance and behavior of the date picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Date Picker",
          "help": "datePicker",
          "properties": {
            "changeMonth": {
              "description": "Specifies whether the month should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Month",
              "value": "select",
              "help": "datePicker.changeMonth",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "month is rendered as a text",
                  "displayName": "None"
                },
                "select": {
                  "description": "month is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "changeYear": {
              "description": "Specifies whether the year should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Year",
              "value": "select",
              "help": "datePicker.changeYear",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "As text",
                  "displayName": "None"
                },
                "select": {
                  "description": "As a button",
                  "displayName": "Select"
                }
              }
            },
            "currentMonthPos": {
              "description": "Specifies the postion in multiple months at which to show the current month (starting at 0).",
              "type": "number",
              "displayName": "Current Month Pos",
              "value": 0,
              "maximum": 12,
              "minimum": 0,
              "help": "datePicker.currentMonthPos"
            },
            "daysOutsideMonth": {
              "description": "Specifies the behavior of days outside the current viewing month.",
              "type": "string",
              "displayName": "Days Outside Month",
              "value": "hidden",
              "help": "datePicker.daysOutsideMonth",
              "enumValues": [
                "hidden",
                "selectable",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "Days outside the current viewing month will be hidden",
                  "displayName": "Hidden"
                },
                "selectable": {
                  "description": "Days outside the current viewing month will be visible + selectable",
                  "displayName": "Selectable"
                },
                "visible": {
                  "description": "Days outside the current viewing month will be visible",
                  "displayName": "Visible"
                }
              }
            },
            "footerLayout": {
              "description": "Specifies what content is shown within the footer of the calendar.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "today",
              "help": "datePicker.footerLayout",
              "enumValues": [
                "",
                "today"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "today": {
                  "description": "Show the today button",
                  "displayName": "Today"
                }
              }
            },
            "numberOfMonths": {
              "description": "Specifies the number of months to show at once. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Number Of Months",
              "value": 1,
              "minimum": 1,
              "help": "datePicker.numberOfMonths"
            },
            "showOn": {
              "description": "Specifies when the date picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "datePicker.showOn",
              "enumValues": [
                "focus",
                "image"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger calendar image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger calendar image is clicked",
                  "displayName": "Image"
                }
              }
            },
            "stepBigMonths": {
              "description": "Specifies the number of months to step backwards and forwards for the Alt+Page Up and Alt+Page Down keystrokes.",
              "type": "number",
              "displayName": "Step Big Months",
              "value": 12,
              "help": "datePicker.stepBigMonths"
            },
            "stepMonths": {
              "description": "Specifies how the prev and next keys will step backwards and forwards through the months. See the Help documentation for more information.",
              "type": "string|number",
              "displayName": "Step Months",
              "value": "numberOfMonths",
              "help": "datePicker.stepMonths"
            },
            "weekDisplay": {
              "description": "Specifies whether the week of the year will be shown.",
              "type": "string",
              "displayName": "Week Display",
              "value": "none",
              "help": "datePicker.weekDisplay",
              "enumValues": [
                "none",
                "number"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "Nothing will be shown",
                  "displayName": "None"
                },
                "number": {
                  "description": "Will show the week of the year as a number",
                  "displayName": "Number"
                }
              }
            },
            "yearRange": {
              "description": "Specifies the range of years displayed in the year drop-down. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Year Range",
              "value": "c-10:c+10",
              "help": "datePicker.yearRange"
            }
          }
        },
        "dayFormatter": {
          "description": "Specifies a callback function used when rendering the day. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Day Formatter",
          "value": null,
          "help": "dayFormatter"
        },
        "dayMetaData": {
          "description": "Specifies additional information to be used when rendering the day. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Day Meta Data",
          "value": null,
          "help": "dayMetaData"
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "keyboardEdit": {
          "description": "Determines if keyboard entry of the text is allowed. When the datepicker is inline, the only supported value is \"disabled\".",
          "type": "string",
          "displayName": "Keyboard Edit",
          "value": "disabled",
          "help": "keyboardEdit",
          "enumValues": [
            "disabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Changing the date can only be done with the picker.",
              "displayName": "Disabled"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "max": {
          "description": "The maximum selectable datetime, in ISO string format. When set to null, there is no maximum.",
          "type": "string|null",
          "displayName": "Max",
          "value": null,
          "format": "date-time",
          "help": "max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "min": {
          "description": "The minimum selectable datetime, in ISO string format. When set to null, there is no minimum.",
          "type": "string|null",
          "displayName": "Min",
          "value": null,
          "format": "date-time",
          "help": "min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "name"
        },
        "pickerAttributes": {
          "description": "Specifies attributes to be set on the picker DOM element when it is launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "pickerAttributes",
          "properties": {
            "style": {
              "description": "Deprecated: this property is deprecated since 7.0.0 and will be removed in the future. Please use the \"class\" property to set a CSS class instead.",
              "type": "string"
            },
            "class": {
              "description": "",
              "type": "string"
            }
          }
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "help": "placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "renderMode": {
          "description": "Specifies whether to render the date picker in JET, or as a native picker control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Render Mode",
          "value": "jet",
          "help": "renderMode",
          "enumValues": [
            "jet"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Applications get full JET functionality.",
              "displayName": "Jet"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "timePicker": {
          "description": "An object whose properties describe the appearance and behavior of the time picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Time Picker",
          "help": "timePicker",
          "properties": {
            "footerLayout": {
              "description": "Specifies what content is shown within the footer of the wheel time picker.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "",
              "help": "timePicker.footerLayout",
              "enumValues": [
                "",
                "now"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "now": {
                  "description": "Show the now button",
                  "displayName": "Now"
                }
              }
            },
            "showOn": {
              "description": "Specifies when the time picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "timePicker.showOn",
              "enumValues": [
                "focus",
                "image"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger clock image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger clock image is clicked",
                  "displayName": "Image"
                }
              }
            },
            "timeIncrement": {
              "description": "Specifies the time increment used for InputDateTime. See the Help documenation for more information.",
              "type": "string",
              "displayName": "Time Increment",
              "value": "00:05:00:00",
              "help": "timePicker.timeIncrement"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "cancel": {
              "description": "The text to display for the Cancel link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.cancel"
            },
            "currentText": {
              "description": "The text to display for the current day link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.currentText"
            },
            "dateRestriction": {
              "description": "Provides properties to customize the hint and message text used by the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.dateRestriction",
              "properties": {
                "hint": {
                  "description": "Hint text used by the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.hint"
                },
                "messageDetail": {
                  "description": "Message detail for the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.messageDetail"
                },
                "messageSummary": {
                  "description": "Message summary for the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.messageSummary"
                }
              }
            },
            "dateTimeRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.dateTimeRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.hint",
                  "properties": {
                    "inRange": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.messageDetail",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "done": {
              "description": "The text to display for the switchers Done link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.done"
            },
            "nextText": {
              "description": "The text to display for the next month link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.nextText"
            },
            "prevText": {
              "description": "The text to display for the previous month link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.prevText"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            },
            "tooltipCalendar": {
              "description": "Tooltip text for the calendar icon. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendar"
            },
            "tooltipCalendarDisabled": {
              "description": "Tooltip text for the calendar icon when the component is disabled. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarDisabled"
            },
            "tooltipCalendarTime": {
              "description": "Tooltip text for the calendar + time icon. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarTime"
            },
            "tooltipCalendarTimeDisabled": {
              "description": "Tooltip text for the calendar + time icon when the component is disabled. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarTimeDisabled"
            },
            "weekHeader": {
              "description": "The text to display for the week of the year column heading. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.weekHeader"
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "description": "A list of validators used by the element, along with any implicit component validators, when performing validation. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "validators",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. ",
                  "type": "string"
                },
                "options": {
                  "description": "optional Object literal of options that the validator expects.",
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the datetime picker element, which must be an ISOString. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Value",
          "format": "date-time",
          "help": "value"
        }
      },
      "methods": {
        "show": {
          "description": "",
          "help": "show",
          "return": "void"
        },
        "showTimePicker": {
          "description": "Method to show the internally created InputTime",
          "help": "showTimePicker",
          "return": "void"
        },
        "hideTimePicker": {
          "description": "",
          "help": "hideTimePicker",
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the element. Usually called after dom changes have been made.",
          "help": "refresh",
          "return": "void"
        },
        "hide": {
          "description": "Hides the datepicker. Note that this function is a no-op when renderMode is 'native'.",
          "help": "hide",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise<string>"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-defer": {
      "name": "oj-defer",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Defer",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdefer"
        }
      },
      "description": "Defer is used to delay applying bindings to its children until it is activated. Child elements are disconnected from the DOM tree until the parent component activates its subtree.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojDefer.html"
    },
    "oj-diagram": {
      "name": "oj-diagram",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Diagram",
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdiagram"
        }
      },
      "description": "A diagram displays a set of nodes and the links between them. The node positions and link paths are specified by an application-provided layout function.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojDiagram.html",
      "properties": {
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the nodeTemplate or linkTemplate slots.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "data": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "Use nodeData and linkData instead."
            }
          ],
          "description": "Specifies the data for the component.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "dnd": {
          "description": "Used to customize the drag and drop features.",
          "type": "object",
          "displayName": "Dnd",
          "help": "dnd",
          "properties": {
            "drag": {
              "description": "Used to customize drag functionality.",
              "type": "object",
              "displayName": "Drag",
              "help": "dnd.drag",
              "properties": {
                "nodes": {
                  "description": "Used to customize the drag features for nodes.",
                  "type": "object",
                  "displayName": "Nodes",
                  "help": "dnd.drag.nodes",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME type for dragged data.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drag.nodes.dataTypes"
                    },
                    "drag": {
                      "description": "Optional handler for drag event.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null,
                      "help": "dnd.drag.nodes.drag"
                    },
                    "dragEnd": {
                      "description": "Optional handler for dragend event.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null,
                      "help": "dnd.drag.nodes.dragEnd"
                    },
                    "dragStart": {
                      "description": "Optional handler for dragstart event.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null,
                      "help": "dnd.drag.nodes.dragStart"
                    }
                  }
                },
                "ports": {
                  "description": "Defines link creation functionality.",
                  "type": "object",
                  "displayName": "Ports",
                  "help": "dnd.drag.ports",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME type for dragged data.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drag.ports.dataTypes"
                    },
                    "drag": {
                      "description": "Optional handler for drag event.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null,
                      "help": "dnd.drag.ports.drag"
                    },
                    "dragEnd": {
                      "description": "Optional handler for dragend event.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null,
                      "help": "dnd.drag.ports.dragEnd"
                    },
                    "dragStart": {
                      "description": "Optional handler for dragstart event.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null,
                      "help": "dnd.drag.ports.dragStart"
                    },
                    "linkStyle": {
                      "description": "Specifies link creation feedback.",
                      "type": "function",
                      "displayName": "Link Style",
                      "value": null,
                      "help": "dnd.drag.ports.linkStyle"
                    },
                    "selector": {
                      "description": "Specifies DOM element selector used to start link creation.",
                      "type": "string",
                      "displayName": "Selector",
                      "value": null,
                      "help": "dnd.drag.ports.selector"
                    }
                  }
                }
              }
            },
            "drop": {
              "description": "An object that describes drop functionality.",
              "type": "object",
              "displayName": "Drop",
              "help": "dnd.drop",
              "properties": {
                "background": {
                  "description": "Allows dropping on the diagram background.",
                  "type": "object",
                  "displayName": "Background",
                  "help": "dnd.drop.background",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME types of objects that can be dropped on the Diagram background.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drop.background.dataTypes"
                    },
                    "dragEnter": {
                      "description": "Optional handler for dragenter event.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "dnd.drop.background.dragEnter"
                    },
                    "dragLeave": {
                      "description": "Optional handler for dragleave event.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "dnd.drop.background.dragLeave"
                    },
                    "dragOver": {
                      "description": "Optional handler for dragover event.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "dnd.drop.background.dragOver"
                    },
                    "drop": {
                      "description": "Handler for drop event.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "dnd.drop.background.drop"
                    }
                  }
                },
                "links": {
                  "description": "Allows dropping on diagram links.",
                  "type": "object",
                  "displayName": "Links",
                  "help": "dnd.drop.links",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME types of objects that can be dropped on the Diagram links.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drop.links.dataTypes"
                    },
                    "dragEnter": {
                      "description": "Optional handler for dragenter event.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "dnd.drop.links.dragEnter"
                    },
                    "dragLeave": {
                      "description": "Optional handler for dragleave event.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "dnd.drop.links.dragLeave"
                    },
                    "dragOver": {
                      "description": "Optional handler for dragover event.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "dnd.drop.links.dragOver"
                    },
                    "drop": {
                      "description": "Handler for drop event.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "dnd.drop.links.drop"
                    }
                  }
                },
                "nodes": {
                  "description": "Allows dropping on diagram nodes.",
                  "type": "object",
                  "displayName": "Nodes",
                  "help": "dnd.drop.nodes",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME types of objects that can be dropped on the Diagram nodes.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drop.nodes.dataTypes"
                    },
                    "dragEnter": {
                      "description": "Optional handler for dragenter event.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "dnd.drop.nodes.dragEnter"
                    },
                    "dragLeave": {
                      "description": "Optional handler for dragleave event.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "dnd.drop.nodes.dragLeave"
                    },
                    "dragOver": {
                      "description": "Optional handler for dragover event.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "dnd.drop.nodes.dragOver"
                    },
                    "drop": {
                      "description": "Handler for drop event.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "dnd.drop.nodes.drop"
                    }
                  }
                },
                "ports": {
                  "description": "Allows dropping a link end on a port.",
                  "type": "object",
                  "displayName": "Ports",
                  "help": "dnd.drop.ports",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies MIME types of objects that can be dropped on the Diagram ports.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drop.ports.dataTypes"
                    },
                    "dragEnter": {
                      "description": "Optional handler for dragenter event.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "dnd.drop.ports.dragEnter"
                    },
                    "dragLeave": {
                      "description": "Optional handler for dragleave event.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "dnd.drop.ports.dragLeave"
                    },
                    "dragOver": {
                      "description": "Optional handler for dragover event.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "dnd.drop.ports.dragOver"
                    },
                    "drop": {
                      "description": "Handler for drop event.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "dnd.drop.ports.drop"
                    },
                    "selector": {
                      "description": "Specifies DOM element selector used for link creation end.",
                      "type": "string",
                      "displayName": "Selector",
                      "value": null,
                      "help": "dnd.drop.ports.selector"
                    }
                  }
                }
              }
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set of ids for expanded diagram nodes.",
          "type": "KeySet",
          "displayName": "Expanded",
          "value": "new KeySetImpl()",
          "writeback": true,
          "help": "expanded"
        },
        "focusRenderer": {
          "description": "Specifies custom renderer for the diagram nodes used for focus updates.",
          "type": "function|null",
          "displayName": "Focus Renderer",
          "value": null,
          "help": "focusRenderer"
        },
        "hiddenCategories": {
          "description": "Specifies categories used for filtering.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "hiddenCategories"
        },
        "highlightMatch": {
          "description": "Specifies matching condition used for category highlighting.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "Specifies categories used for highlighting.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over diagram nodes and links.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "hoverRenderer": {
          "description": "Specifies custom renderer for the diagram nodes used for hover updates.",
          "type": "function|null",
          "displayName": "Hover Renderer",
          "value": null,
          "help": "hoverRenderer"
        },
        "layout": {
          "description": "Specifies layout callback used to position nodes and links.",
          "type": "function",
          "displayName": "Layout",
          "help": "layout"
        },
        "linkData": {
          "description": "Specifies the DataProvider for the diagram links. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Link Data",
          "value": null,
          "help": "linkData"
        },
        "linkHighlightMode": {
          "description": "Defines link highlighting mode.",
          "type": "string",
          "displayName": "Link Highlight Mode",
          "value": "link",
          "help": "linkHighlightMode",
          "enumValues": [
            "link",
            "linkAndNodes"
          ],
          "propertyEditorValues": {
            "link": {
              "displayName": "Link"
            },
            "linkAndNodes": {
              "displayName": "Link And Nodes"
            }
          }
        },
        "linkProperties": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "See nodeData and linkData usage."
            }
          ],
          "description": "Optional callback for customizing link appearance based on link data.",
          "type": "null|function",
          "displayName": "Link Properties",
          "value": null,
          "help": "linkProperties"
        },
        "maxZoom": {
          "description": "Specifies the maximum zoom level for this diagram.",
          "type": "number",
          "displayName": "Max Zoom",
          "value": 1,
          "help": "maxZoom"
        },
        "minZoom": {
          "description": "Specifies the minimum zoom level for this diagram.",
          "type": "number",
          "displayName": "Min Zoom",
          "value": 0,
          "help": "minZoom"
        },
        "nodeData": {
          "description": "Specifies the DataProvider for the diagram nodes. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Node Data",
          "value": null,
          "help": "nodeData"
        },
        "nodeHighlightMode": {
          "description": "Defines node highlighting mode.",
          "type": "string",
          "displayName": "Node Highlight Mode",
          "value": "node",
          "help": "nodeHighlightMode",
          "enumValues": [
            "node",
            "nodeAndIncomingLinks",
            "nodeAndLinks",
            "nodeAndOutgoingLinks"
          ],
          "propertyEditorValues": {
            "node": {
              "displayName": "Node"
            },
            "nodeAndIncomingLinks": {
              "displayName": "Node And Incoming Links"
            },
            "nodeAndLinks": {
              "displayName": "Node And Links"
            },
            "nodeAndOutgoingLinks": {
              "displayName": "Node And Outgoing Links"
            }
          }
        },
        "nodeProperties": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "See nodeData and linkData usage."
            }
          ],
          "description": "Optional callback for customizing node appearance based on node data.",
          "type": "null|function",
          "displayName": "Node Properties",
          "value": null,
          "help": "nodeProperties"
        },
        "overview": {
          "description": "An object, used to define a diagram overview. If not specified, no overview will be shown.",
          "type": "object",
          "displayName": "Overview",
          "help": "overview",
          "properties": {
            "halign": {
              "description": "Horizontal alignment for diagram overview window",
              "type": "string",
              "displayName": "Halign",
              "value": "end",
              "help": "overview.halign",
              "enumValues": [
                "center",
                "end",
                "start"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "height": {
              "description": "Overview window height.",
              "type": "number",
              "displayName": "Height",
              "value": 100,
              "help": "overview.height"
            },
            "rendered": {
              "description": "Specifies whether the overview scrollbar is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "off",
              "help": "overview.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "valign": {
              "description": "Vertical alignment for diagram overview window",
              "type": "string",
              "displayName": "Valign",
              "value": "bottom",
              "help": "overview.valign",
              "enumValues": [
                "bottom",
                "middle",
                "top"
              ],
              "propertyEditorValues": {
                "bottom": {
                  "displayName": "Bottom"
                },
                "middle": {
                  "displayName": "Middle"
                },
                "top": {
                  "displayName": "Top"
                }
              }
            },
            "width": {
              "description": "Overview window width.",
              "type": "number",
              "displayName": "Width",
              "value": 200,
              "help": "overview.width"
            }
          }
        },
        "panDirection": {
          "description": "Specifies if panning allowed in horizontal and vertical directions.",
          "type": "string",
          "displayName": "Pan Direction",
          "value": "auto",
          "help": "panDirection",
          "enumValues": [
            "auto",
            "x",
            "y"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "x": {
              "displayName": "X"
            },
            "y": {
              "displayName": "Y"
            }
          }
        },
        "panning": {
          "description": "Specifies whether panning is allowed in Diagram.",
          "type": "string",
          "displayName": "Panning",
          "value": "none",
          "help": "panning",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "promotedLinkBehavior": {
          "description": "Defines promoted link behavior for the component.",
          "type": "string",
          "displayName": "Promoted Link Behavior",
          "value": "lazy",
          "help": "promotedLinkBehavior",
          "enumValues": [
            "full",
            "lazy",
            "none"
          ],
          "propertyEditorValues": {
            "full": {
              "displayName": "Full"
            },
            "lazy": {
              "displayName": "Lazy"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "renderer": {
          "description": "Specifies custom renderer for the diagram nodes used for initial rendering.",
          "type": "function",
          "displayName": "Renderer",
          "value": null,
          "help": "renderer"
        },
        "selection": {
          "description": "An array containing the ids of the selected nodes and links.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "displayName": "Multiple"
            },
            "none": {
              "displayName": "None"
            },
            "single": {
              "displayName": "Single"
            }
          }
        },
        "selectionRenderer": {
          "description": "Specifies custom renderer for the diagram nodes used for selection updates.",
          "type": "function|null",
          "displayName": "Selection Renderer",
          "value": null,
          "help": "selectionRenderer"
        },
        "styleDefaults": {
          "description": "An object defining the style defaults for this diagram.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "styleDefaults",
          "properties": {
            "animationDuration": {
              "description": "Defines animation duration in milliseconds.",
              "type": "number",
              "displayName": "Animation Duration",
              "units": "milliseconds",
              "help": "styleDefaults.animationDuration"
            },
            "hoverBehaviorDelay": {
              "description": "Specifies initial hover delay in milliseconds for highlighting data items.",
              "type": "number",
              "displayName": "Hover Behavior Delay",
              "value": 200,
              "units": "milliseconds",
              "help": "styleDefaults.hoverBehaviorDelay"
            },
            "linkDefaults": {
              "description": "Default link styles",
              "type": "object",
              "displayName": "Link Defaults",
              "help": "styleDefaults.linkDefaults",
              "properties": {
                "color": {
                  "description": "Default link color.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "styleDefaults.linkDefaults.color"
                },
                "endConnectorType": {
                  "description": "Specifies the type of end connector on the link.",
                  "type": "string",
                  "displayName": "End Connector Type",
                  "value": "none",
                  "help": "styleDefaults.linkDefaults.endConnectorType",
                  "enumValues": [
                    "arrow",
                    "arrowConcave",
                    "arrowOpen",
                    "circle",
                    "none",
                    "rectangle",
                    "rectangleRounded"
                  ],
                  "propertyEditorValues": {
                    "arrow": {
                      "displayName": "Arrow"
                    },
                    "arrowConcave": {
                      "displayName": "Arrow Concave"
                    },
                    "arrowOpen": {
                      "displayName": "Arrow Open"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "rectangleRounded": {
                      "displayName": "Rectangle Rounded"
                    }
                  }
                },
                "labelStyle": {
                  "description": "Specifies CSS styles for the link label.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "styleDefaults.linkDefaults.labelStyle"
                },
                "startConnectorType": {
                  "description": "Specifies the type of start connector on the link.",
                  "type": "string",
                  "displayName": "Start Connector Type",
                  "value": "none",
                  "help": "styleDefaults.linkDefaults.startConnectorType",
                  "enumValues": [
                    "arrow",
                    "arrowConcave",
                    "arrowOpen",
                    "circle",
                    "none",
                    "rectangle",
                    "rectangleRounded"
                  ],
                  "propertyEditorValues": {
                    "arrow": {
                      "displayName": "Arrow"
                    },
                    "arrowConcave": {
                      "displayName": "Arrow Concave"
                    },
                    "arrowOpen": {
                      "displayName": "Arrow Open"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "rectangleRounded": {
                      "displayName": "Rectangle Rounded"
                    }
                  }
                },
                "svgClassName": {
                  "description": "The default SVG CSS style class to apply to the link.",
                  "type": "string",
                  "displayName": "Svg Class Name",
                  "value": "",
                  "help": "styleDefaults.linkDefaults.svgClassName"
                },
                "svgStyle": {
                  "description": "Specifies SVG CSS styles for the link.",
                  "type": "object",
                  "displayName": "Svg Style",
                  "value": {},
                  "help": "styleDefaults.linkDefaults.svgStyle"
                },
                "width": {
                  "description": "Default link width in pixels.",
                  "type": "number",
                  "displayName": "Width",
                  "value": 1,
                  "units": "pixels",
                  "help": "styleDefaults.linkDefaults.width"
                }
              }
            },
            "nodeDefaults": {
              "description": "Default node styles",
              "type": "object",
              "displayName": "Node Defaults",
              "help": "styleDefaults.nodeDefaults",
              "properties": {
                "icon": {
                  "description": "Default style for the node icon.",
                  "type": "object",
                  "displayName": "Icon",
                  "help": "styleDefaults.nodeDefaults.icon",
                  "properties": {
                    "borderColor": {
                      "description": "Default border color of the icon.",
                      "type": "string",
                      "displayName": "Border Color",
                      "format": "color",
                      "help": "styleDefaults.nodeDefaults.icon.borderColor"
                    },
                    "borderRadius": {
                      "description": "Specifies default border radius of the icon.",
                      "type": "string",
                      "displayName": "Border Radius",
                      "help": "styleDefaults.nodeDefaults.icon.borderRadius"
                    },
                    "borderWidth": {
                      "description": "Default border width of the icon in pixels.",
                      "type": "number",
                      "displayName": "Border Width",
                      "units": "pixels",
                      "help": "styleDefaults.nodeDefaults.icon.borderWidth"
                    },
                    "color": {
                      "description": "Default color of the icon.",
                      "type": "string",
                      "displayName": "Color",
                      "format": "color",
                      "help": "styleDefaults.nodeDefaults.icon.color"
                    },
                    "height": {
                      "description": "Default icon height.",
                      "type": "number",
                      "displayName": "Height",
                      "value": 10,
                      "units": "pixels",
                      "help": "styleDefaults.nodeDefaults.icon.height"
                    },
                    "pattern": {
                      "description": "Default fill pattern of the icon.",
                      "type": "string",
                      "displayName": "Pattern",
                      "value": "none",
                      "help": "styleDefaults.nodeDefaults.icon.pattern",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ],
                      "propertyEditorValues": {
                        "largeChecker": {
                          "displayName": "Large Checker"
                        },
                        "largeCrosshatch": {
                          "displayName": "Large Crosshatch"
                        },
                        "largeDiagonalLeft": {
                          "displayName": "Large Diagonal Left"
                        },
                        "largeDiagonalRight": {
                          "displayName": "Large Diagonal Right"
                        },
                        "largeDiamond": {
                          "displayName": "Large Diamond"
                        },
                        "largeTriangle": {
                          "displayName": "Large Triangle"
                        },
                        "none": {
                          "displayName": "None"
                        },
                        "smallChecker": {
                          "displayName": "Small Checker"
                        },
                        "smallCrosshatch": {
                          "displayName": "Small Crosshatch"
                        },
                        "smallDiagonalLeft": {
                          "displayName": "Small Diagonal Left"
                        },
                        "smallDiagonalRight": {
                          "displayName": "Small Diagonal Right"
                        },
                        "smallDiamond": {
                          "displayName": "Small Diamond"
                        },
                        "smallTriangle": {
                          "displayName": "Small Triangle"
                        }
                      }
                    },
                    "shape": {
                      "description": "Specifies default shape of the icon.",
                      "type": "string",
                      "displayName": "Shape",
                      "value": "circle",
                      "help": "styleDefaults.nodeDefaults.icon.shape",
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "source": {
                      "description": "The URI of the node image",
                      "type": "string",
                      "displayName": "Source",
                      "help": "styleDefaults.nodeDefaults.icon.source"
                    },
                    "sourceHover": {
                      "description": "The optional URI of the node hover image.",
                      "type": "string",
                      "displayName": "Source Hover",
                      "help": "styleDefaults.nodeDefaults.icon.sourceHover"
                    },
                    "sourceHoverSelected": {
                      "description": "The optional URI of the selected image on hover.",
                      "type": "string",
                      "displayName": "Source Hover Selected",
                      "help": "styleDefaults.nodeDefaults.icon.sourceHoverSelected"
                    },
                    "sourceSelected": {
                      "description": "The optional URI of the selected image.",
                      "type": "string",
                      "displayName": "Source Selected",
                      "help": "styleDefaults.nodeDefaults.icon.sourceSelected"
                    },
                    "svgClassName": {
                      "description": "The SVG CSS style class to apply to the node icon.",
                      "type": "string",
                      "displayName": "Svg Class Name",
                      "value": "",
                      "help": "styleDefaults.nodeDefaults.icon.svgClassName"
                    },
                    "svgStyle": {
                      "description": "The default SVG CSS style object defining the style of the icon.",
                      "type": "object",
                      "displayName": "Svg Style",
                      "value": {},
                      "help": "styleDefaults.nodeDefaults.icon.svgStyle"
                    },
                    "width": {
                      "description": "Default icon width.",
                      "type": "number",
                      "displayName": "Width",
                      "value": 10,
                      "units": "pixels",
                      "help": "styleDefaults.nodeDefaults.icon.width"
                    }
                  }
                },
                "labelStyle": {
                  "description": "Specifies CSS styles for the node label.",
                  "type": "object",
                  "displayName": "Label Style",
                  "value": {},
                  "help": "styleDefaults.nodeDefaults.labelStyle"
                },
                "showDisclosure": {
                  "description": "Determines when to display the expand/collapse button.",
                  "type": "string",
                  "displayName": "Show Disclosure",
                  "value": "on",
                  "help": "styleDefaults.nodeDefaults.showDisclosure",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "promotedLink": {
              "description": "Promoted link styles",
              "type": "object",
              "displayName": "Promoted Link",
              "help": "styleDefaults.promotedLink",
              "properties": {
                "color": {
                  "description": "Default promoted link color. The default value varies based on theme.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "styleDefaults.promotedLink.color"
                },
                "endConnectorType": {
                  "description": "Specifies the type of end connector on the promoted link.",
                  "type": "string",
                  "displayName": "End Connector Type",
                  "value": "none",
                  "help": "styleDefaults.promotedLink.endConnectorType",
                  "enumValues": [
                    "arrow",
                    "arrowConcave",
                    "arrowOpen",
                    "circle",
                    "none",
                    "rectangle",
                    "rectangleRounded"
                  ],
                  "propertyEditorValues": {
                    "arrow": {
                      "displayName": "Arrow"
                    },
                    "arrowConcave": {
                      "displayName": "Arrow Concave"
                    },
                    "arrowOpen": {
                      "displayName": "Arrow Open"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "rectangleRounded": {
                      "displayName": "Rectangle Rounded"
                    }
                  }
                },
                "startConnectorType": {
                  "description": "Specifies the type of start connector on the promoted link.",
                  "type": "string",
                  "displayName": "Start Connector Type",
                  "value": "none",
                  "help": "styleDefaults.promotedLink.startConnectorType",
                  "enumValues": [
                    "arrow",
                    "arrowConcave",
                    "arrowOpen",
                    "circle",
                    "none",
                    "rectangle",
                    "rectangleRounded"
                  ],
                  "propertyEditorValues": {
                    "arrow": {
                      "displayName": "Arrow"
                    },
                    "arrowConcave": {
                      "displayName": "Arrow Concave"
                    },
                    "arrowOpen": {
                      "displayName": "Arrow Open"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "rectangleRounded": {
                      "displayName": "Rectangle Rounded"
                    }
                  }
                },
                "svgClassName": {
                  "description": "The SVG CSS style class to apply to the promoted link.",
                  "type": "string",
                  "displayName": "Svg Class Name",
                  "value": "",
                  "help": "styleDefaults.promotedLink.svgClassName"
                },
                "svgStyle": {
                  "description": "The promoted style object represents the CSS style of the link. User defined custom CSS Styles will be applied directly on the link.",
                  "type": "object",
                  "displayName": "Svg Style",
                  "value": {},
                  "help": "styleDefaults.promotedLink.svgStyle"
                },
                "width": {
                  "description": "Default link width in pixels.",
                  "type": "number",
                  "displayName": "Width",
                  "value": 1,
                  "units": "pixels",
                  "help": "styleDefaults.promotedLink.width"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "Specifies a function for a custom tooltip.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies touch response behavior.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "promotedLink": {
              "description": "Used for the promoted link tooltip - promoted link consists a single link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.promotedLink"
            },
            "promotedLinkAriaDesc": {
              "description": "Used to describe promoted link type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.promotedLinkAriaDesc"
            },
            "promotedLinks": {
              "description": "Used for the promoted link tooltip - promoted link consists multiple links. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.promotedLinks"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            }
          }
        },
        "zoomRenderer": {
          "description": "Specifies custom renderer for the diagram nodes used for zoom updates.",
          "type": "function|null",
          "displayName": "Zoom Renderer",
          "value": null,
          "help": "zoomRenderer"
        },
        "zooming": {
          "description": "Specifies whether zooming is allowed in Diagram.",
          "type": "string",
          "displayName": "Zooming",
          "value": "none",
          "help": "zooming",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "getNodeCount": {
          "description": "Returns number of diagram nodes",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getNodeCount",
          "return": "number"
        },
        "getNode": {
          "description": "Returns an object for automation testing verification of the specified diagram node. See the Help documentation for more information.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getNode",
          "params": [
            {
              "name": "nodeIndex",
              "description": "Node index",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getLinkCount": {
          "description": "Returns number of diagram links",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getLinkCount",
          "return": "number"
        },
        "getLink": {
          "description": "Returns an object for automation testing verification of the specified diagram link. See the Help documentation for more information.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getLink",
          "params": [
            {
              "name": "linkIndex",
              "description": "Link index",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getPromotedLink": {
          "description": "Returns an object for automation testing verification of the promoted link between the specified nodes. See the Help documentation for more information.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getPromotedLink",
          "params": [
            {
              "name": "startNodeIndex",
              "description": "Start node index",
              "type": "number"
            },
            {
              "name": "endNodeIndex",
              "description": "End node index",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeExpand": {
          "description": "Event handler for when a node is about to expand.",
          "cancelable": true,
          "help": "beforeExpand",
          "detail": {
            "nodeId": {
              "description": "the id of the expanding object",
              "type": "any"
            }
          }
        },
        "ojExpand": {
          "description": "Event handler for after a node has expanded.",
          "help": "expand",
          "detail": {
            "nodeId": {
              "description": "the id of the expanded object",
              "type": "any"
            }
          }
        },
        "ojBeforeCollapse": {
          "description": "Event handler for when a node is about to collapse.",
          "cancelable": true,
          "help": "beforeCollapse",
          "detail": {
            "nodeId": {
              "description": "the id of the collapsing object",
              "type": "any"
            }
          }
        },
        "ojCollapse": {
          "description": "Event handler for after a node has collapsed.",
          "help": "collapse",
          "detail": {
            "nodeId": {
              "description": "the id of the collapsed object",
              "type": "any"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "linkTemplate": {
          "description": "The linkTemplate slot is used to specify the template for creating each diagram link. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "linkTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-diagram> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current link.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current link.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current link.",
              "type": "any"
            }
          }
        },
        "nodeContentTemplate": {
          "description": "The nodeContentTemplate slot is used to specify custom node content. This slot takes precedence over the renderer/focusRenderer/hoverRenderer/selectionRenderer/zoomRenderer properties if specified. When the template is executed, the component's binding context is extended with the following properties: $current - an object that contains information for the current node. (See [oj.ojDiagram.RendererContext]ojDiagram.RendererContext for a list of properties available on $current) Add data-oj-default-focus, data-oj-default-hover and/or data-oj-default-selection attributes to the template to also render the default focus, hover and/or selection effect for the data item. Similarly, add oj-data-zoom-thresholds attribute to the template to set thresholds that will trigger a rerender when crossed. This should be a JSON array containing values between the min-zoom and max-zoom",
          "help": "nodeContentTemplate",
          "data": {
            "parentElement": {
              "description": "A parent group element that takes a custom SVG fragment as the node content. Modifications of the parentElement are not supported.",
              "type": "Element"
            },
            "componentElement": {
              "description": "The diagram element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the node. If oj.DataProvider is being used, this property contains template processed data.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the node. This will only be set if an oj.DataProvider is being used.",
              "type": "object|null"
            },
            "content": {
              "description": "An object that describes child content. The object has the following properties",
              "type": "object",
              "properties": {
                "element": {
                  "description": "SVG group element that contains child nodes for the container.",
                  "type": "Element"
                },
                "width": {
                  "description": "Width of the child content.",
                  "type": "number"
                },
                "height": {
                  "description": "Height of the child content.",
                  "type": "number"
                }
              }
            },
            "state": {
              "description": "An object that reflects the current state of the data item.",
              "type": "object",
              "properties": {
                "hovered": {
                  "description": "True if the node is currently hovered.",
                  "type": "boolean"
                },
                "selected": {
                  "description": "True if the node is currently selected.",
                  "type": "boolean"
                },
                "focused": {
                  "description": "True if the node is currently selected.",
                  "type": "boolean"
                },
                "expanded": {
                  "description": "True if the node is expanded.",
                  "type": "boolean"
                },
                "zoom": {
                  "description": "Current zoom state.",
                  "type": "number"
                }
              }
            },
            "previousState": {
              "description": "An object that reflects the previous state of the data item.",
              "type": "object",
              "properties": {
                "hovered": {
                  "description": "True if the node was previously hovered.",
                  "type": "boolean"
                },
                "selected": {
                  "description": "True if the node was previously selected.",
                  "type": "boolean"
                },
                "focused": {
                  "description": "True if the node was previously selected.",
                  "type": "boolean"
                },
                "expanded": {
                  "description": "True if the node was previously expanded.",
                  "type": "boolean"
                },
                "zoom": {
                  "description": "Previous zoom state.",
                  "type": "number"
                }
              }
            },
            "id": {
              "description": "Node id.",
              "type": "any"
            },
            "type": {
              "description": "Object type = node.",
              "type": "string"
            },
            "renderDefaultFocus": {
              "description": "Function for rendering default focus effect for the node",
              "type": "function"
            },
            "renderDefaultHover": {
              "description": "Function for rendering default hover effect for the node",
              "type": "function"
            },
            "renderDefaultSelection": {
              "description": "Function for rendering default selection effect for the node",
              "type": "function"
            }
          }
        },
        "nodeTemplate": {
          "description": "The nodeTemplate slot is used to specify the template for creating each diagram node. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "nodeTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-diagram> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current node.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current node.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node.",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data for the leaf and its parents. Eg: parentData[0] is the outermost parent and parentData[1] is the second outermost parent of the leaf.",
              "type": "array"
            },
            "parentKey": {
              "description": "The key of the parent item. The parent key is null for root nodes.",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "componentElement": {
              "description": "The diagram element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the diagram object.",
              "type": "any"
            },
            "type": {
              "description": "The type of the diagram object.",
              "type": "string"
            },
            "label": {
              "description": "The label of the diagram object.",
              "type": "string"
            },
            "data": {
              "description": "Relevant data for the object.",
              "type": "object|Array<Object>"
            },
            "itemData": {
              "description": "The row data object for the object. This will only be set if an oj.DataProvider is being used.",
              "type": "object|Array<Object>"
            }
          }
        }
      }
    },
    "oj-diagram-link": {
      "name": "oj-diagram-link",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Diagram Link",
      "type": "core",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdiagram"
        }
      },
      "description": "ojDiagramLink",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojDiagramLink.html",
      "properties": {
        "categories": {
          "description": "An array of category strings corresponding to this link. This allows highlighting and filtering of links. By default, the label is used as the link category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "help": "categories"
        },
        "color": {
          "description": "The link color.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "color"
        },
        "endConnectorType": {
          "description": "Specifies the type of end connector on the link. Can take the name of a built-in shape.",
          "type": "string",
          "displayName": "End Connector Type",
          "help": "endConnectorType",
          "enumValues": [
            "arrow",
            "arrowConcave",
            "arrowOpen",
            "circle",
            "none",
            "rectangle",
            "rectangleRounded"
          ],
          "propertyEditorValues": {
            "arrow": {
              "displayName": "Arrow"
            },
            "arrowConcave": {
              "displayName": "Arrow Concave"
            },
            "arrowOpen": {
              "displayName": "Arrow Open"
            },
            "circle": {
              "displayName": "Circle"
            },
            "none": {
              "displayName": "None"
            },
            "rectangle": {
              "displayName": "Rectangle"
            },
            "rectangleRounded": {
              "displayName": "Rectangle Rounded"
            }
          }
        },
        "endNode": {
          "description": "Specifies the end node id.",
          "type": "any",
          "displayName": "End Node",
          "help": "endNode"
        },
        "label": {
          "description": "Text used for the link label.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "label"
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the diagram link label. The default values come from the CSS classes and varies based on theme.",
          "type": "object|null",
          "displayName": "Label Style",
          "help": "labelStyle"
        },
        "selectable": {
          "description": "Specifies whether or not the link will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The text that displays in the link's tooltip.",
          "type": "string",
          "displayName": "Short Desc",
          "value": "",
          "help": "shortDesc"
        },
        "startConnectorType": {
          "description": "Specifies the type of start connector on the link. Can take the name of a built-in shape.",
          "type": "string",
          "displayName": "Start Connector Type",
          "help": "startConnectorType",
          "enumValues": [
            "arrow",
            "arrowConcave",
            "arrowOpen",
            "circle",
            "none",
            "rectangle",
            "rectangleRounded"
          ],
          "propertyEditorValues": {
            "arrow": {
              "displayName": "Arrow"
            },
            "arrowConcave": {
              "displayName": "Arrow Concave"
            },
            "arrowOpen": {
              "displayName": "Arrow Open"
            },
            "circle": {
              "displayName": "Circle"
            },
            "none": {
              "displayName": "None"
            },
            "rectangle": {
              "displayName": "Rectangle"
            },
            "rectangleRounded": {
              "displayName": "Rectangle Rounded"
            }
          }
        },
        "startNode": {
          "description": "Specifies the start node id.",
          "type": "any",
          "displayName": "Start Node",
          "help": "startNode"
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the link.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the link.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        },
        "width": {
          "description": "The link width in pixels.",
          "type": "number",
          "displayName": "Width",
          "units": "pixels",
          "help": "width"
        }
      }
    },
    "oj-diagram-node": {
      "name": "oj-diagram-node",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Diagram Node",
      "type": "core",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdiagram"
        }
      },
      "description": "ojDiagramNode",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojDiagramNode.html",
      "properties": {
        "categories": {
          "description": "An array of category strings corresponding to this node. This allows highlighting and filtering of nodes. By default, the label is used as the node category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "help": "categories"
        },
        "descendantsConnectivity": {
          "description": "Indicates whether the specified object contains links that should be discovered in order to display promoted links.",
          "type": "string",
          "displayName": "Descendants Connectivity",
          "value": "unknown",
          "help": "descendantsConnectivity",
          "enumValues": [
            "connected",
            "disjoint",
            "unknown"
          ],
          "propertyEditorValues": {
            "connected": {
              "displayName": "Connected"
            },
            "disjoint": {
              "displayName": "Disjoint"
            },
            "unknown": {
              "displayName": "Unknown"
            }
          }
        },
        "icon": {
          "description": "Specifies an icon to be used as a graphical element for the node",
          "type": "object",
          "displayName": "Icon",
          "value": {},
          "help": "icon",
          "properties": {
            "borderColor": {
              "description": "The border color of the icon.",
              "type": "string",
              "displayName": "Border Color",
              "format": "color",
              "help": "icon.borderColor"
            },
            "borderRadius": {
              "description": "The border radius of the icon. CSS border-radius values accepted. Note that non-% values (including unitless) get interpreted as 'px'.",
              "type": "string",
              "displayName": "Border Radius",
              "help": "icon.borderRadius"
            },
            "borderWidth": {
              "description": "The border width in pixels.",
              "type": "number",
              "displayName": "Border Width",
              "help": "icon.borderWidth"
            },
            "color": {
              "description": "The fill color of the icon.",
              "type": "string",
              "displayName": "Color",
              "help": "icon.color"
            },
            "height": {
              "description": "The height of the icon.",
              "type": "number",
              "displayName": "Height",
              "help": "icon.height"
            },
            "opacity": {
              "description": "The opacity of the icon.",
              "type": "number",
              "displayName": "Opacity",
              "help": "icon.opacity"
            },
            "pattern": {
              "description": "The fill pattern of the icon.",
              "type": "string",
              "displayName": "Pattern",
              "help": "icon.pattern"
            },
            "shape": {
              "description": "The shape of the icon. Can take the name of a built-in shape or the svg path commands for a custom shape.",
              "type": "string",
              "displayName": "Shape",
              "help": "icon.shape",
              "propertyEditorValues": {
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "ellipse": {
                  "displayName": "Ellipse"
                },
                "human": {
                  "displayName": "Human"
                },
                "plus": {
                  "displayName": "Plus"
                },
                "rectangle": {
                  "displayName": "Rectangle"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangleDown": {
                  "displayName": "Triangle Down"
                },
                "triangleUp": {
                  "displayName": "Triangle Up"
                }
              }
            },
            "source": {
              "description": "The URI of the node image.",
              "type": "string",
              "displayName": "Source",
              "help": "icon.source"
            },
            "sourceHover": {
              "description": "The optional URI of the node hover image. If not defined, the source image will be used.",
              "type": "string",
              "displayName": "Source Hover",
              "help": "icon.sourceHover"
            },
            "sourceHoverSelected": {
              "description": "The optional URI of the selected image on hover. If not defined, the sourceSelected image will be used. If the sourceSelected image is not defined, the source image will be used.",
              "type": "string",
              "displayName": "Source Hover Selected",
              "help": "icon.sourceHoverSelected"
            },
            "sourceSelected": {
              "description": "The optional URI of the selected image. If not defined, the source image will be used.",
              "type": "string",
              "displayName": "Source Selected",
              "help": "icon.sourceSelected"
            },
            "svgClassName": {
              "description": "The CSS style class defining the style of the icon. The style class and style object will be applied directly on the icon and override any other styling specified through the properties.",
              "type": "string",
              "displayName": "Svg Class Name",
              "help": "icon.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of the icon. The style class and style object will be applied directly on the icon and override any other styling specified through the properties.",
              "type": "object",
              "displayName": "Svg Style",
              "help": "icon.svgStyle"
            },
            "width": {
              "description": "The width of the icon.",
              "type": "number",
              "displayName": "Width",
              "help": "icon.width"
            }
          }
        },
        "label": {
          "description": "Text used for the node label.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "label"
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the diagram node label. The default values come from the CSS classes and varies based on theme.",
          "type": "object|null",
          "displayName": "Label Style",
          "help": "labelStyle"
        },
        "overview": {
          "description": "Specifies overview node shape.",
          "type": "object",
          "displayName": "Overview",
          "value": {},
          "help": "overview",
          "properties": {
            "icon": {
              "description": "Specifies overview node shape.",
              "type": "object",
              "displayName": "Icon",
              "help": "overview.icon",
              "properties": {
                "shape": {
                  "description": "The shape of the icon in the overview window. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Shape",
                  "help": "overview.icon.shape"
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of the node icon in the overview.",
                  "type": "string",
                  "displayName": "Svg Class Name",
                  "help": "overview.icon.svgClassName"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of the node icon in the overview.",
                  "type": "object",
                  "displayName": "Svg Style",
                  "help": "overview.icon.svgStyle"
                }
              }
            }
          }
        },
        "selectable": {
          "description": "Specifies whether or not the node will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The text that displays in the node's tooltip.",
          "type": "string",
          "displayName": "Short Desc",
          "value": "",
          "help": "shortDesc"
        },
        "showDisclosure": {
          "description": "Determines when to display the expand/collapse button.",
          "type": "string",
          "displayName": "Show Disclosure",
          "help": "showDisclosure",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        }
      }
    },
    "oj-dialog": {
      "name": "oj-dialog",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Dialog",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdialog"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-dialog-title"
          ],
          "description": "Class used to format the title. Automatically created headers use \" oj-dialog-title \" to format the title. For user-defined headers, you may want to use the \" oj-dialog-title \" so that the title in your user-defined header is stylistically similar to a default title."
        },
        {
          "styleGroup": [
            "oj-dialog-footer-separator"
          ],
          "description": "A separator between the dialog body and the dialog footer can be added by using a second style class (\"oj-dialog-footer-separator\") in the footer. So use: oj-dialog-footer oj-dialog-footer-separator to add a footer separator to the dialog. Note that for themes that have a built-in footer separator (specifically the iOS theme), this class has no effect. See the demo section for a live example of the footer separator."
        },
        {
          "styleGroup": [
            "oj-progress-bar-embedded"
          ],
          "description": "Optional markup. Used to format a progress bar embedded in the dialog header."
        },
        {
          "styleGroup": [
            "oj-focus-highlight"
          ],
          "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control. The \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load. The application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are: \"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value. \"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism. \"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result. To change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
        }
      ],
      "description": "A dialog displays a popup window that provides information and gathers input from the application user.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojDialog.html",
      "properties": {
        "cancelBehavior": {
          "description": "Specifies the cancel behavior of the dialog. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Cancel Behavior",
          "value": "icon",
          "help": "cancelBehavior",
          "enumValues": [
            "escape",
            "icon",
            "none"
          ],
          "propertyEditorValues": {
            "escape": {
              "description": "The dialog will close when it has focus and user presses the escape (ESC) key. A close icon will not be created.",
              "displayName": "Escape"
            },
            "icon": {
              "description": "A close icon will automatically be created. The dialog will close when it has focus and user presses the escape (ESC) key.",
              "displayName": "Icon"
            },
            "none": {
              "description": "A close icon will not be created. No actions will be associated with the escape key.",
              "displayName": "None"
            }
          }
        },
        "dialogTitle": {
          "description": "Specify the title of the dialog. null is the default.",
          "type": "string|null",
          "displayName": "Dialog Title",
          "help": "dialogTitle"
        },
        "dragAffordance": {
          "description": "Specifies the drag affordance. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drag Affordance",
          "value": "title-bar",
          "help": "dragAffordance",
          "enumValues": [
            "none",
            "title-bar"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "The dialog will not be draggable.",
              "displayName": "None"
            },
            "title-bar": {
              "description": "The dialog will be draggable by the title bar.",
              "displayName": "Title-bar"
            }
          }
        },
        "initialVisibility": {
          "description": "Set the initial visibility of the dialog.",
          "type": "string",
          "displayName": "Initial Visibility",
          "value": "hide",
          "help": "initialVisibility",
          "enumValues": [
            "hide",
            "show"
          ],
          "propertyEditorValues": {
            "hide": {
              "description": "The dialog will stay hidden until the open() method is called.",
              "displayName": "Hide"
            },
            "show": {
              "description": "The dialog will automatically open upon initialization.",
              "displayName": "Show"
            }
          }
        },
        "modality": {
          "description": "Defines the modality of the dialog.",
          "type": "string",
          "displayName": "Modality",
          "value": "modal",
          "help": "modality",
          "enumValues": [
            "modal",
            "modeless"
          ],
          "propertyEditorValues": {
            "modal": {
              "description": "The dialog is modal. Interactions with other page elements are disabled. Modal dialogs overlay other page elements.",
              "displayName": "Modal"
            },
            "modeless": {
              "description": "Defines a modeless dialog.",
              "displayName": "Modeless"
            }
          }
        },
        "position": {
          "description": "Establishes the location that the dialog will appear relative to another element. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Position",
          "help": "position",
          "properties": {
            "at": {
              "description": "Defines which position on the target element (\"of\") to align the positioned element against.",
              "type": "object",
              "displayName": "At",
              "help": "position.at",
              "properties": {
                "horizontal": {
                  "description": "",
                  "type": "string",
                  "displayName": "Horizontal",
                  "value": "center",
                  "help": "position.at.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "",
                  "type": "string",
                  "displayName": "Vertical",
                  "value": "center",
                  "help": "position.at.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "collision": {
              "description": "Rule for alternate alignment.",
              "type": "string",
              "displayName": "Collision",
              "value": "fit",
              "help": "position.collision",
              "enumValues": [
                "fit",
                "flip",
                "flipfit",
                "none"
              ],
              "propertyEditorValues": {
                "fit": {
                  "description": "Shift the element away from the edge of the window.",
                  "displayName": "Fit"
                },
                "flip": {
                  "description": "Flip the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.",
                  "displayName": "Flip"
                },
                "flipfit": {
                  "description": "First applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.",
                  "displayName": "Flipfit"
                },
                "none": {
                  "description": "No collision detection.",
                  "displayName": "None"
                }
              }
            },
            "my": {
              "description": "Defines which edge on the dialog to align with the target (\"of\") element.",
              "type": "object",
              "displayName": "My",
              "help": "position.my",
              "properties": {
                "horizontal": {
                  "description": "",
                  "type": "string",
                  "displayName": "Horizontal",
                  "value": "center",
                  "help": "position.my.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "",
                  "type": "string",
                  "displayName": "Vertical",
                  "value": "center",
                  "help": "position.my.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "of": {
              "description": "Specifies which element to position the dialog against. See the Help documentation for more information.",
              "type": "string|object",
              "displayName": "Of",
              "value": "window",
              "help": "position.of"
            },
            "offset": {
              "description": "Defines a point offset in pixels from the (\"my\") alignment.",
              "type": "object",
              "displayName": "Offset",
              "help": "position.offset",
              "properties": {
                "x": {
                  "description": "Horizontal aligment offset.",
                  "type": "number",
                  "displayName": "X",
                  "value": 0,
                  "help": "position.offset.x"
                },
                "y": {
                  "description": "Vertical alignment offset.",
                  "type": "number",
                  "displayName": "Y",
                  "value": 0,
                  "help": "position.offset.y"
                }
              }
            }
          }
        },
        "resizeBehavior": {
          "description": "Specifies the resizeBehavior of the dialog. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Resize Behavior",
          "value": "resizable",
          "help": "resizeBehavior",
          "enumValues": [
            "none",
            "resizable"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "The dialog will not be interactively resizable.",
              "displayName": "None"
            },
            "resizable": {
              "description": "Thie dialog will be interactively resizable.",
              "displayName": "Resizable"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "labelCloseIcon": {
              "description": "Label for the dialog close button. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCloseIcon"
            }
          }
        }
      },
      "methods": {
        "close": {
          "description": "Closes the dialog.",
          "help": "close",
          "return": "void"
        },
        "isOpen": {
          "description": "Returns true if the dialog is currently open.",
          "help": "isOpen",
          "return": "boolean"
        },
        "open": {
          "description": "Opens the dialog.",
          "help": "open",
          "return": "void"
        },
        "refresh": {
          "description": "Refresh the dialog. Typically used after dynamic content is added to a dialog.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeClose": {
          "description": "Triggered before the dialog is dismissed via the close() method. The close can be cancelled by calling event.preventDefault().",
          "bubbles": true,
          "cancelable": true,
          "help": "beforeClose",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojBeforeOpen": {
          "description": "Triggered before the dialog is launched via the open() method. The open can be cancelled by calling event.preventDefault().",
          "bubbles": true,
          "cancelable": true,
          "help": "beforeOpen",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojClose": {
          "description": "Triggered after the dialog is dismissed via the close() method.",
          "bubbles": true,
          "help": "close",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojFocus": {
          "description": "Triggered after focus has been transfered to the dialog.",
          "bubbles": true,
          "help": "focus",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojOpen": {
          "description": "Triggered after the dialog is launched via the open() method.",
          "bubbles": true,
          "cancelable": true,
          "help": "open",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojResize": {
          "description": "Triggered when the dialog is being resized. See the Help documentation for more information.",
          "bubbles": true,
          "help": "resize",
          "detail": {
            "originalEvent": {
              "description": "the underlying UI Event object",
              "type": "object"
            },
            "originalPosition": {
              "description": "the original CSS position of the dialog",
              "type": "object"
            },
            "originalSize": {
              "description": "the original size of the dialog",
              "type": "object"
            },
            "position": {
              "description": "the current CSS position of the dialog",
              "type": "object"
            },
            "size": {
              "description": "the current size of the dialog",
              "type": "object"
            }
          }
        },
        "ojResizeStart": {
          "description": "Triggered when the user starts resizing the dialog. See the Help documentation for more information.",
          "bubbles": true,
          "cancelable": true,
          "help": "resizeStart",
          "detail": {
            "originalEvent": {
              "description": "the underlying UI Event object",
              "type": "object"
            },
            "originalPosition": {
              "description": "the original CSS position of the dialog",
              "type": "object"
            },
            "originalSize": {
              "description": "the original size of the dialog",
              "type": "object"
            },
            "position": {
              "description": "the current CSS position of the dialog",
              "type": "object"
            },
            "size": {
              "description": "the current size of the dialog",
              "type": "object"
            }
          }
        },
        "ojResizeStop": {
          "description": "Triggered when the user stops resizing the dialog. See the Help documentation for more information.",
          "bubbles": true,
          "cancelable": true,
          "help": "resizeStop",
          "detail": {
            "originalEvent": {
              "description": "the underlying UI Event object",
              "type": "object"
            },
            "originalPosition": {
              "description": "the original CSS position of the dialog",
              "type": "object"
            },
            "originalSize": {
              "description": "the original size of the dialog",
              "type": "object"
            },
            "position": {
              "description": "the current CSS position of the dialog",
              "type": "object"
            },
            "size": {
              "description": "the current size of the dialog",
              "type": "object"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that is starting the animation. The number of actions can vary from component to component. Suggested values are: \"open\" - when a dialog component is opened \"close\" - when a dialog component is closed ",
              "type": "\"open\"|\"close\""
            },
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, It must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "action": {
              "description": "The action that is ending the animation. The number of actions can vary from component to component. Suggested values are: \"open\" - when a dialog component is opened \"close\" - when a dialog component is closed ",
              "type": "\"open\"|\"close\""
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The default slot is the dialog's body. It is the same as the named \"body\" slot.",
          "displayName": "default",
          "help": "Default"
        },
        "body": {
          "description": "The body slot is for the dialog's body area. See the Help documentation for more information.",
          "help": "body"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "footer": {
          "description": "The footer slot is for the dialog's footer area. See the Help documentation for more information.",
          "help": "footer"
        },
        "header": {
          "description": "The header slot is for the dialog's header area. See the Help documentation for more information.",
          "help": "header"
        }
      }
    },
    "oj-file-picker": {
      "name": "oj-file-picker",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "File Picker",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojfilepicker"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-filepicker-custom"
          ],
          "description": "Apply to a custom file picker if the entire dropzone is replaced with another clickable element like button or menu item. Note that the oj-filepicker-custom class doesn't have to be specified in order to change the dropzone text."
        },
        {
          "styleGroup": [
            "oj-filepicker-dropzone"
          ],
          "description": "Apply to the dropzone of the file picker."
        },
        {
          "styleGroup": [
            "oj-filepicker-text"
          ],
          "description": "Apply to the dropzone text of the file picker."
        }
      ],
      "description": "A file picker displays a clickable dropzone for selecting files from the device storage.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojFilePicker.html",
      "properties": {
        "accept": {
          "description": "An array of strings of allowed MIME types or file extensions that can be uploaded. If not specified, accept all file types",
          "type": "Array<string>|null",
          "displayName": "Accept",
          "value": null,
          "help": "accept"
        },
        "selectOn": {
          "description": "The type of event to select the files.",
          "type": "string",
          "displayName": "Select On",
          "value": "auto",
          "help": "selectOn",
          "enumValues": [
            "auto",
            "click",
            "clickAndDrop",
            "drop"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "either click or drag and drop to select the files",
              "displayName": "Auto"
            },
            "click": {
              "description": "click to select the files",
              "displayName": "Click"
            },
            "clickAndDrop": {
              "description": "either click or drag and drop to select the files",
              "displayName": "Click And Drop"
            },
            "drop": {
              "description": "drag and drop the files",
              "displayName": "Drop"
            }
          }
        },
        "selectionMode": {
          "description": "Whether to allow single or multiple file selection.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "multiple",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "multiple file selection",
              "displayName": "Multiple"
            },
            "single": {
              "description": "single file selection",
              "displayName": "Single"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojSelect": {
          "description": "Triggered after the files are selected",
          "help": "select",
          "detail": {
            "files": {
              "description": "The files that were just selected.",
              "type": "FileList"
            }
          }
        }
      },
      "slots": {
        "trigger": {
          "description": "The trigger slot is set on the custom content of the file picker.",
          "help": "trigger"
        }
      }
    },
    "oj-film-strip": {
      "name": "oj-film-strip",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Film Strip",
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojfilmstrip"
        }
      },
      "description": "A filmstrip lays out its children in a single row or column across logical pages and allows navigating through them.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojFilmStrip.html",
      "properties": {
        "arrowPlacement": {
          "description": "Specifies the placement of the navigation arrows.",
          "type": "string",
          "displayName": "Arrow Placement",
          "value": "adjacent",
          "help": "arrowPlacement",
          "enumValues": [
            "adjacent",
            "overlay"
          ],
          "propertyEditorValues": {
            "adjacent": {
              "description": "Arrows are outside, adjacent to the filmStrip content. The arrows are still inside the bounds of the filmStrip element itself.",
              "displayName": "Adjacent"
            },
            "overlay": {
              "description": "Arrows are inside, overlaying the filmStrip content.",
              "displayName": "Overlay"
            }
          }
        },
        "arrowVisibility": {
          "description": "Specifies the visibility of the navigation arrows.",
          "type": "string",
          "displayName": "Arrow Visibility",
          "value": "auto",
          "help": "arrowVisibility",
          "enumValues": [
            "auto",
            "hidden",
            "hover",
            "visible"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Behaves as if the value were visible when the arrow-placement attribute is set to adjacent, and hover when the arrow-placement attribute is set to overlay.",
              "displayName": "Auto"
            },
            "hidden": {
              "description": "Arrows are hidden.",
              "displayName": "Hidden"
            },
            "hover": {
              "description": "Arrows are visible when the mouse is over the filmStrip, and hidden otherwise.",
              "displayName": "Hover"
            },
            "visible": {
              "description": "Arrows are visible.",
              "displayName": "Visible"
            }
          }
        },
        "currentItem": {
          "description": "Specifies the child item whose logical page should be displayed.",
          "type": "object",
          "displayName": "Current Item",
          "value": {
            "index": 0
          },
          "writeback": true,
          "help": "currentItem",
          "properties": {
            "id": {
              "description": "string id of the item",
              "type": "string"
            },
            "index": {
              "description": "numeric 0-based index of the item",
              "type": "number"
            }
          }
        },
        "looping": {
          "description": "Specifies the navigation looping behavior",
          "type": "string",
          "displayName": "Looping",
          "value": "off",
          "help": "looping",
          "enumValues": [
            "off",
            "page"
          ],
          "propertyEditorValues": {
            "off": {
              "description": "Navigation is bounded between first and last page and can't go any further in the direction of navigation.",
              "displayName": "Off"
            },
            "page": {
              "description": "Navigation is not bounded between first and last page and can go further in the direction of navigation. This lets user to loop around from first page to last page or from last page to first page.",
              "displayName": "Page"
            }
          }
        },
        "maxItemsPerPage": {
          "description": "Specifies the maximum number of child items shown in a logical page.",
          "type": "number",
          "displayName": "Max Items Per Page",
          "value": 0,
          "minimum": 0,
          "units": "items",
          "help": "maxItemsPerPage"
        },
        "orientation": {
          "description": "Specifies the orientation of the FilmStrip.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "description": "Orient the FilmStrip horizontally.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "Orient the FilmStrip vertically.",
              "displayName": "Vertical"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "labelAccArrowNextPage": {
              "description": "Accessible label for the next page navigation arrow. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccArrowNextPage"
            },
            "labelAccArrowPreviousPage": {
              "description": "Accessible label for the previous page navigation arrow. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccArrowPreviousPage"
            },
            "labelAccFilmStrip": {
              "description": "Accessible page information label for the filmstrip element. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccFilmStrip"
            },
            "tipArrowNextPage": {
              "description": "Tooltip for the next page navigation arrow. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tipArrowNextPage"
            },
            "tipArrowPreviousPage": {
              "description": "Tooltip for the previous page navigation arrow. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tipArrowPreviousPage"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the visual state of the FilmStrip.",
          "help": "refresh",
          "return": "void"
        },
        "getItemsPerPage": {
          "description": "Get the actual number of items shown per logical page.",
          "help": "getItemsPerPage",
          "return": "number"
        },
        "getPagingModel": {
          "description": "Get the PagingModel created and used by the FilmStrip.",
          "help": "getPagingModel",
          "return": "object"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The <oj-film-strip> element lays out its children in a single row or column across logical pages and allows navigating through them.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-form-layout": {
      "name": "oj-form-layout",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Form Layout",
      "type": "core",
      "since": "4.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojformlayout"
        }
      },
      "description": "A form layout manages the layout of labels and fields in a form.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojFormLayout.html",
      "properties": {
        "direction": {
          "description": "Specifies the layout direction of the form layout children.",
          "type": "string",
          "displayName": "Direction",
          "value": "column",
          "help": "direction",
          "enumValues": [
            "column",
            "row"
          ],
          "propertyEditorValues": {
            "column": {
              "description": "Components are laid out in columns",
              "displayName": "Column"
            },
            "row": {
              "description": "Components are laid out in rows",
              "displayName": "Row"
            }
          }
        },
        "labelEdge": {
          "description": "Specifies how the label is aligned with its editable value component.",
          "type": "string",
          "displayName": "Label Edge",
          "value": "top",
          "help": "labelEdge",
          "enumValues": [
            "start",
            "top"
          ],
          "propertyEditorValues": {
            "start": {
              "description": "Label is inline with the start of its editable value component",
              "displayName": "Start"
            },
            "top": {
              "description": "Label is on top of its editable value component",
              "displayName": "Top"
            }
          }
        },
        "labelWidth": {
          "description": "Specifies the label width. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Width",
          "value": "33%",
          "help": "labelWidth"
        },
        "labelWrapping": {
          "description": "Specifies if the label text should wrap or truncate.",
          "type": "string",
          "displayName": "Label Wrapping",
          "value": "wrap",
          "help": "labelWrapping",
          "enumValues": [
            "truncate",
            "wrap"
          ],
          "propertyEditorValues": {
            "truncate": {
              "description": "Label will trunctate if needed",
              "displayName": "Truncate"
            },
            "wrap": {
              "description": "Label will wrap if needed",
              "displayName": "Wrap"
            }
          }
        },
        "maxColumns": {
          "description": "Specifies the maximum number of columns. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Max Columns",
          "value": 1,
          "minimum": 1,
          "help": "maxColumns"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the visual state of the component.",
          "help": "refresh",
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The <oj-form-layout> element only accepts element children in the Default slot. Content in <oj-form-layout>'s Default slot will be laid out in a row/column style form layout.",
          "displayName": "default",
          "help": "Default"
        }
      }
    },
    "oj-gantt": {
      "name": "oj-gantt",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Gantt",
      "type": "core",
      "since": "2.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgantt"
        }
      },
      "description": "A gantt displays scheduling information graphically, making it easier to plan, coordinate, and track various tasks and resources.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojGantt.html",
      "properties": {
        "animationOnDataChange": {
          "description": "Defines the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Defines the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the dependencyTemplate, taskTemplate, or rowTemplate slots.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "axisPosition": {
          "description": "The position of the major and minor axis.",
          "type": "string",
          "displayName": "Axis Position",
          "value": "top",
          "help": "axisPosition",
          "enumValues": [
            "bottom",
            "top"
          ],
          "propertyEditorValues": {
            "bottom": {
              "displayName": "Bottom"
            },
            "top": {
              "displayName": "Top"
            }
          }
        },
        "dependencies": {
          "description": "An array of objects that defines dependencies between tasks. See the Help documentation for more information.",
          "type": "Array<Object>|Promise",
          "displayName": "Dependencies",
          "value": null,
          "help": "dependencies",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The identifier for the dependency line. This must be unique across all dependency lines in Gantt. The id should be set by the application if the dependency-data oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                  "type": "any"
                },
                "predecessorTaskId": {
                  "description": "The identifier for the predecessor task. This must reference a task in Gantt.",
                  "type": "any"
                },
                "shortDesc": {
                  "description": "The description of the dependency line. This is used for accessibility.",
                  "type": "string",
                  "value": null
                },
                "successorTaskId": {
                  "description": "The identifier for the successor task. This must reference a task in Gantt.",
                  "type": "any"
                },
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes to apply to the dependency line.",
                  "type": "string",
                  "value": ""
                },
                "svgStyle": {
                  "description": "The CSS style defining the style of the dependency line.",
                  "type": "object",
                  "value": {}
                },
                "type": {
                  "description": "The type of dependency.",
                  "type": "string",
                  "value": "finishStart",
                  "enumValues": [
                    "finishFinish",
                    "finishStart",
                    "startFinish",
                    "startStart"
                  ]
                }
              }
            }
          }
        },
        "dependencyData": {
          "description": "Specifies the DataProvider for the dependencies of the Gantt. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Dependency Data",
          "value": null,
          "help": "dependencyData"
        },
        "dnd": {
          "description": "Enables drag and drop functionality.",
          "type": "object",
          "displayName": "Dnd",
          "help": "dnd",
          "properties": {
            "move": {
              "description": "Defines a subset of high level configurations for moving elements to another location within the Gantt.",
              "type": "object",
              "displayName": "Move",
              "help": "dnd.move",
              "properties": {
                "tasks": {
                  "description": "Enable or disable moving the non-baseline portions of tasks to a different location within the same Gantt.",
                  "type": "string",
                  "displayName": "Tasks",
                  "value": "disabled",
                  "help": "dnd.move.tasks",
                  "enumValues": [
                    "disabled",
                    "enabled"
                  ],
                  "propertyEditorValues": {
                    "disabled": {
                      "description": "Disable moving tasks",
                      "displayName": "Disabled"
                    },
                    "enabled": {
                      "description": "Enable moving tasks",
                      "displayName": "Enabled"
                    }
                  }
                }
              }
            }
          }
        },
        "end": {
          "description": "The end time of the Gantt. See the Help documentation for more information.",
          "type": "string",
          "displayName": "End",
          "value": "",
          "format": "date-time",
          "help": "end"
        },
        "expanded": {
          "description": "Specifies the key set of ids for expanded Gantt items.",
          "type": "KeySet",
          "displayName": "Expanded",
          "value": "new KeySetImpl()",
          "writeback": true,
          "help": "expanded"
        },
        "gridlines": {
          "description": "An object specifying whether to display or hide the horizontal and vertical grid lines.",
          "type": "object",
          "displayName": "Gridlines",
          "help": "gridlines",
          "properties": {
            "horizontal": {
              "description": "Specifies whether to show horizontal gridlines.",
              "type": "string",
              "displayName": "Horizontal",
              "value": "auto",
              "help": "gridlines.horizontal",
              "enumValues": [
                "auto",
                "hidden",
                "visible"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "hidden": {
                  "displayName": "Hidden"
                },
                "visible": {
                  "displayName": "Visible"
                }
              }
            },
            "vertical": {
              "description": "Specifies whether to show vertical gridlines.",
              "type": "string",
              "displayName": "Vertical",
              "value": "auto",
              "help": "gridlines.vertical",
              "enumValues": [
                "auto",
                "hidden",
                "visible"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "hidden": {
                  "displayName": "Hidden"
                },
                "visible": {
                  "displayName": "Visible"
                }
              }
            }
          }
        },
        "majorAxis": {
          "description": "Specifies the major time axis. If not specified, no major time axis is shown.",
          "type": "object",
          "displayName": "Major Axis",
          "help": "majorAxis",
          "properties": {
            "converter": {
              "description": "An object used to format the major axis labels. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "value": "{\"default\": null, \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}), \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}), \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}), \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})}",
              "help": "majorAxis.converter",
              "properties": {
                "default": {
                  "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object"
                },
                "seconds": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'seconds' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'})"
                },
                "minutes": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'minutes' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'})"
                },
                "hours": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'hours' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'})"
                },
                "days": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'days' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'})"
                },
                "weeks": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'weeks' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'})"
                },
                "months": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'months' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'})"
                },
                "quarters": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'quarters' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'})"
                },
                "years": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'years' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})"
                }
              }
            },
            "height": {
              "description": "Specifies the major axis height in pixels. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Height",
              "value": null,
              "units": "pixels",
              "help": "majorAxis.height"
            },
            "scale": {
              "description": "Specifies the major axis time scale.",
              "type": "string",
              "displayName": "Scale",
              "value": null,
              "help": "majorAxis.scale",
              "enumValues": [
                "days",
                "hours",
                "minutes",
                "months",
                "quarters",
                "seconds",
                "weeks",
                "years"
              ],
              "propertyEditorValues": {
                "days": {
                  "displayName": "Days"
                },
                "hours": {
                  "displayName": "Hours"
                },
                "minutes": {
                  "displayName": "Minutes"
                },
                "months": {
                  "displayName": "Months"
                },
                "quarters": {
                  "displayName": "Quarters"
                },
                "seconds": {
                  "displayName": "Seconds"
                },
                "weeks": {
                  "displayName": "Weeks"
                },
                "years": {
                  "displayName": "Years"
                }
              }
            },
            "zoomOrder": {
              "description": "An array of strings containing the names of scales used for zooming from longest to shortest. See the Help documentation for more information.",
              "type": "Array<string>",
              "displayName": "Zoom Order",
              "value": null,
              "help": "majorAxis.zoomOrder"
            }
          }
        },
        "minorAxis": {
          "description": "Specifies the minor time axis. This is required for the Gantt to render properly.",
          "type": "object",
          "displayName": "Minor Axis",
          "help": "minorAxis",
          "properties": {
            "converter": {
              "description": "An object used to format the minor axis labels. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "value": "{\"default\": null, \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}), \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}), \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}), \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})}",
              "help": "minorAxis.converter",
              "properties": {
                "default": {
                  "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object"
                },
                "seconds": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'seconds' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'})"
                },
                "minutes": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'minutes' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'})"
                },
                "hours": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'hours' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'})"
                },
                "days": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'days' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'})"
                },
                "weeks": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'weeks' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'})"
                },
                "months": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'months' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'})"
                },
                "quarters": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'quarters' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'})"
                },
                "years": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'years' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})"
                }
              }
            },
            "height": {
              "description": "Specifies the minor axis height in pixels. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Height",
              "value": null,
              "units": "pixels",
              "help": "minorAxis.height"
            },
            "scale": {
              "description": "Specifies the minor axis time scale. This is required for the Gantt to render properly.",
              "type": "string",
              "displayName": "Scale",
              "value": null,
              "help": "minorAxis.scale",
              "enumValues": [
                "days",
                "hours",
                "minutes",
                "months",
                "quarters",
                "seconds",
                "weeks",
                "years"
              ],
              "propertyEditorValues": {
                "days": {
                  "displayName": "Days"
                },
                "hours": {
                  "displayName": "Hours"
                },
                "minutes": {
                  "displayName": "Minutes"
                },
                "months": {
                  "displayName": "Months"
                },
                "quarters": {
                  "displayName": "Quarters"
                },
                "seconds": {
                  "displayName": "Seconds"
                },
                "weeks": {
                  "displayName": "Weeks"
                },
                "years": {
                  "displayName": "Years"
                }
              }
            },
            "zoomOrder": {
              "description": "An array of strings containing the names of scales used for zooming from longest to shortest. See the Help documentation for more information.",
              "type": "Array<string>",
              "displayName": "Zoom Order",
              "value": null,
              "help": "minorAxis.zoomOrder"
            }
          }
        },
        "referenceObjects": {
          "description": "The array of reference objects associated with the Gantt. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Reference Objects",
          "value": [],
          "help": "referenceObjects",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes defining the style of the reference object. Note that only CSS style applicable to SVG elements can be used.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS style defining the style of the reference object.",
                  "type": "object"
                },
                "value": {
                  "description": "The time value of this reference object. If not specified, no reference object will be shown. See Date and Time Formats for more details on required string formats.",
                  "type": "string"
                }
              }
            }
          }
        },
        "rowAxis": {
          "description": "Specifies properties for the row labels region.",
          "type": "object",
          "displayName": "Row Axis",
          "help": "rowAxis",
          "properties": {
            "label": {
              "description": "Specifies the properties of the row labels.",
              "type": "object",
              "displayName": "Label",
              "help": "rowAxis.label",
              "properties": {
                "renderer": {
                  "description": "An optional function that returns custom content for the row label. The custom content must be an SVG element.",
                  "type": "function",
                  "displayName": "Renderer",
                  "value": null,
                  "help": "rowAxis.label.renderer"
                }
              }
            },
            "maxWidth": {
              "description": "Specifies the maximum width of the region in pixels or as a percentage of the element width. If 'none', then the width has no maximum value. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Max Width",
              "value": "none",
              "help": "rowAxis.maxWidth"
            },
            "rendered": {
              "description": "Specifes whether row labels are rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "off",
              "help": "rowAxis.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "width": {
              "description": "Specifies the width of the region in pixels or as a percentage of the element width. If 'max-content', then the width of the widest label is used. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Width",
              "value": "max-content",
              "help": "rowAxis.width"
            }
          }
        },
        "rowDefaults": {
          "description": "Specifies default styling for rows in the Gantt.",
          "type": "object",
          "displayName": "Row Defaults",
          "help": "rowDefaults",
          "properties": {
            "height": {
              "description": "Specifes the default row height in pixels. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Height",
              "value": null,
              "units": "pixels",
              "help": "rowDefaults.height"
            }
          }
        },
        "rows": {
          "description": "An array of objects used to define rows and tasks within rows. See the Help documentation for more information.",
          "type": "Array<Object>|Promise",
          "displayName": "Rows",
          "value": null,
          "help": "rows",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                  "type": "any"
                },
                "tasks": {
                  "description": "An array of tasks. If not specified, no data will be shown. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the task is considered a milestone task. Note that values of analogous properties from task-defaults are used for any unspecified properties on the task, and values of any specified properties would override those from task-defaults.",
                  "type": "Array<Object>",
                  "properties": {
                    "id": {
                      "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render. The id should be set by the application if the task-data oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                      "type": "any"
                    },
                    "borderRadius": {
                      "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                      "type": "string"
                    },
                    "end": {
                      "description": "The task end time. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "height": {
                      "description": "The task height, in pixels. See the Help documentation for more information.",
                      "type": "number",
                      "units": "pixels"
                    },
                    "label": {
                      "description": "The label associated with the task.",
                      "type": "string",
                      "value": ""
                    },
                    "labelPosition": {
                      "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                      "type": "string",
                      "enumValues": [
                        "end",
                        "innerCenter",
                        "innerEnd",
                        "innerStart",
                        "none",
                        "start"
                      ]
                    },
                    "labelStyle": {
                      "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                      "type": "object",
                      "value": {}
                    },
                    "overlap": {
                      "description": "Configures the placement of this task relative to a task it overlaps with.",
                      "type": "object",
                      "properties": {
                        "behavior": {
                          "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                          "type": "string",
                          "enumValues": [
                            "auto",
                            "overlay",
                            "stack",
                            "stagger"
                          ]
                        }
                      }
                    },
                    "start": {
                      "description": "The task start time. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "shortDesc": {
                      "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                      "type": "string",
                      "value": null
                    },
                    "svgClassName": {
                      "description": "A space delimited list of CSS style classes defining the style of the task.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The CSS style defining the style of the task.",
                      "type": "object"
                    },
                    "type": {
                      "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                      "type": "string",
                      "enumValues": [
                        "auto",
                        "milestone",
                        "normal",
                        "summary"
                      ]
                    },
                    "progress": {
                      "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                      "type": "object",
                      "properties": {
                        "borderRadius": {
                          "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                          "type": "string"
                        },
                        "height": {
                          "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                          "type": "string"
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS inline style to apply to the progress bar.",
                          "type": "object"
                        },
                        "value": {
                          "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                          "type": "number",
                          "value": null
                        }
                      }
                    },
                    "baseline": {
                      "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                      "type": "object",
                      "properties": {
                        "borderRadius": {
                          "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                          "type": "string"
                        },
                        "end": {
                          "description": "The end time of the baseline. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "height": {
                          "description": "The height of the baseline in pixels.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "start": {
                          "description": "The start time of the baseline. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the baseline.",
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "label": {
                  "description": "The label associated with the row.",
                  "type": "string",
                  "value": ""
                },
                "labelStyle": {
                  "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                  "type": "object",
                  "value": {}
                }
              }
            }
          }
        },
        "scrollPosition": {
          "description": "The current scroll position of the Gantt. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Scroll Position",
          "value": {
            "y": 0
          },
          "writeback": true,
          "help": "scrollPosition",
          "properties": {
            "offsetY": {
              "description": "The vertical offset in pixels relative to the row identified by 'rowIndex'.",
              "type": "number",
              "displayName": "Offset Y",
              "value": null,
              "units": "pixels",
              "help": "scrollPosition.offsetY"
            },
            "rowIndex": {
              "description": "The zero-based index of the row.",
              "type": "number",
              "displayName": "Row Index",
              "value": null,
              "help": "scrollPosition.rowIndex"
            },
            "y": {
              "description": "The veritcal position in pixels.",
              "type": "number",
              "displayName": "Y",
              "value": 0,
              "units": "pixels",
              "help": "scrollPosition.y"
            }
          }
        },
        "selection": {
          "description": "An array of strings containing the ids of the initially selected tasks.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the selection behavior of the Gantt. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "displayName": "Multiple"
            },
            "none": {
              "displayName": "None"
            },
            "single": {
              "displayName": "Single"
            }
          }
        },
        "start": {
          "description": "The start time of the Gantt. A valid value is required for the Gantt to render properly. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Start",
          "value": "",
          "format": "date-time",
          "help": "start"
        },
        "taskData": {
          "description": "Specifies the DataProvider for the tasks of the Gantt. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Task Data",
          "value": null,
          "help": "taskData"
        },
        "taskDefaults": {
          "description": "Specifies default styling for tasks in the Gantt.",
          "type": "object",
          "displayName": "Task Defaults",
          "help": "taskDefaults",
          "properties": {
            "baseline": {
              "description": "Specifies default styling for task baseline elements.",
              "type": "object",
              "displayName": "Baseline",
              "help": "taskDefaults.baseline",
              "properties": {
                "borderRadius": {
                  "description": "The border radius of the baseline. Accepts valid CSS border-radius attribute values.",
                  "type": "string",
                  "displayName": "Border Radius",
                  "value": "0",
                  "help": "taskDefaults.baseline.borderRadius"
                },
                "height": {
                  "description": "Specifies the height of the baseline in pixels. If not specified, a default height is used based upon the baseline type.",
                  "type": "number",
                  "displayName": "Height",
                  "value": null,
                  "units": "pixels",
                  "help": "taskDefaults.baseline.height"
                },
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes defining the baseline style.",
                  "type": "string",
                  "displayName": "Svg Class Name",
                  "value": "",
                  "help": "taskDefaults.baseline.svgClassName"
                },
                "svgStyle": {
                  "description": "The CSS style defining the baseline style.",
                  "type": "object",
                  "displayName": "Svg Style",
                  "value": {},
                  "help": "taskDefaults.baseline.svgStyle"
                }
              }
            },
            "borderRadius": {
              "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
              "type": "string",
              "displayName": "Border Radius",
              "value": "0",
              "help": "taskDefaults.borderRadius"
            },
            "height": {
              "description": "The height of the task in pixels. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Height",
              "value": null,
              "units": "pixels",
              "help": "taskDefaults.height"
            },
            "labelPosition": {
              "description": "The position of the label relative to the task, or a priority order of label positions for the component to automatically choose from.",
              "type": "string|Array<string>",
              "displayName": "Label Position",
              "value": [
                "end",
                "innerCenter",
                "start",
                "max"
              ],
              "help": "taskDefaults.labelPosition",
              "enumValues": [
                "end",
                "innerCenter",
                "innerEnd",
                "innerStart",
                "none",
                "start"
              ],
              "propertyEditorValues": {
                "end": {
                  "displayName": "End"
                },
                "innerCenter": {
                  "displayName": "Inner Center"
                },
                "innerEnd": {
                  "displayName": "Inner End"
                },
                "innerStart": {
                  "displayName": "Inner Start"
                },
                "none": {
                  "displayName": "None"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "overlap": {
              "description": "Configures the placement of chronologically overlapping tasks.",
              "type": "object",
              "displayName": "Overlap",
              "help": "taskDefaults.overlap",
              "properties": {
                "behavior": {
                  "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Behavior",
                  "value": "auto",
                  "help": "taskDefaults.overlap.behavior",
                  "enumValues": [
                    "auto",
                    "overlay",
                    "stack",
                    "stagger"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "overlay": {
                      "displayName": "Overlay"
                    },
                    "stack": {
                      "displayName": "Stack"
                    },
                    "stagger": {
                      "displayName": "Stagger"
                    }
                  }
                },
                "offset": {
                  "description": "Specifies the vertical offset amount in pixels to be used when laying out overlapping tasks. See the Help documentation for more information.",
                  "type": "number",
                  "displayName": "Offset",
                  "value": null,
                  "units": "pixels",
                  "help": "taskDefaults.overlap.offset"
                }
              }
            },
            "progress": {
              "description": "Specifies default styling for progress bars on non-milestone tasks.",
              "type": "object",
              "displayName": "Progress",
              "help": "taskDefaults.progress",
              "properties": {
                "borderRadius": {
                  "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                  "type": "string",
                  "displayName": "Border Radius",
                  "value": "0",
                  "help": "taskDefaults.progress.borderRadius"
                },
                "height": {
                  "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Height",
                  "value": "100%",
                  "help": "taskDefaults.progress.height"
                },
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                  "type": "string",
                  "displayName": "Svg Class Name",
                  "value": "",
                  "help": "taskDefaults.progress.svgClassName"
                },
                "svgStyle": {
                  "description": "The CSS inline style to apply to the progress bar.",
                  "type": "object",
                  "displayName": "Svg Style",
                  "value": {},
                  "help": "taskDefaults.progress.svgStyle"
                }
              }
            },
            "resizable": {
              "description": "Enable or disable resizing of the non-baseline portions of tasks.",
              "type": "string",
              "displayName": "Resizable",
              "value": "disabled",
              "help": "taskDefaults.resizable",
              "enumValues": [
                "disabled",
                "enabled"
              ],
              "propertyEditorValues": {
                "disabled": {
                  "description": "Disable tasks resize",
                  "displayName": "Disabled"
                },
                "enabled": {
                  "description": "Enable tasks resize",
                  "displayName": "Enabled"
                }
              }
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes defining the style of the task.",
              "type": "string",
              "displayName": "Svg Class Name",
              "value": "",
              "help": "taskDefaults.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style defining the style of the task.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "taskDefaults.svgStyle"
            },
            "type": {
              "description": "The type of task to be rendered.",
              "type": "string",
              "displayName": "Type",
              "value": "auto",
              "help": "taskDefaults.type",
              "enumValues": [
                "auto",
                "milestone",
                "normal",
                "summary"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "milestone": {
                  "displayName": "Milestone"
                },
                "normal": {
                  "displayName": "Normal"
                },
                "summary": {
                  "displayName": "Summary"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "accessibleDependencyInfo": {
              "description": "Provides properties to customize the screen reader text describing a specific dependency. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleDependencyInfo"
            },
            "accessiblePredecessorInfo": {
              "description": "Provides properties to customize the screen reader text describing predecessors of a task. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessiblePredecessorInfo"
            },
            "accessibleSuccessorInfo": {
              "description": "Provides properties to customize the screen reader text describing successors of a task. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleSuccessorInfo"
            },
            "accessibleTaskTypeMilestone": {
              "description": "Used to describe milestone task type for accessibility. See the translations property for usage examples.",
              "type": "string",
              "help": "translations.accessibleTaskTypeMilestone"
            },
            "accessibleTaskTypeSummary": {
              "description": "Used to describe summary task type for accessibility. See the translations property for usage examples.",
              "type": "string",
              "help": "translations.accessibleTaskTypeSummary"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "finishFinishDependencyAriaDesc": {
              "description": "Used to describe finish to finish dependency type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.finishFinishDependencyAriaDesc"
            },
            "finishStartDependencyAriaDesc": {
              "description": "Used to describe finish to start dependency type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.finishStartDependencyAriaDesc"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelBaselineDate": {
              "description": "Used for the default tooltip label for baseline milestone information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelBaselineDate"
            },
            "labelBaselineEnd": {
              "description": "Used for the default tooltip label for baseline end time information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelBaselineEnd"
            },
            "labelBaselineStart": {
              "description": "Used for the default tooltip label for baseline start time information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelBaselineStart"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelDate": {
              "description": "Used for the default tooltip label for milestone information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDate"
            },
            "labelEnd": {
              "description": "Used for the default tooltip label for end time information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelEnd"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelLabel": {
              "description": "Used for the default tooltip label for task label information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelLabel"
            },
            "labelLevel": {
              "description": "Used to describe row level in a hierarchical gantt for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelLevel"
            },
            "labelMoveBy": {
              "description": "Used for the default tooltip label for task move scale change. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelMoveBy"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "labelProgress": {
              "description": "Used for the default tooltip label for task progress information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelProgress"
            },
            "labelResizeBy": {
              "description": "Used for the default tooltip label for task resize scale change. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelResizeBy"
            },
            "labelRow": {
              "description": "Used for the default tooltip label for row information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelRow"
            },
            "labelStart": {
              "description": "Used for the default tooltip label for start time information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelStart"
            },
            "startFinishDependencyAriaDesc": {
              "description": "Used to describe start to finish dependency type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.startFinishDependencyAriaDesc"
            },
            "startStartDependencyAriaDesc": {
              "description": "Used to describe start to start dependency type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.startStartDependencyAriaDesc"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            },
            "taskMoveCancelled": {
              "description": "Used to indicate task move is cancelled for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskMoveCancelled"
            },
            "taskMoveFinalized": {
              "description": "Used to indicate task move is finalized for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskMoveFinalized"
            },
            "taskMoveInitiated": {
              "description": "Used to indicate task move is initiated for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskMoveInitiated"
            },
            "taskMoveInitiatedInstruction": {
              "description": "Used to indicate task move instructions for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskMoveInitiatedInstruction"
            },
            "taskMoveSelectionInfo": {
              "description": "Used to indicate whether other tasks are also selected during move. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskMoveSelectionInfo"
            },
            "taskResizeCancelled": {
              "description": "Used to indicate task resize is cancelled for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskResizeCancelled"
            },
            "taskResizeEndHandle": {
              "description": "Used to indicate task end resize handle for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskResizeEndHandle"
            },
            "taskResizeEndInitiated": {
              "description": "Used to indicate task resize end is initiated for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskResizeEndInitiated"
            },
            "taskResizeFinalized": {
              "description": "Used to indicate task resize is finalized for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskResizeFinalized"
            },
            "taskResizeInitiatedInstruction": {
              "description": "Used to indicate task resize instructions for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskResizeInitiatedInstruction"
            },
            "taskResizeSelectionInfo": {
              "description": "Used to indicate whether other tasks are also selected during task resize. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskResizeSelectionInfo"
            },
            "taskResizeStartHandle": {
              "description": "Used to indicate task start resize handle for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskResizeStartHandle"
            },
            "taskResizeStartInitiated": {
              "description": "Used to indicate task resize start is initiated for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.taskResizeStartInitiated"
            },
            "tooltipZoomIn": {
              "description": "Used for the zoom in tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipZoomIn"
            },
            "tooltipZoomOut": {
              "description": "Used for the zoom out tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipZoomOut"
            }
          }
        },
        "valueFormats": {
          "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to task properties.",
          "type": "object",
          "displayName": "Value Formats",
          "help": "valueFormats",
          "properties": {
            "baselineDate": {
              "description": "Specifies tooltip behavior for the milestone baseline date value.",
              "type": "object",
              "displayName": "Baseline Date",
              "help": "valueFormats.baselineDate",
              "properties": {
                "converter": {
                  "description": "An object used to format the milestone baseline date value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.baselineDate.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the milestone baseline date value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.baselineDate.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the milestone baseline date value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.baselineDate.tooltipLabel"
                }
              }
            },
            "baselineEnd": {
              "description": "Specifies tooltip behavior for the baseline end value.",
              "type": "object",
              "displayName": "Baseline End",
              "help": "valueFormats.baselineEnd",
              "properties": {
                "converter": {
                  "description": "An object used to format the baseline end value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.baselineEnd.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the baseline end value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.baselineEnd.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the baseline end value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.baselineEnd.tooltipLabel"
                }
              }
            },
            "baselineStart": {
              "description": "Specifies tooltip behavior for the baseline start value.",
              "type": "object",
              "displayName": "Baseline Start",
              "help": "valueFormats.baselineStart",
              "properties": {
                "converter": {
                  "description": "An object used to format the baseline start value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.baselineStart.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the baseline start value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.baselineStart.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the baseline start value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.baselineStart.tooltipLabel"
                }
              }
            },
            "date": {
              "description": "Specifies tooltip behavior for the date value of a milestone task.",
              "type": "object",
              "displayName": "Date",
              "help": "valueFormats.date",
              "properties": {
                "converter": {
                  "description": "An object used to format the date value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.date.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the date value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.date.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the date value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.date.tooltipLabel"
                }
              }
            },
            "end": {
              "description": "Specifies tooltip behavior for the end value.",
              "type": "object",
              "displayName": "End",
              "help": "valueFormats.end",
              "properties": {
                "converter": {
                  "description": "An object used to format the end value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.end.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the end value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.end.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the end value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.end.tooltipLabel"
                }
              }
            },
            "label": {
              "description": "Specifies tooltip behavior for the label value.",
              "type": "object",
              "displayName": "Label",
              "help": "valueFormats.label",
              "properties": {
                "tooltipDisplay": {
                  "description": "Specifies whether the label value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.label.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the label value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.label.tooltipLabel"
                }
              }
            },
            "progress": {
              "description": "Specifies tooltip behavior for the progress value.",
              "type": "object",
              "displayName": "Progress",
              "help": "valueFormats.progress",
              "properties": {
                "converter": {
                  "description": "An object used to format the progress value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_NUMBER).createConverter({style: 'percent'})",
                  "help": "valueFormats.progress.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the progress value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.progress.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the progress value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.progress.tooltipLabel"
                }
              }
            },
            "row": {
              "description": "Specifies tooltip behavior for the row value.",
              "type": "object",
              "displayName": "Row",
              "help": "valueFormats.row",
              "properties": {
                "tooltipDisplay": {
                  "description": "Specifies whether the row value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.row.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the row value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.row.tooltipLabel"
                }
              }
            },
            "start": {
              "description": "Specifies tooltip behavior for the start value.",
              "type": "object",
              "displayName": "Start",
              "help": "valueFormats.start",
              "properties": {
                "converter": {
                  "description": "An object used to format the start value. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.start.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the start value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.start.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "The label to display before the start value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.start.tooltipLabel"
                }
              }
            }
          }
        },
        "viewportEnd": {
          "description": "The Gantt viewport end time. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Viewport End",
          "value": "",
          "format": "date-time",
          "help": "viewportEnd"
        },
        "viewportStart": {
          "description": "The Gantt viewport start time. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Viewport Start",
          "value": "",
          "format": "date-time",
          "help": "viewportStart"
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojViewportChange": {
          "description": "Triggered after the viewport is changed due to a zoom or scroll operation.",
          "bubbles": true,
          "help": "viewportChange",
          "detail": {
            "viewportStart": {
              "description": "the start of the new viewport on a gantt chart",
              "type": "string"
            },
            "viewportEnd": {
              "description": "the end of the new viewport on a gantt chart",
              "type": "string"
            },
            "majorAxisScale": {
              "description": "the time scale of the majorAxis",
              "type": "string"
            },
            "minorAxisScale": {
              "description": "the time scale of the minorAxis",
              "type": "string"
            }
          }
        },
        "ojMove": {
          "description": "Triggered after tasks are moved to a different location within the Gantt via a drag and drop operation or an equivalent keyboard action. See the Help documentation for more information.",
          "bubbles": true,
          "help": "move",
          "detail": {
            "taskContexts": {
              "description": "An array of dataContexts of the moved tasks. The first dataContext of the array corresponds to the source task where the move was initiated (e.g. the task directly under the mouse when drag started).",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object of the source task.",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render. The id should be set by the application if the task-data oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                          "type": "any"
                        },
                        "borderRadius": {
                          "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                          "type": "string"
                        },
                        "end": {
                          "description": "The task end time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "height": {
                          "description": "The task height, in pixels. See the Help documentation for more information.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "label": {
                          "description": "The label associated with the task.",
                          "type": "string",
                          "value": ""
                        },
                        "labelPosition": {
                          "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                          "type": "\"start\"|\"innerCenter\"|\"innerStart\"|\"innerEnd\"|\"end\"|\"none\""
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                          "type": "object",
                          "value": {}
                        },
                        "overlap": {
                          "description": "Configures the placement of this task relative to a task it overlaps with.",
                          "type": "object",
                          "properties": {
                            "behavior": {
                              "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                              "type": "\"stack\"|\"stagger\"|\"overlay\"|\"auto\""
                            }
                          }
                        },
                        "start": {
                          "description": "The task start time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "shortDesc": {
                          "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string",
                          "value": null
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the task.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the task.",
                          "type": "object"
                        },
                        "type": {
                          "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                          "type": "\"normal\"|\"milestone\"|\"summary\"|\"auto\""
                        },
                        "progress": {
                          "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "height": {
                              "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS inline style to apply to the progress bar.",
                              "type": "object"
                            },
                            "value": {
                              "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                              "type": "number",
                              "value": null
                            }
                          }
                        },
                        "baseline": {
                          "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The end time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The height of the baseline in pixels.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "start": {
                              "description": "The start time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the baseline.",
                              "type": "object"
                            }
                          }
                        }
                      }
                    },
                    "rowData": {
                      "description": "The data for the row the source task belongs to.",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                          "type": "any"
                        },
                        "tasks": {
                          "description": "An array of tasks. If not specified, no data will be shown. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the task is considered a milestone task. Note that values of analogous properties from task-defaults are used for any unspecified properties on the task, and values of any specified properties would override those from task-defaults.",
                          "type": "Array<Object>",
                          "properties": {
                            "id": {
                              "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render. The id should be set by the application if the task-data oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                              "type": "any"
                            },
                            "borderRadius": {
                              "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The task end time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The task height, in pixels. See the Help documentation for more information.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "label": {
                              "description": "The label associated with the task.",
                              "type": "string",
                              "value": ""
                            },
                            "labelPosition": {
                              "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                              "type": "\"start\"|\"innerCenter\"|\"innerStart\"|\"innerEnd\"|\"end\"|\"none\""
                            },
                            "labelStyle": {
                              "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                              "type": "object",
                              "value": {}
                            },
                            "overlap": {
                              "description": "Configures the placement of this task relative to a task it overlaps with.",
                              "type": "object",
                              "properties": {
                                "behavior": {
                                  "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                                  "type": "\"stack\"|\"stagger\"|\"overlay\"|\"auto\""
                                }
                              }
                            },
                            "start": {
                              "description": "The task start time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "shortDesc": {
                              "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                              "type": "string",
                              "value": null
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the task.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the task.",
                              "type": "object"
                            },
                            "type": {
                              "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                              "type": "\"normal\"|\"milestone\"|\"summary\"|\"auto\""
                            },
                            "progress": {
                              "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                                  "type": "string"
                                },
                                "height": {
                                  "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                                  "type": "string"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS inline style to apply to the progress bar.",
                                  "type": "object"
                                },
                                "value": {
                                  "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                                  "type": "number",
                                  "value": null
                                }
                              }
                            },
                            "baseline": {
                              "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                                  "type": "string"
                                },
                                "end": {
                                  "description": "The end time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "height": {
                                  "description": "The height of the baseline in pixels.",
                                  "type": "number",
                                  "units": "pixels"
                                },
                                "start": {
                                  "description": "The start time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the baseline.",
                                  "type": "object"
                                }
                              }
                            }
                          }
                        },
                        "label": {
                          "description": "The label associated with the row.",
                          "type": "string",
                          "value": ""
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                          "type": "object",
                          "value": {}
                        }
                      }
                    },
                    "itemData": {
                      "description": "The data provider row data object for the source task. This will only be set if an oj.DataProvider for task-data is being used.",
                      "type": "object|null"
                    },
                    "color": {
                      "description": "The color of the source task.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "value": {
              "description": "The value at the target position the source task is moved to. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "start": {
              "description": "The start value of the task, if the source task were to move to the target position. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "end": {
              "description": "The end value of the task, if the source task were to move to the target position. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "baselineStart": {
              "description": "The start value of the baseline, if the source task were to move to the target position. This is null if baseline is not defined on the task. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "baselineEnd": {
              "description": "The end value of the baseline, if the source task were to move to the target position. This is null if baseline is not defined on the task. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "rowContext": {
              "description": "The data context for the row at the target position.",
              "type": "object",
              "properties": {
                "rowData": {
                  "description": "The data for the target row.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                      "type": "any"
                    },
                    "tasks": {
                      "description": "An array of tasks. If not specified, no data will be shown. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the task is considered a milestone task. Note that values of analogous properties from task-defaults are used for any unspecified properties on the task, and values of any specified properties would override those from task-defaults.",
                      "type": "Array<Object>",
                      "extension": {
                        "vbdt": {
                          "itemProperties": {
                            "id": {
                              "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render. The id should be set by the application if the task-data oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                              "type": "any"
                            },
                            "borderRadius": {
                              "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The task end time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The task height, in pixels. See the Help documentation for more information.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "label": {
                              "description": "The label associated with the task.",
                              "type": "string",
                              "value": ""
                            },
                            "labelPosition": {
                              "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                              "type": "\"start\"|\"innerCenter\"|\"innerStart\"|\"innerEnd\"|\"end\"|\"none\""
                            },
                            "labelStyle": {
                              "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                              "type": "object",
                              "value": {}
                            },
                            "overlap": {
                              "description": "Configures the placement of this task relative to a task it overlaps with.",
                              "type": "object",
                              "properties": {
                                "behavior": {
                                  "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                                  "type": "\"stack\"|\"stagger\"|\"overlay\"|\"auto\""
                                }
                              }
                            },
                            "start": {
                              "description": "The task start time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "shortDesc": {
                              "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                              "type": "string",
                              "value": null
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the task.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the task.",
                              "type": "object"
                            },
                            "type": {
                              "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                              "type": "\"normal\"|\"milestone\"|\"summary\"|\"auto\""
                            },
                            "progress": {
                              "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                                  "type": "string"
                                },
                                "height": {
                                  "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                                  "type": "string"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS inline style to apply to the progress bar.",
                                  "type": "object"
                                },
                                "value": {
                                  "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                                  "type": "number",
                                  "value": null
                                }
                              }
                            },
                            "baseline": {
                              "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                                  "type": "string"
                                },
                                "end": {
                                  "description": "The end time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "height": {
                                  "description": "The height of the baseline in pixels.",
                                  "type": "number",
                                  "units": "pixels"
                                },
                                "start": {
                                  "description": "The start time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the baseline.",
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    },
                    "label": {
                      "description": "The label associated with the row.",
                      "type": "string",
                      "value": ""
                    },
                    "labelStyle": {
                      "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                      "type": "object",
                      "value": {}
                    }
                  }
                },
                "componentElement": {
                  "description": "The gantt element.",
                  "type": "Element"
                }
              }
            }
          }
        },
        "ojResize": {
          "description": "Triggered after tasks are resized.",
          "bubbles": true,
          "help": "resize",
          "detail": {
            "taskContexts": {
              "description": "An array of dataContexts of the resized tasks. The first dataContext of the array corresponds to the source task where the resize was initiated (e.g. the task directly under the mouse when drag started).",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object of the source task.",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render. The id should be set by the application if the task-data oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                          "type": "any"
                        },
                        "borderRadius": {
                          "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                          "type": "string"
                        },
                        "end": {
                          "description": "The task end time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "height": {
                          "description": "The task height, in pixels. See the Help documentation for more information.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "label": {
                          "description": "The label associated with the task.",
                          "type": "string",
                          "value": ""
                        },
                        "labelPosition": {
                          "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                          "type": "\"start\"|\"innerCenter\"|\"innerStart\"|\"innerEnd\"|\"end\"|\"none\""
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                          "type": "object",
                          "value": {}
                        },
                        "overlap": {
                          "description": "Configures the placement of this task relative to a task it overlaps with.",
                          "type": "object",
                          "properties": {
                            "behavior": {
                              "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                              "type": "\"stack\"|\"stagger\"|\"overlay\"|\"auto\""
                            }
                          }
                        },
                        "start": {
                          "description": "The task start time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "shortDesc": {
                          "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string",
                          "value": null
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the task.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the task.",
                          "type": "object"
                        },
                        "type": {
                          "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                          "type": "\"normal\"|\"milestone\"|\"summary\"|\"auto\""
                        },
                        "progress": {
                          "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "height": {
                              "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS inline style to apply to the progress bar.",
                              "type": "object"
                            },
                            "value": {
                              "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                              "type": "number",
                              "value": null
                            }
                          }
                        },
                        "baseline": {
                          "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The end time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The height of the baseline in pixels.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "start": {
                              "description": "The start time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the baseline.",
                              "type": "object"
                            }
                          }
                        }
                      }
                    },
                    "rowData": {
                      "description": "The data for the row the source task belongs to.",
                      "type": "object",
                      "properties": {
                        "id": {
                          "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                          "type": "any"
                        },
                        "tasks": {
                          "description": "An array of tasks. If not specified, no data will be shown. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the task is considered a milestone task. Note that values of analogous properties from task-defaults are used for any unspecified properties on the task, and values of any specified properties would override those from task-defaults.",
                          "type": "Array<Object>",
                          "properties": {
                            "id": {
                              "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render. The id should be set by the application if the task-data oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                              "type": "any"
                            },
                            "borderRadius": {
                              "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The task end time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The task height, in pixels. See the Help documentation for more information.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "label": {
                              "description": "The label associated with the task.",
                              "type": "string",
                              "value": ""
                            },
                            "labelPosition": {
                              "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                              "type": "\"start\"|\"innerCenter\"|\"innerStart\"|\"innerEnd\"|\"end\"|\"none\""
                            },
                            "labelStyle": {
                              "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                              "type": "object",
                              "value": {}
                            },
                            "overlap": {
                              "description": "Configures the placement of this task relative to a task it overlaps with.",
                              "type": "object",
                              "properties": {
                                "behavior": {
                                  "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                                  "type": "\"stack\"|\"stagger\"|\"overlay\"|\"auto\""
                                }
                              }
                            },
                            "start": {
                              "description": "The task start time. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "shortDesc": {
                              "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                              "type": "string",
                              "value": null
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the task.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the task.",
                              "type": "object"
                            },
                            "type": {
                              "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                              "type": "\"normal\"|\"milestone\"|\"summary\"|\"auto\""
                            },
                            "progress": {
                              "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                                  "type": "string"
                                },
                                "height": {
                                  "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                                  "type": "string"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS inline style to apply to the progress bar.",
                                  "type": "object"
                                },
                                "value": {
                                  "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                                  "type": "number",
                                  "value": null
                                }
                              }
                            },
                            "baseline": {
                              "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                              "type": "object",
                              "properties": {
                                "borderRadius": {
                                  "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                                  "type": "string"
                                },
                                "end": {
                                  "description": "The end time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "height": {
                                  "description": "The height of the baseline in pixels.",
                                  "type": "number",
                                  "units": "pixels"
                                },
                                "start": {
                                  "description": "The start time of the baseline. See the Help documentation for more information.",
                                  "type": "string",
                                  "value": "",
                                  "format": "date-time"
                                },
                                "svgClassName": {
                                  "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                                  "type": "string"
                                },
                                "svgStyle": {
                                  "description": "The CSS style defining the style of the baseline.",
                                  "type": "object"
                                }
                              }
                            }
                          }
                        },
                        "label": {
                          "description": "The label associated with the row.",
                          "type": "string",
                          "value": ""
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                          "type": "object",
                          "value": {}
                        }
                      }
                    },
                    "itemData": {
                      "description": "The data provider row data object for the source task. This will only be set if an oj.DataProvider for task-data is being used.",
                      "type": "object|null"
                    },
                    "color": {
                      "description": "The color of the source task.",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "type": {
              "description": "The type of resize, either 'start' or 'end'.",
              "type": "string"
            },
            "value": {
              "description": "The value at the target position. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "start": {
              "description": "The start value of the task (always chronologically before, or equivalent to, the end value), if the resize happened. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            },
            "end": {
              "description": "The end value of the task (always chronologically after, or equivalent to, the start value), if the resize happened. See Date and Time Formats for more details on the ISO string format.",
              "type": "string"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "dependencyTemplate": {
          "description": "The dependencyTemplate slot is used to specify the template for creating each dependency line of the Gantt. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "dependencyTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-gantt> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current dependency",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent dependency",
              "type": "number"
            },
            "key": {
              "description": "The key of the current dependency",
              "type": "any"
            }
          }
        },
        "rowAxisLabelTemplate": {
          "description": "The rowAxisLabelTemplate slot is used to specify custom row axis label content. See the Help documentation for more information.",
          "help": "rowAxisLabelTemplate",
          "data": {
            "parentElement": {
              "description": "A parent group element that takes a custom SVG fragment as the row label content. Modifications of the parentElement are not supported.",
              "type": "Element"
            },
            "rowData": {
              "description": "The data for the row.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                  "type": "any"
                },
                "tasks": {
                  "description": "An array of tasks. If not specified, no data will be shown. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the task is considered a milestone task. Note that values of analogous properties from task-defaults are used for any unspecified properties on the task, and values of any specified properties would override those from task-defaults.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render. The id should be set by the application if the task-data oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                          "type": "any"
                        },
                        "borderRadius": {
                          "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                          "type": "string"
                        },
                        "end": {
                          "description": "The task end time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "height": {
                          "description": "The task height, in pixels. See the Help documentation for more information.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "label": {
                          "description": "The label associated with the task.",
                          "type": "string",
                          "value": ""
                        },
                        "labelPosition": {
                          "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                          "type": "\"start\"|\"innerCenter\"|\"innerStart\"|\"innerEnd\"|\"end\"|\"none\""
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                          "type": "object",
                          "value": {}
                        },
                        "overlap": {
                          "description": "Configures the placement of this task relative to a task it overlaps with.",
                          "type": "object",
                          "properties": {
                            "behavior": {
                              "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                              "type": "\"stack\"|\"stagger\"|\"overlay\"|\"auto\""
                            }
                          }
                        },
                        "start": {
                          "description": "The task start time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "shortDesc": {
                          "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string",
                          "value": null
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the task.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the task.",
                          "type": "object"
                        },
                        "type": {
                          "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                          "type": "\"normal\"|\"milestone\"|\"summary\"|\"auto\""
                        },
                        "progress": {
                          "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "height": {
                              "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS inline style to apply to the progress bar.",
                              "type": "object"
                            },
                            "value": {
                              "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                              "type": "number",
                              "value": null
                            }
                          }
                        },
                        "baseline": {
                          "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The end time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The height of the baseline in pixels.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "start": {
                              "description": "The start time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the baseline.",
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "label": {
                  "description": "The label associated with the row.",
                  "type": "string",
                  "value": ""
                },
                "labelStyle": {
                  "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                  "type": "object",
                  "value": {}
                }
              }
            },
            "itemData": {
              "description": "An array of the data provider row data objects associated with the tasks belonging to the gantt row. This will only be set if an oj.DataProvider for task-data is being used.",
              "type": "Array<Object>|null"
            },
            "componentElement": {
              "description": "The gantt element.",
              "type": "Element"
            },
            "maxWidth": {
              "description": "The maximum available width in px, as constrained by the row-axis.width and row-axis.max-width values. If row-axis.width is 'max-content' and row-axis.max-width is 'none', then this is -1, and the component will automatically allocate enough width space to accommodate the content.",
              "type": "number"
            },
            "maxHeight": {
              "description": "The maximum available height in px.",
              "type": "number"
            }
          }
        },
        "rowTemplate": {
          "description": "The rowTemplate slot is used to specify the template for generating the row properties of the Gantt. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "rowTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-gantt> custom element",
              "type": "Element"
            },
            "index": {
              "description": "The row index",
              "type": "number"
            },
            "id": {
              "description": "The row id, if specified in the task template. Otherwise, it's the single task per row case, and this would be the task id.",
              "type": "any"
            },
            "tasks": {
              "description": "The array of objects which are gantt tasks that belong to this row. The objects will have the following properties",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object for the task",
                      "type": "object"
                    },
                    "index": {
                      "description": "The zero-based index of the task",
                      "type": "number"
                    },
                    "key": {
                      "description": "The key of the task",
                      "type": "any"
                    },
                    "parentData": {
                      "description": "An array of data objects of the outermost to innermost parents of the task.",
                      "type": "Array<Object>"
                    },
                    "parentKey": {
                      "description": "The key of the parent task. The parent key is null for root tasks.",
                      "type": "any"
                    }
                  }
                }
              }
            }
          }
        },
        "taskTemplate": {
          "description": "The taskTemplate slot is used to specify the template for creating each task of the Gantt. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "taskTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-gantt> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current task",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent task",
              "type": "number"
            },
            "key": {
              "description": "The key of the current task",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data objects of the outermost to innermost parents of the task.",
              "type": "Array<Object>"
            },
            "parentKey": {
              "description": "The key of the parent task. The parent key is null for root tasks.",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. This can be used to change the tooltip border or background color.",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the hovered task.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render. The id should be set by the application if the task-data oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                  "type": "any"
                },
                "borderRadius": {
                  "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                  "type": "string"
                },
                "end": {
                  "description": "The task end time. See the Help documentation for more information.",
                  "type": "string",
                  "value": "",
                  "format": "date-time"
                },
                "height": {
                  "description": "The task height, in pixels. See the Help documentation for more information.",
                  "type": "number",
                  "units": "pixels"
                },
                "label": {
                  "description": "The label associated with the task.",
                  "type": "string",
                  "value": ""
                },
                "labelPosition": {
                  "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                  "type": "\"start\"|\"innerCenter\"|\"innerStart\"|\"innerEnd\"|\"end\"|\"none\""
                },
                "labelStyle": {
                  "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                  "type": "object",
                  "value": {}
                },
                "overlap": {
                  "description": "Configures the placement of this task relative to a task it overlaps with.",
                  "type": "object",
                  "properties": {
                    "behavior": {
                      "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                      "type": "\"stack\"|\"stagger\"|\"overlay\"|\"auto\""
                    }
                  }
                },
                "start": {
                  "description": "The task start time. See the Help documentation for more information.",
                  "type": "string",
                  "value": "",
                  "format": "date-time"
                },
                "shortDesc": {
                  "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                  "type": "string",
                  "value": null
                },
                "svgClassName": {
                  "description": "A space delimited list of CSS style classes defining the style of the task.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS style defining the style of the task.",
                  "type": "object"
                },
                "type": {
                  "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                  "type": "\"normal\"|\"milestone\"|\"summary\"|\"auto\""
                },
                "progress": {
                  "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                  "type": "object",
                  "properties": {
                    "borderRadius": {
                      "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                      "type": "string"
                    },
                    "height": {
                      "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                      "type": "string"
                    },
                    "svgClassName": {
                      "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The CSS inline style to apply to the progress bar.",
                      "type": "object"
                    },
                    "value": {
                      "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                      "type": "number",
                      "value": null
                    }
                  }
                },
                "baseline": {
                  "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                  "type": "object",
                  "properties": {
                    "borderRadius": {
                      "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                      "type": "string"
                    },
                    "end": {
                      "description": "The end time of the baseline. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "height": {
                      "description": "The height of the baseline in pixels.",
                      "type": "number",
                      "units": "pixels"
                    },
                    "start": {
                      "description": "The start time of the baseline. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "svgClassName": {
                      "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The CSS style defining the style of the baseline.",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "rowData": {
              "description": "The data for the row the hovered task belongs to.",
              "type": "object",
              "properties": {
                "id": {
                  "description": "The identifier for the row. Optional if the row contains only one task. This must be unique across all rows in Gantt.",
                  "type": "any"
                },
                "tasks": {
                  "description": "An array of tasks. If not specified, no data will be shown. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the task is considered a milestone task. Note that values of analogous properties from task-defaults are used for any unspecified properties on the task, and values of any specified properties would override those from task-defaults.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "description": "The identifier for the task. This must be unique across all tasks in the Gantt, and is required in order for the Gantt to properly render. The id should be set by the application if the task-data oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                          "type": "any"
                        },
                        "borderRadius": {
                          "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
                          "type": "string"
                        },
                        "end": {
                          "description": "The task end time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "height": {
                          "description": "The task height, in pixels. See the Help documentation for more information.",
                          "type": "number",
                          "units": "pixels"
                        },
                        "label": {
                          "description": "The label associated with the task.",
                          "type": "string",
                          "value": ""
                        },
                        "labelPosition": {
                          "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
                          "type": "\"start\"|\"innerCenter\"|\"innerStart\"|\"innerEnd\"|\"end\"|\"none\""
                        },
                        "labelStyle": {
                          "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                          "type": "object",
                          "value": {}
                        },
                        "overlap": {
                          "description": "Configures the placement of this task relative to a task it overlaps with.",
                          "type": "object",
                          "properties": {
                            "behavior": {
                              "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
                              "type": "\"stack\"|\"stagger\"|\"overlay\"|\"auto\""
                            }
                          }
                        },
                        "start": {
                          "description": "The task start time. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "shortDesc": {
                          "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string",
                          "value": null
                        },
                        "svgClassName": {
                          "description": "A space delimited list of CSS style classes defining the style of the task.",
                          "type": "string"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining the style of the task.",
                          "type": "object"
                        },
                        "type": {
                          "description": "Defines the task type to be rendered. See the Help documentation for more information.",
                          "type": "\"normal\"|\"milestone\"|\"summary\"|\"auto\""
                        },
                        "progress": {
                          "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
                              "type": "string"
                            },
                            "height": {
                              "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
                              "type": "string"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes to apply to the progress bar.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS inline style to apply to the progress bar.",
                              "type": "object"
                            },
                            "value": {
                              "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
                              "type": "number",
                              "value": null
                            }
                          }
                        },
                        "baseline": {
                          "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
                          "type": "object",
                          "properties": {
                            "borderRadius": {
                              "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
                              "type": "string"
                            },
                            "end": {
                              "description": "The end time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "height": {
                              "description": "The height of the baseline in pixels.",
                              "type": "number",
                              "units": "pixels"
                            },
                            "start": {
                              "description": "The start time of the baseline. See the Help documentation for more information.",
                              "type": "string",
                              "value": "",
                              "format": "date-time"
                            },
                            "svgClassName": {
                              "description": "A space delimited list of CSS style classes defining the style of the baseline.",
                              "type": "string"
                            },
                            "svgStyle": {
                              "description": "The CSS style defining the style of the baseline.",
                              "type": "object"
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "label": {
                  "description": "The label associated with the row.",
                  "type": "string",
                  "value": ""
                },
                "labelStyle": {
                  "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
                  "type": "object",
                  "value": {}
                }
              }
            },
            "itemData": {
              "description": "The data provider row data object for the hovered task. This will only be set if an oj.DataProvider for task-data is being used.",
              "type": "object|null"
            },
            "componentElement": {
              "description": "The gantt element.",
              "type": "Element"
            },
            "color": {
              "description": "The color of the hovered task.",
              "type": "string"
            }
          }
        }
      }
    },
    "oj-gantt-dependency": {
      "name": "oj-gantt-dependency",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Gantt Dependency",
      "type": "core",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgantt"
        }
      },
      "description": "ojGanttDependency",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojGanttDependency.html",
      "properties": {
        "predecessorTaskId": {
          "description": "The identifier for the predecessor task. This must reference a task in Gantt.",
          "type": "any",
          "displayName": "Predecessor Task Id",
          "help": "predecessorTaskId"
        },
        "shortDesc": {
          "description": "The description of the dependency line. This is used for accessibility.",
          "type": "string",
          "displayName": "Short Desc",
          "value": null,
          "help": "shortDesc"
        },
        "successorTaskId": {
          "description": "The identifier for the successor task. This must reference a task in Gantt.",
          "type": "any",
          "displayName": "Successor Task Id",
          "help": "successorTaskId"
        },
        "svgClassName": {
          "description": "A space delimited list of CSS style classes to apply to the dependency line.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style defining the style of the dependency line.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        },
        "type": {
          "description": "The type of dependency.",
          "type": "string",
          "displayName": "Type",
          "value": "finishStart",
          "help": "type",
          "enumValues": [
            "finishFinish",
            "finishStart",
            "startFinish",
            "startStart"
          ],
          "propertyEditorValues": {
            "finishFinish": {
              "description": "predecessor task must finish before successor task can finish",
              "displayName": "Finish Finish"
            },
            "finishStart": {
              "description": "predecessor task must finish before successor task can start",
              "displayName": "Finish Start"
            },
            "startFinish": {
              "description": "predecessor task must start before successor task can finish",
              "displayName": "Start Finish"
            },
            "startStart": {
              "description": "predecessor task must start before successor task can start",
              "displayName": "Start Start"
            }
          }
        }
      }
    },
    "oj-gantt-row": {
      "name": "oj-gantt-row",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Gantt Row",
      "type": "core",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgantt"
        }
      },
      "description": "ojGanttRow",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojGanttRow.html",
      "properties": {
        "label": {
          "description": "The label associated with the row.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "label"
        },
        "labelStyle": {
          "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
          "type": "object",
          "displayName": "Label Style",
          "value": {},
          "help": "labelStyle"
        }
      }
    },
    "oj-gantt-task": {
      "name": "oj-gantt-task",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Gantt Task",
      "type": "core",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgantt"
        }
      },
      "description": "ojGanttTask",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojGanttTask.html",
      "properties": {
        "baseline": {
          "description": "Specifies the baseline of the task. When only one of 'start' or 'end' value is specified, or when 'start' and 'end' values are equal, the baseline is considered a milestone baseline.",
          "type": "object",
          "displayName": "Baseline",
          "help": "baseline",
          "properties": {
            "borderRadius": {
              "description": "The border radius of the baseline. Accepts values allowed in CSS border-radius attribute.",
              "type": "string",
              "displayName": "Border Radius",
              "help": "baseline.borderRadius"
            },
            "end": {
              "description": "The end time of the baseline. See the Help documentation for more information.",
              "type": "string",
              "displayName": "End",
              "value": "",
              "format": "date-time",
              "help": "baseline.end"
            },
            "height": {
              "description": "The height of the baseline in pixels.",
              "type": "number",
              "displayName": "Height",
              "units": "pixels",
              "help": "baseline.height"
            },
            "start": {
              "description": "The start time of the baseline. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Start",
              "value": "",
              "format": "date-time",
              "help": "baseline.start"
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes defining the style of the baseline.",
              "type": "string",
              "displayName": "Svg Class Name",
              "help": "baseline.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style defining the style of the baseline.",
              "type": "object",
              "displayName": "Svg Style",
              "help": "baseline.svgStyle"
            }
          }
        },
        "borderRadius": {
          "description": "The border radius of the task. Accepts valid CSS border-radius attribute values.",
          "type": "string",
          "displayName": "Border Radius",
          "help": "borderRadius"
        },
        "end": {
          "description": "The task end time. See the Help documentation for more information.",
          "type": "string",
          "displayName": "End",
          "value": "",
          "format": "date-time",
          "help": "end"
        },
        "height": {
          "description": "The task height, in pixels. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Height",
          "units": "pixels",
          "help": "height"
        },
        "label": {
          "description": "The label associated with the task.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "label"
        },
        "labelPosition": {
          "description": "The position of the label relative to the task. An array of values is also supported. See the Help documentation for more information.",
          "type": "string|Array<string>",
          "displayName": "Label Position",
          "help": "labelPosition",
          "enumValues": [
            "end",
            "innerCenter",
            "innerEnd",
            "innerStart",
            "none",
            "start"
          ],
          "propertyEditorValues": {
            "end": {
              "displayName": "End"
            },
            "innerCenter": {
              "displayName": "Inner Center"
            },
            "innerEnd": {
              "displayName": "Inner End"
            },
            "innerStart": {
              "displayName": "Inner Start"
            },
            "none": {
              "displayName": "None"
            },
            "start": {
              "displayName": "Start"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style defining the style of the label. Only CSS style applicable to SVG elements can be used.",
          "type": "object",
          "displayName": "Label Style",
          "value": {},
          "help": "labelStyle"
        },
        "overlap": {
          "description": "Configures the placement of this task relative to a task it overlaps with.",
          "type": "object",
          "displayName": "Overlap",
          "help": "overlap",
          "properties": {
            "behavior": {
              "description": "Specifies the behavior when a task overlaps a chronologically previous adjacent tasks. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Behavior",
              "help": "overlap.behavior",
              "enumValues": [
                "auto",
                "overlay",
                "stack",
                "stagger"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "overlay": {
                  "displayName": "Overlay"
                },
                "stack": {
                  "displayName": "Stack"
                },
                "stagger": {
                  "displayName": "Stagger"
                }
              }
            }
          }
        },
        "progress": {
          "description": "Specifies the progress of the task. This property is ignored if the task is a milestone.",
          "type": "object",
          "displayName": "Progress",
          "help": "progress",
          "properties": {
            "borderRadius": {
              "description": "The border radius of the progress bar. Accepts valid CSS border-radius attribute values.",
              "type": "string",
              "displayName": "Border Radius",
              "help": "progress.borderRadius"
            },
            "height": {
              "description": "Specifies the height of the progress bar in pixels or as a percentage of the associated task bar height. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Height",
              "help": "progress.height"
            },
            "svgClassName": {
              "description": "A space delimited list of CSS style classes to apply to the progress bar.",
              "type": "string",
              "displayName": "Svg Class Name",
              "help": "progress.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS inline style to apply to the progress bar.",
              "type": "object",
              "displayName": "Svg Style",
              "help": "progress.svgStyle"
            },
            "value": {
              "description": "The progress value, between 0 and 1 inclusive. If not specified or invalid, no progress bar will be shown.",
              "type": "number",
              "displayName": "Value",
              "value": null,
              "help": "progress.value"
            }
          }
        },
        "rowId": {
          "description": "The id for the row the task belongs to.",
          "type": "any",
          "displayName": "Row Id",
          "help": "rowId"
        },
        "shortDesc": {
          "description": "The description of the task. This is used for accessibility and for customizing the tooltip text.",
          "type": "string",
          "displayName": "Short Desc",
          "value": null,
          "help": "shortDesc"
        },
        "start": {
          "description": "The task start time. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Start",
          "value": "",
          "format": "date-time",
          "help": "start"
        },
        "svgClassName": {
          "description": "A space delimited list of CSS style classes defining the style of the task.",
          "type": "string",
          "displayName": "Svg Class Name",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style defining the style of the task.",
          "type": "object",
          "displayName": "Svg Style",
          "help": "svgStyle"
        },
        "type": {
          "description": "Defines the task type to be rendered. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Type",
          "help": "type",
          "enumValues": [
            "auto",
            "milestone",
            "normal",
            "summary"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "milestone": {
              "displayName": "Milestone"
            },
            "normal": {
              "displayName": "Normal"
            },
            "summary": {
              "displayName": "Summary"
            }
          }
        }
      }
    },
    "oj-indexer": {
      "name": "oj-indexer",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Indexer",
      "type": "core",
      "since": "1.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojindexer"
        }
      },
      "description": "An indexer displays a list of sections that corresponds to group headers of a list.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojIndexer.html",
      "properties": {
        "data": {
          "description": "The data provider for the Indexer.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "ariaDisabledLabel": {
              "description": "Provides properties to customize the text to read to the screen reader when there is no matching group header.",
              "type": "string",
              "help": "translations.ariaDisabledLabel"
            },
            "ariaInBetweenText": {
              "description": "Provides properties to customize the text that represents between two characters in the Indexer.",
              "type": "string",
              "help": "translations.ariaInBetweenText"
            },
            "ariaKeyboardInstructionText": {
              "description": "Provides properties to customize the screen reader keyboard instructional text for the the Indexer.",
              "type": "string",
              "help": "translations.ariaKeyboardInstructionText"
            },
            "ariaOthersLabel": {
              "description": "Provides properties to customize the text to read to the screen reader when the non-letter characters is selected.",
              "type": "string",
              "help": "translations.ariaOthersLabel"
            },
            "ariaTouchInstructionText": {
              "description": "Provides properties to customize the screen reader touch instructional text for the the Indexer.",
              "type": "string",
              "help": "translations.ariaTouchInstructionText"
            },
            "indexerCharacters": {
              "description": "Provides properties to customize the characters to display in the Indexer.",
              "type": "string",
              "help": "translations.indexerCharacters"
            },
            "indexerOthers": {
              "description": "Provides properties to customize the non-letter characters to display in the Indexer.",
              "type": "string",
              "help": "translations.indexerOthers"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Redraw the entire indexer.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-input-date": {
      "name": "oj-input-date",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Input Date",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatetimepicker"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "An input date allows the user to enter or select a date value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojInputDate.html",
      "properties": {
        "asyncValidators": {
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "autocomplete"
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "autofocus"
        },
        "converter": {
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "value": "oj.Validation.converterFactory('datetime').createConverter({\"day\":\"2-digit\",\"month\":\"2-digit\",\"year\":\"2-digit\"})",
          "help": "converter",
          "properties": {
            "type": {
              "description": "the converter type registered with the oj.ConverterFactory. Usually 'datetime'. See DateTimeConverterFactory for details. E.g., {converter: {type: 'datetime'}",
              "type": "string"
            },
            "options": {
              "description": "optional Object literal of options that the converter expects. See IntlDateTimeConverter for options supported by the jet datetime converter. E.g., {converter: {type: 'datetime', options: {formatType: 'date'}}",
              "type": "object"
            }
          }
        },
        "datePicker": {
          "description": "An object whose properties describe the appearance and behavior of the date picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Date Picker",
          "help": "datePicker",
          "properties": {
            "changeMonth": {
              "description": "Specifies whether the month should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Month",
              "value": "select",
              "help": "datePicker.changeMonth",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "month is rendered as a text",
                  "displayName": "None"
                },
                "select": {
                  "description": "month is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "changeYear": {
              "description": "Specifies whether the year should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Year",
              "value": "select",
              "help": "datePicker.changeYear",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "As text",
                  "displayName": "None"
                },
                "select": {
                  "description": "As a button",
                  "displayName": "Select"
                }
              }
            },
            "currentMonthPos": {
              "description": "Specifies the postion in multiple months at which to show the current month (starting at 0).",
              "type": "number",
              "displayName": "Current Month Pos",
              "value": 0,
              "maximum": 12,
              "minimum": 0,
              "help": "datePicker.currentMonthPos"
            },
            "daysOutsideMonth": {
              "description": "Specifies the behavior of days outside the current viewing month.",
              "type": "string",
              "displayName": "Days Outside Month",
              "value": "hidden",
              "help": "datePicker.daysOutsideMonth",
              "enumValues": [
                "hidden",
                "selectable",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "Days outside the current viewing month will be hidden",
                  "displayName": "Hidden"
                },
                "selectable": {
                  "description": "Days outside the current viewing month will be visible + selectable",
                  "displayName": "Selectable"
                },
                "visible": {
                  "description": "Days outside the current viewing month will be visible",
                  "displayName": "Visible"
                }
              }
            },
            "footerLayout": {
              "description": "Specifies what content is shown within the footer of the calendar.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "today",
              "help": "datePicker.footerLayout",
              "enumValues": [
                "",
                "today"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "today": {
                  "description": "Show the today button",
                  "displayName": "Today"
                }
              }
            },
            "numberOfMonths": {
              "description": "Specifies the number of months to show at once. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Number Of Months",
              "value": 1,
              "minimum": 1,
              "help": "datePicker.numberOfMonths"
            },
            "showOn": {
              "description": "Specifies when the date picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "datePicker.showOn",
              "enumValues": [
                "focus",
                "image"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger calendar image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger calendar image is clicked",
                  "displayName": "Image"
                }
              }
            },
            "stepBigMonths": {
              "description": "Specifies the number of months to step backwards and forwards for the Alt+Page Up and Alt+Page Down keystrokes.",
              "type": "number",
              "displayName": "Step Big Months",
              "value": 12,
              "help": "datePicker.stepBigMonths"
            },
            "stepMonths": {
              "description": "Specifies how the prev and next keys will step backwards and forwards through the months. See the Help documentation for more information.",
              "type": "string|number",
              "displayName": "Step Months",
              "value": "numberOfMonths",
              "help": "datePicker.stepMonths"
            },
            "weekDisplay": {
              "description": "Specifies whether the week of the year will be shown.",
              "type": "string",
              "displayName": "Week Display",
              "value": "none",
              "help": "datePicker.weekDisplay",
              "enumValues": [
                "none",
                "number"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "Nothing will be shown",
                  "displayName": "None"
                },
                "number": {
                  "description": "Will show the week of the year as a number",
                  "displayName": "Number"
                }
              }
            },
            "yearRange": {
              "description": "Specifies the range of years displayed in the year drop-down. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Year Range",
              "value": "c-10:c+10",
              "help": "datePicker.yearRange"
            }
          }
        },
        "dayFormatter": {
          "description": "Specifies a callback function used when rendering the day. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Day Formatter",
          "value": null,
          "help": "dayFormatter"
        },
        "dayMetaData": {
          "description": "Specifies additional information to be used when rendering the day. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Day Meta Data",
          "value": null,
          "help": "dayMetaData"
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "keyboardEdit": {
          "description": "Determines if keyboard entry of the text is allowed. When disabled, the picker must be used to select the date. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Keyboard Edit",
          "help": "keyboardEdit",
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Changing the date can only be done with the picker.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Allow keyboard entry of the date.",
              "displayName": "Enabled"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "max": {
          "description": "The maximum selectable date, in ISO string format. When set to null, there is no maximum.",
          "type": "string|null",
          "displayName": "Max",
          "value": null,
          "format": "date",
          "help": "max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "min": {
          "description": "The minimum selectable date, in ISO string format. When set to null, there is no minimum.",
          "type": "string|null",
          "displayName": "Min",
          "value": null,
          "format": "date",
          "help": "min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "name"
        },
        "pickerAttributes": {
          "description": "Specifies attributes to be set on the picker DOM element when it is launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "pickerAttributes",
          "properties": {
            "style": {
              "description": "Deprecated: this property is deprecated since 7.0.0 and will be removed in the future. Please use the \"class\" property to set a CSS class instead.",
              "type": "string"
            },
            "class": {
              "description": "",
              "type": "string"
            }
          }
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "help": "placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "renderMode": {
          "description": "Specifies whether to render the date picker in JET, or as a native picker control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Render Mode",
          "help": "renderMode",
          "enumValues": [
            "jet",
            "native"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Applications get full JET functionality.",
              "displayName": "Jet"
            },
            "native": {
              "description": "Applications get the functionality of the native picker. Native picker is not available when the picker is inline, defaults to jet instead. Note that the native picker support is limited to Cordova plugin published at 'https://github.com/VitaliiBlagodir/cordova-plugin-datepicker'. With native renderMode, the functionality that is sacrificed compared to jet renderMode are: Date picker cannot be themed Accessibility is limited to what the native picker supports pickerAttributes is not applied Sub-IDs are not available hide() function is no-op translations sub properties pertaining to the picker is not available All of the 'datepicker' sub-properties except 'showOn' are not available ",
              "displayName": "Native"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "currentText": {
              "description": "The text to display for the current day link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.currentText"
            },
            "dateRestriction": {
              "description": "Provides properties to customize the hint and message text used by the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.dateRestriction",
              "properties": {
                "hint": {
                  "description": "Hint text used by the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.hint"
                },
                "messageDetail": {
                  "description": "Message detail for the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.messageDetail"
                },
                "messageSummary": {
                  "description": "Message summary for the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.messageSummary"
                }
              }
            },
            "dateTimeRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.dateTimeRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.hint",
                  "properties": {
                    "inRange": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.messageDetail",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "nextText": {
              "description": "The text to display for the next month link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.nextText"
            },
            "prevText": {
              "description": "The text to display for the previous month link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.prevText"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            },
            "tooltipCalendar": {
              "description": "Tooltip text for the calendar icon. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendar"
            },
            "tooltipCalendarDisabled": {
              "description": "Tooltip text for the calendar icon when the component is disabled. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarDisabled"
            },
            "tooltipCalendarTime": {
              "description": "Tooltip text for the calendar + time icon. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarTime"
            },
            "tooltipCalendarTimeDisabled": {
              "description": "Tooltip text for the calendar + time icon when the component is disabled. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarTimeDisabled"
            },
            "weekHeader": {
              "description": "The text to display for the week of the year column heading. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.weekHeader"
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "description": "A list of validators used by the element, along with any implicit component validators, when performing validation. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "validators",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. ",
                  "type": "string"
                },
                "options": {
                  "description": "optional Object literal of options that the validator expects.",
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the input date element, which must be an ISOString. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Value",
          "writeback": true,
          "format": "date",
          "help": "value"
        }
      },
      "methods": {
        "hide": {
          "description": "Hides the datepicker. Note that this function is a no-op when renderMode is 'native'.",
          "help": "hide",
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the element. Usually called after dom changes have been made.",
          "help": "refresh",
          "return": "void"
        },
        "show": {
          "description": "Shows the datepicker",
          "help": "show",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise<string>"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-input-date-time": {
      "name": "oj-input-date-time",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Input Date Time",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatetimepicker"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "An input date time allows the user to enter or select a date and time value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojInputDateTime.html",
      "properties": {
        "asyncValidators": {
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "autocomplete"
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "autofocus"
        },
        "converter": {
          "description": "An object that converts the datetime value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "value": "oj.Validation.converterFactory('datetime').createConverter({\"day\": \"2-digit\", \"month\": \"2-digit\", \"year\": \"2-digit\", \"hour\": \"2-digit\", \"minute\": \"2-digit\"})",
          "help": "converter",
          "properties": {
            "type": {
              "description": "the name of the factory registered converter",
              "type": "string"
            },
            "options": {
              "description": "options to the converter",
              "type": "object"
            }
          }
        },
        "datePicker": {
          "description": "An object whose properties describe the appearance and behavior of the date picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Date Picker",
          "help": "datePicker",
          "properties": {
            "changeMonth": {
              "description": "Specifies whether the month should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Month",
              "value": "select",
              "help": "datePicker.changeMonth",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "month is rendered as a text",
                  "displayName": "None"
                },
                "select": {
                  "description": "month is rendered as a button",
                  "displayName": "Select"
                }
              }
            },
            "changeYear": {
              "description": "Specifies whether the year should be rendered as a button to allow selection, instead of as text.",
              "type": "string",
              "displayName": "Change Year",
              "value": "select",
              "help": "datePicker.changeYear",
              "enumValues": [
                "none",
                "select"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "As text",
                  "displayName": "None"
                },
                "select": {
                  "description": "As a button",
                  "displayName": "Select"
                }
              }
            },
            "currentMonthPos": {
              "description": "Specifies the postion in multiple months at which to show the current month (starting at 0).",
              "type": "number",
              "displayName": "Current Month Pos",
              "value": 0,
              "maximum": 12,
              "minimum": 0,
              "help": "datePicker.currentMonthPos"
            },
            "daysOutsideMonth": {
              "description": "Specifies the behavior of days outside the current viewing month.",
              "type": "string",
              "displayName": "Days Outside Month",
              "value": "hidden",
              "help": "datePicker.daysOutsideMonth",
              "enumValues": [
                "hidden",
                "selectable",
                "visible"
              ],
              "propertyEditorValues": {
                "hidden": {
                  "description": "Days outside the current viewing month will be hidden",
                  "displayName": "Hidden"
                },
                "selectable": {
                  "description": "Days outside the current viewing month will be visible + selectable",
                  "displayName": "Selectable"
                },
                "visible": {
                  "description": "Days outside the current viewing month will be visible",
                  "displayName": "Visible"
                }
              }
            },
            "footerLayout": {
              "description": "Specifies what content is shown within the footer of the calendar.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "today",
              "help": "datePicker.footerLayout",
              "enumValues": [
                "",
                "today"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "today": {
                  "description": "Show the today button",
                  "displayName": "Today"
                }
              }
            },
            "numberOfMonths": {
              "description": "Specifies the number of months to show at once. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Number Of Months",
              "value": 1,
              "minimum": 1,
              "help": "datePicker.numberOfMonths"
            },
            "showOn": {
              "description": "Specifies when the date picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "datePicker.showOn",
              "enumValues": [
                "focus",
                "image"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger calendar image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger calendar image is clicked",
                  "displayName": "Image"
                }
              }
            },
            "stepBigMonths": {
              "description": "Specifies the number of months to step backwards and forwards for the Alt+Page Up and Alt+Page Down keystrokes.",
              "type": "number",
              "displayName": "Step Big Months",
              "value": 12,
              "help": "datePicker.stepBigMonths"
            },
            "stepMonths": {
              "description": "Specifies how the prev and next keys will step backwards and forwards through the months. See the Help documentation for more information.",
              "type": "string|number",
              "displayName": "Step Months",
              "value": "numberOfMonths",
              "help": "datePicker.stepMonths"
            },
            "weekDisplay": {
              "description": "Specifies whether the week of the year will be shown.",
              "type": "string",
              "displayName": "Week Display",
              "value": "none",
              "help": "datePicker.weekDisplay",
              "enumValues": [
                "none",
                "number"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "Nothing will be shown",
                  "displayName": "None"
                },
                "number": {
                  "description": "Will show the week of the year as a number",
                  "displayName": "Number"
                }
              }
            },
            "yearRange": {
              "description": "Specifies the range of years displayed in the year drop-down. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Year Range",
              "value": "c-10:c+10",
              "help": "datePicker.yearRange"
            }
          }
        },
        "dayFormatter": {
          "description": "Specifies a callback function used when rendering the day. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Day Formatter",
          "value": null,
          "help": "dayFormatter"
        },
        "dayMetaData": {
          "description": "Specifies additional information to be used when rendering the day. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Day Meta Data",
          "value": null,
          "help": "dayMetaData"
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "keyboardEdit": {
          "description": "Determines if keyboard entry of the text is allowed. When disabled, the picker must be used to select the date. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Keyboard Edit",
          "help": "keyboardEdit",
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Changing the date can only be done with the picker.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Allow keyboard entry of the date.",
              "displayName": "Enabled"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "max": {
          "description": "The maximum selectable datetime, in ISO string format. When set to null, there is no maximum.",
          "type": "string|null",
          "displayName": "Max",
          "value": null,
          "format": "date-time",
          "help": "max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "min": {
          "description": "The minimum selectable datetime, in ISO string format. When set to null, there is no minimum.",
          "type": "string|null",
          "displayName": "Min",
          "value": null,
          "format": "date-time",
          "help": "min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "name"
        },
        "pickerAttributes": {
          "description": "Specifies attributes to be set on the picker DOM element when it is launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "pickerAttributes",
          "properties": {
            "style": {
              "description": "Deprecated: this property is deprecated since 7.0.0 and will be removed in the future. Please use the \"class\" property to set a CSS class instead.",
              "type": "string"
            },
            "class": {
              "description": "",
              "type": "string"
            }
          }
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "help": "placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "renderMode": {
          "description": "Specifies whether to render the date picker in JET, or as a native picker control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Render Mode",
          "help": "renderMode",
          "enumValues": [
            "jet",
            "native"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Applications get full JET functionality.",
              "displayName": "Jet"
            },
            "native": {
              "description": "Applications get the functionality of the native picker. Native picker is not available when the picker is inline, defaults to jet instead. Note that the native picker support is limited to Cordova plugin published at 'https://github.com/VitaliiBlagodir/cordova-plugin-datepicker'. With native renderMode, the functionality that is sacrificed compared to jet renderMode are: Date Time picker cannot be themed Accessibility is limited to what the native picker supports pickerAttributes is not applied Sub-IDs are not available hide() function is no-op translations sub properties pertaining to the picker is not available All of the 'datepicker' sub-properties except 'showOn' are not available 'timePicker.timeIncrement' property is limited to iOS and will only take a precision of minutes ",
              "displayName": "Native"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "timePicker": {
          "description": "An object whose properties describe the appearance and behavior of the time picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Time Picker",
          "help": "timePicker",
          "properties": {
            "footerLayout": {
              "description": "Specifies what content is shown within the footer of the wheel time picker.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "",
              "help": "timePicker.footerLayout",
              "enumValues": [
                "",
                "now"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "now": {
                  "description": "Show the now button",
                  "displayName": "Now"
                }
              }
            },
            "showOn": {
              "description": "Specifies when the time picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "timePicker.showOn",
              "enumValues": [
                "focus",
                "image"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger clock image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger clock image is clicked",
                  "displayName": "Image"
                }
              }
            },
            "timeIncrement": {
              "description": "Specifies the time increment used for InputDateTime. See the Help documenation for more information.",
              "type": "string",
              "displayName": "Time Increment",
              "value": "00:05:00:00",
              "help": "timePicker.timeIncrement"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "cancel": {
              "description": "The text to display for the Cancel link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.cancel"
            },
            "currentText": {
              "description": "The text to display for the current day link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.currentText"
            },
            "dateRestriction": {
              "description": "Provides properties to customize the hint and message text used by the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.dateRestriction",
              "properties": {
                "hint": {
                  "description": "Hint text used by the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.hint"
                },
                "messageDetail": {
                  "description": "Message detail for the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.messageDetail"
                },
                "messageSummary": {
                  "description": "Message summary for the implicit date restriction validator associated to the InputDateTime and InputDate components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.dateRestriction.messageSummary"
                }
              }
            },
            "dateTimeRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.dateTimeRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.hint",
                  "properties": {
                    "inRange": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.messageDetail",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "done": {
              "description": "The text to display for the switchers Done link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.done"
            },
            "nextText": {
              "description": "The text to display for the next month link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.nextText"
            },
            "prevText": {
              "description": "The text to display for the previous month link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.prevText"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            },
            "tooltipCalendar": {
              "description": "Tooltip text for the calendar icon. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendar"
            },
            "tooltipCalendarDisabled": {
              "description": "Tooltip text for the calendar icon when the component is disabled. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarDisabled"
            },
            "tooltipCalendarTime": {
              "description": "Tooltip text for the calendar + time icon. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarTime"
            },
            "tooltipCalendarTimeDisabled": {
              "description": "Tooltip text for the calendar + time icon when the component is disabled. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCalendarTimeDisabled"
            },
            "weekHeader": {
              "description": "The text to display for the week of the year column heading. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.weekHeader"
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "description": "A list of validators used by the element, along with any implicit component validators, when performing validation. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "validators",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. ",
                  "type": "string"
                },
                "options": {
                  "description": "optional Object literal of options that the validator expects.",
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the input datetime element, which must be an ISOString. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Value",
          "writeback": true,
          "format": "date-time",
          "help": "value"
        }
      },
      "methods": {
        "show": {
          "description": "",
          "help": "show",
          "return": "void"
        },
        "showTimePicker": {
          "description": "Method to show the internally created InputTime",
          "help": "showTimePicker",
          "return": "void"
        },
        "hideTimePicker": {
          "description": "",
          "help": "hideTimePicker",
          "return": "void"
        },
        "hide": {
          "description": "Hides the datepicker. Note that this function is a no-op when renderMode is 'native'.",
          "help": "hide",
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the element. Usually called after dom changes have been made.",
          "help": "refresh",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise<string>"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-input-number": {
      "name": "oj-input-number",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Input Number",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojinputnumber"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "An input number allows the user to enter a number value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojInputNumber.html",
      "properties": {
        "asyncValidators": {
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "autocomplete"
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "autofocus"
        },
        "converter": {
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "value": "oj.Validation.converterFactory('number').createConverter()",
          "help": "converter",
          "properties": {
            "type": {
              "description": "the converter type registered with the oj.ConverterFactory. Usually 'number'. See NumberConverterFactory for details. E.g., {converter: {type: 'number'}",
              "type": "string"
            },
            "options": {
              "description": "optional Object literal of options that the converter expects. See IntlNumberConverter for options supported by the jet number converter. E.g., {converter: {type: 'number', options: {style: 'decimal'}}",
              "type": "object"
            }
          }
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "max": {
          "description": "The maximum allowed value. A value of null indicates that there is no maximum. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Max",
          "value": null,
          "help": "max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "min": {
          "description": "The minimum allowed value. A value of null indicates that there is no minimum. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Min",
          "value": null,
          "help": "min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "name"
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string|null",
          "displayName": "Placeholder",
          "value": "",
          "help": "placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "step": {
          "description": "Specifies the amount to increase or decrease the value when moving in step increments. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Step",
          "value": 1,
          "exclusiveMinimum": 0,
          "help": "step"
        },
        "transientValue": {
          "description": "Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Transient Value",
          "writeback": true,
          "readOnly": true,
          "help": "transientValue"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "numberRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit number range validator associated to the inputNumber component. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.numberRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit number range validator associated to the inputNumber component. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.numberRange.hint",
                  "properties": {
                    "exact": {
                      "description": "Hint text used by the number range validator associated to the inputNumber component. hint.exact is shown when both min and max are set and are equal to each other. This hint is used to tell the user to enter that particular number. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.numberRange.hint.exact"
                    },
                    "inRange": {
                      "description": "Hint text used by the number range validator associated to the inputNumber component. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.numberRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the number range validator associated to the inputNumber component. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.numberRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the number range validator associated to the inputNumber component. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.numberRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit number range validator associated to the inputNumber component. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.numberRange.messageDetail",
                  "properties": {
                    "exact": {
                      "description": "Error message text used by the number range validator associated to the inputNumber component. messageDetail.exact is shown when min and max are both set and are equal to each other, and the value is not equal to the min/max. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.numberRange.messageDetail.exact"
                    },
                    "rangeOverflow": {
                      "description": "Error message text used by the number range validator associated to the inputNumber component. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.numberRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the number range validator associated to the inputNumber component. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.numberRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary text used by the implicit number range validator associated to the inputNumber component. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.numberRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the number range validator associated to the inputNumber component. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.numberRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the number range validator associated to the inputNumber component. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.numberRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            },
            "tooltipDecrement": {
              "description": "Tooltip text for the inputNumber's Down arrow. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipDecrement"
            },
            "tooltipIncrement": {
              "description": "Tooltip text for the inputNumber's Up arrow. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipIncrement"
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "description": "Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "validators",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. E.g., {validators: [{type: 'regExp'}]}",
                  "type": "string"
                },
                "options": {
                  "description": "optional Object literal of options that the validator expects. E.g., {validators: [{type: 'regExp', options: {pattern: '[a-zA-Z0-9]{3,}'}}]}",
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the component, which must be either a number or null. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "help": "value"
        },
        "virtualKeyboard": {
          "description": "The type of virtual keyboard to display for entering value on mobile browsers. This attribute has no effect on desktop browsers.",
          "type": "string",
          "displayName": "Virtual Keyboard",
          "value": "auto",
          "help": "virtualKeyboard",
          "enumValues": [
            "auto",
            "number",
            "text"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "The component will determine the best virtual keyboard to use. This is always \"text\" for this release but may change in future releases.",
              "displayName": "Auto"
            },
            "number": {
              "description": "Use a virtual keyboard for entering number. Note that on Android and Windows Mobile, the \"number\" keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "text": {
              "description": "Use a virtual keyboard for entering text.",
              "displayName": "Text"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "stepDown": {
          "description": "Decrements the value by the specified number of steps. See the Help documentation for more information.",
          "help": "stepDown",
          "params": [
            {
              "name": "steps",
              "description": "Number of steps to decrement, defaults to 1. Null is treated as 0.",
              "type": "number"
            }
          ],
          "return": "void"
        },
        "stepUp": {
          "description": "Increments the value by the specified number of steps. See the Help documentation for more information.",
          "help": "stepUp",
          "params": [
            {
              "name": "steps",
              "description": "Number of steps to increment, defaults to 1.",
              "type": "number"
            }
          ],
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise<string>"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-input-password": {
      "name": "oj-input-password",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Input Password",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojinputtext"
        }
      },
      "description": "An input password allows the user to enter a password.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojInputPassword.html",
      "properties": {
        "asyncValidators": {
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "autocomplete"
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "autofocus"
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "name"
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "help": "placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputPassword component. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputPassword component. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "description": "Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "validators",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. E.g., {validators: [{type: 'regExp'}]}",
                  "type": "string"
                },
                "options": {
                  "description": "optional Object literal of options that the validator expects. E.g., {validators: [{type: 'regExp', options: {pattern: '[a-zA-Z0-9]{3,}'}}]}",
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the component. Value must be a string or null. When value property changes due to programmatic intervention, the component always clears all messages including messagesCustom, runs deferred validation, and always refreshes UI display value. Running Validation component always runs deferred validation; if there is a validation error the valid property is updated. ",
          "type": "string|null",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "help": "value"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise<string>"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-input-text": {
      "name": "oj-input-text",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Input Text",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojinputtext"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "An input text allows the user to enter a text value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojInputText.html",
      "properties": {
        "asyncValidators": {
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "autocomplete"
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "autofocus"
        },
        "clearIcon": {
          "description": "Specifies if an icon to clear the input field should be visible.",
          "type": "string",
          "displayName": "Clear Icon",
          "value": "never",
          "help": "clearIcon",
          "enumValues": [
            "always",
            "conditional",
            "never"
          ],
          "propertyEditorValues": {
            "always": {
              "description": "The clear icon is always visible",
              "displayName": "Always"
            },
            "conditional": {
              "description": "The clear icon is visible under the following conditions: if the component has a non-empty value AND it either has focus OR the mouse is over the field.",
              "displayName": "Conditional"
            },
            "never": {
              "description": "The clear icon is never visible",
              "displayName": "Never"
            }
          }
        },
        "converter": {
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Converter",
          "value": null,
          "help": "converter",
          "properties": {
            "type": {
              "description": "the converter type registered with the oj.ConverterFactory. Supported types are 'number' and 'datetime'. See ConverterFactory for details. E.g., converter='{\"type\": \"number\"}'",
              "type": "string"
            },
            "options": {
              "description": "optional Object literal of options that the converter expects. See IntlNumberConverter for options supported by the number converter. See IntlDateTimeConverter for options supported by the date time converter. E.g., converter='{\"type\": \"number\", \"options\": {\"style\": \"decimal\"}}'",
              "type": "object"
            }
          }
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "list": {
          "description": "Specifies a list of pre-defined options to present to the user. See the Help documentation for more information.",
          "type": "string",
          "displayName": "List",
          "help": "list"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "name"
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "help": "placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "description": "Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "validators",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. E.g., {validators: [{type: 'regExp'}]}",
                  "type": "string"
                },
                "options": {
                  "description": "optional Object literal of options that the validator expects. E.g., {validators: [{type: 'regExp', options: {pattern: '[a-zA-Z0-9]{3,}'}}]}",
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the component.",
          "type": "any",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "help": "value"
        },
        "virtualKeyboard": {
          "description": "The type of virtual keyboard to display for entering value on mobile browsers. This attribute has no effect on desktop browsers.",
          "type": "string",
          "displayName": "Virtual Keyboard",
          "value": "auto",
          "help": "virtualKeyboard",
          "enumValues": [
            "auto",
            "email",
            "number",
            "search",
            "tel",
            "text",
            "url"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "The component will determine the best virtual keyboard to use. This is always \"text\" for this release but may change in future releases.",
              "displayName": "Auto"
            },
            "email": {
              "description": "Use a virtual keyboard for entering email.",
              "displayName": "Email"
            },
            "number": {
              "description": "Use a virtual keyboard for entering number. Note that on Android and Windows Mobile, the \"number\" keyboard does not contain the minus sign. This value should not be used on fields that accept negative values.",
              "displayName": "Number"
            },
            "search": {
              "description": "Use a virtual keyboard for entering search terms.",
              "displayName": "Search"
            },
            "tel": {
              "description": "Use a virtual keyboard for entering telephone number.",
              "displayName": "Tel"
            },
            "text": {
              "description": "Use a virtual keyboard for entering text.",
              "displayName": "Text"
            },
            "url": {
              "description": "Use a virtual keyboard for entering URL.",
              "displayName": "Url"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise<string>"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-input-time": {
      "name": "oj-input-time",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Input Time",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojdatetimepicker"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "An input time allows the user to enter or select a time value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojInputTime.html",
      "properties": {
        "asyncValidators": {
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "autocomplete"
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "autofocus"
        },
        "converter": {
          "description": "An object that converts the time value. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "value": "oj.Validation.converterFactory('datetime').createConverter({\"hour\": \"2-digit\", \"minute\": \"2-digit\"})",
          "help": "converter",
          "properties": {
            "type": {
              "description": "the name of the factory registered converter",
              "type": "string"
            },
            "options": {
              "description": "options to the converter",
              "type": "object"
            }
          }
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "keyboardEdit": {
          "description": "Specifies whether keyboard entry of text is allowed. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Keyboard Edit",
          "help": "keyboardEdit",
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Changing the time can only be done with the picker.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Allow keyboard entry of the time.",
              "displayName": "Enabled"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "max": {
          "description": "The maximum selectable time, in ISO string format. When set to null, there is no maximum. type string - ISOString null - no limit ",
          "type": "string|null",
          "displayName": "Max",
          "value": null,
          "format": "time",
          "help": "max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "min": {
          "description": "The minimum selectable time, in ISO string format. When set to null, there is no minimum.",
          "type": "string|null",
          "displayName": "Min",
          "value": null,
          "format": "time",
          "help": "min"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "name"
        },
        "pickerAttributes": {
          "description": "Specifies attributes to be set on the picker DOM element when it is launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "pickerAttributes",
          "properties": {
            "style": {
              "description": "Deprecated: this property is deprecated since 7.0.0 and will be removed in the future. Please use the \"class\" property to set a CSS class instead.",
              "type": "string"
            },
            "class": {
              "description": "",
              "type": "string"
            }
          }
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "help": "placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "renderMode": {
          "description": "Specifies whether to render the time picker in JET, or as a native picker control. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Render Mode",
          "help": "renderMode",
          "enumValues": [
            "jet",
            "native"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Applications get full JET functionality.",
              "displayName": "Jet"
            },
            "native": {
              "description": "Applications get the functionality of the native picker. Note that the native picker support is limited to Cordova plugin published at 'https://github.com/VitaliiBlagodir/cordova-plugin-datepicker'. With native renderMode, the functionality that is sacrificed compared to jet renderMode are: Time picker cannot be themed Accessibility is limited to what the native picker supports pickerAttributes is not applied Sub-IDs are not available hide() function is no-op translations sub properties pertaining to the picker is not available 'timePicker.timeIncrement' property is limited to iOS and will only take a precision of minutes ",
              "displayName": "Native"
            }
          }
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "timePicker": {
          "description": "An object whose properties describe the appearance and behavior of the time picker. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Time Picker",
          "help": "timePicker",
          "properties": {
            "footerLayout": {
              "description": "Specifies what content is shown within the footer of the wheel time picker.",
              "type": "string",
              "displayName": "Footer Layout",
              "value": "",
              "help": "timePicker.footerLayout",
              "enumValues": [
                "",
                "now"
              ],
              "propertyEditorValues": {
                "": {
                  "description": "Do not show anything",
                  "displayName": ""
                },
                "now": {
                  "description": "Show the now button",
                  "displayName": "Now"
                }
              }
            },
            "showOn": {
              "description": "Specifies when the time picker should be shown.",
              "type": "string",
              "displayName": "Show On",
              "value": "focus",
              "help": "timePicker.showOn",
              "enumValues": [
                "focus",
                "image"
              ],
              "propertyEditorValues": {
                "focus": {
                  "description": "when the element receives focus or when the trigger clock image is clicked. When the picker is closed, the field regains focus and is editable.",
                  "displayName": "Focus"
                },
                "image": {
                  "description": "when the trigger clock image is clicked",
                  "displayName": "Image"
                }
              }
            },
            "timeIncrement": {
              "description": "Specifies the time increment used for InputTime. See the Help documenation for more information.",
              "type": "string",
              "displayName": "Time Increment",
              "value": "00:05:00:00",
              "help": "timePicker.timeIncrement"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "ampmWheelLabel": {
              "description": "Label for the AMPM wheel for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.ampmWheelLabel"
            },
            "cancelText": {
              "description": "The text to the cancel button. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.cancelText"
            },
            "currentTimeText": {
              "description": "The text to display for the current time link. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.currentTimeText"
            },
            "dateTimeRange": {
              "description": "Provides properties to customize the hint and message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.dateTimeRange",
              "properties": {
                "hint": {
                  "description": "Provides properties to customize the hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.hint",
                  "properties": {
                    "inRange": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.inRange is shown when both min and max are set, and is used to tell the user the allowed number range. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.inRange"
                    },
                    "max": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.max is shown when max is set and min is not set, and is used to tell the user the allowed maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.max"
                    },
                    "min": {
                      "description": "Hint text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. hint.min is shown when min is set and max is not set, and is used to tell the user the allowed minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.hint.min"
                    }
                  }
                },
                "messageDetail": {
                  "description": "Provides properties to customize the error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.messageDetail",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageDetail.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageDetail.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageDetail.rangeUnderflow"
                    }
                  }
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. See the translations attribute for usage examples.",
                  "type": "object",
                  "help": "translations.dateTimeRange.messageSummary",
                  "properties": {
                    "rangeOverflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeOverflow is shown when max is set, and the value is greater than the maximum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageSummary.rangeOverflow"
                    },
                    "rangeUnderflow": {
                      "description": "Error message summary text used by the implicit datetime range validator associated to the InputDateTime, InputDate, and InputTime components. messageSummary.rangeUnderflow is shown when min is set, and the value is less than the minimum. See the translations attribute for usage examples.",
                      "type": "string",
                      "help": "translations.dateTimeRange.messageSummary.rangeUnderflow"
                    }
                  }
                }
              }
            },
            "hourWheelLabel": {
              "description": "Label for the Hour wheel for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.hourWheelLabel"
            },
            "minuteWheelLabel": {
              "description": "Label for the Minute wheel for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.minuteWheelLabel"
            },
            "okText": {
              "description": "The text to the OK button. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.okText"
            },
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            },
            "tooltipTime": {
              "description": "Tooltip text for the time icon. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipTime"
            },
            "tooltipTimeDisabled": {
              "description": "Tooltip text for the time icon when the component is disabled. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipTimeDisabled"
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "description": "A list of validators used by the element, along with any implicit component validators, when performing validation. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "validators",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. ",
                  "type": "string"
                },
                "options": {
                  "description": "optional Object literal of options that the validator expects.",
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the input time element, which must be an ISOString. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Value",
          "writeback": true,
          "format": "time",
          "help": "value"
        }
      },
      "methods": {
        "show": {
          "description": "Shows the timepicker",
          "help": "show",
          "return": "void"
        },
        "hide": {
          "description": "Hides the timepicker. Note that this function is a no-op when renderMode is 'native'.",
          "help": "hide",
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the element. Usually called after dom changes have been made.",
          "help": "refresh",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise<string>"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-label": {
      "name": "oj-label",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Label",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlabel"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-focus-highlight"
          ],
          "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control. The \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load. The application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are: \"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value. \"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism. \"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result. To change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
        },
        {
          "styleGroup": [
            "oj-label-accesskey"
          ],
          "description": "Use this in a span around a single text character in the oj-label's text. It styles the character in a way that indicates to the user that this character is the accesskey. Use this in conjunction with the HTML accesskey attribute on the oj-label element."
        },
        {
          "styleGroup": [
            "oj-label-nowrap"
          ],
          "description": "place on the oj-label element to have it not wrap when you don't want to use the responsive design classes (e.g., oj-md-labels-nowrap or oj-md-label-nowrap)."
        },
        {
          "styleGroup": [
            "oj-label-inline"
          ],
          "description": "place on the oj-label element to inline the label with the sibling dom element when you don't want to use the responsive design classes (e.g., oj-md-labels-inline)."
        },
        {
          "styleGroup": [
            "oj-label-inline-top"
          ],
          "description": "place on the oj-label element together with oj-label-inline to inline the label with the sibling dom element and have zero margin-top."
        }
      ],
      "description": "A label is a short description of requested input.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojLabel.html",
      "properties": {
        "for": {
          "description": "Specifies the form element associated with this label. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "For",
          "value": null,
          "help": "for"
        },
        "help": {
          "description": "Help information associated with this label.",
          "type": "object|null",
          "displayName": "Help",
          "value": {
            "definition": null,
            "source": null
          },
          "help": "help",
          "properties": {
            "definition": {
              "description": "help definition text",
              "type": "string|null"
            },
            "source": {
              "description": "help source url",
              "type": "string|null"
            }
          }
        },
        "labelId": {
          "description": "Specifies the id to set on the internal label element, if required. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Label Id",
          "value": null,
          "help": "labelId"
        },
        "showRequired": {
          "description": "Specifies whether the label should render an icon indicating that the associated form field requires a value. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Show Required",
          "value": false,
          "help": "showRequired"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "tooltipHelp": {
              "description": "Used for the default help icon tooltip.. Most likely the application developer would use the oj-label's help.definition property to specify the help definition text per oj-label element.",
              "type": "string",
              "help": "translations.tooltipHelp"
            },
            "tooltipRequired": {
              "description": "Used for the default required icon tooltip.",
              "type": "string",
              "help": "translations.tooltipRequired"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-label-value": {
      "name": "oj-label-value",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Label Value",
      "type": "core",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlabelvalue"
        }
      },
      "description": "A label value is used to lay out a label and value, it is most commonly used in a form layout.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojLabelValue.html",
      "properties": {
        "colspan": {
          "description": "Specifies how many columns this label/value pair will occupy in the parent form layout. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Colspan",
          "value": 1,
          "help": "colspan"
        },
        "labelEdge": {
          "description": "Specifies how the label is aligned with its value component.",
          "type": "string",
          "displayName": "Label Edge",
          "value": "inherit",
          "help": "labelEdge",
          "enumValues": [
            "inherit",
            "start",
            "top"
          ],
          "propertyEditorValues": {
            "inherit": {
              "description": "Label will inherit label-edge from its closest custom element ancestor element.",
              "displayName": "Inherit"
            },
            "start": {
              "description": "Label is inline with the start of its value component",
              "displayName": "Start"
            },
            "top": {
              "description": "Label is on top of its value component",
              "displayName": "Top"
            }
          }
        },
        "labelWidth": {
          "description": "Specifies the label width. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Width",
          "value": "inherit",
          "help": "labelWidth"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "*"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "*"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        }
      },
      "slots": {
        "label": {
          "description": "The label slot is used to specify the 'label' part of a label/value form layout item.",
          "help": "label"
        },
        "value": {
          "description": "The value slot is used to specify the 'value' part of a label/value form layout item.",
          "help": "value"
        }
      }
    },
    "oj-led-gauge": {
      "name": "oj-led-gauge",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Led Gauge",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgauge"
        }
      },
      "description": "A LED gauge displays information graphically, highlighting a specific metric value in relation to its thresholds.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojLedGauge.html",
      "properties": {
        "borderColor": {
          "description": "The border color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "borderColor"
        },
        "color": {
          "description": "The color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "color"
        },
        "label": {
          "description": "An object defining the label.",
          "type": "object",
          "displayName": "Label",
          "help": "label",
          "properties": {
            "style": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object",
              "displayName": "Style",
              "value": {},
              "help": "label.style"
            },
            "text": {
              "description": "The text for the label.",
              "type": "string",
              "displayName": "Text",
              "value": "",
              "translatable": true,
              "help": "label.text"
            }
          }
        },
        "max": {
          "description": "The maximum value of the gauge.",
          "type": "number",
          "displayName": "Max",
          "value": 100,
          "help": "max"
        },
        "metricLabel": {
          "description": "An object defining the value label.",
          "type": "object",
          "displayName": "Metric Label",
          "help": "metricLabel",
          "properties": {
            "converter": {
              "description": "The converter used to format the labels. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "value": null,
              "help": "metricLabel.converter"
            },
            "rendered": {
              "description": "Defines if the label is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "off",
              "help": "metricLabel.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "scaling": {
              "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "displayName": "Scaling",
              "value": "auto",
              "help": "metricLabel.scaling",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "style": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object",
              "displayName": "Style",
              "value": {},
              "help": "metricLabel.style"
            },
            "text": {
              "description": "The text for the label. If specified, text will overwrite the numeric value that is displayed by default. The converter, scaling, and textType attributes are ignored when text is specified.",
              "type": "string",
              "displayName": "Text",
              "value": "",
              "translatable": true,
              "help": "metricLabel.text"
            },
            "textType": {
              "description": "Defines whether the label is a number or a percentage of the total value.",
              "type": "string",
              "displayName": "Text Type",
              "value": "number",
              "help": "metricLabel.textType",
              "enumValues": [
                "number",
                "percent"
              ],
              "propertyEditorValues": {
                "number": {
                  "displayName": "Number"
                },
                "percent": {
                  "displayName": "Percent"
                }
              }
            }
          }
        },
        "min": {
          "description": "The minimum value of the gauge.",
          "type": "number",
          "displayName": "Min",
          "value": 0,
          "help": "min"
        },
        "rotation": {
          "description": "The rotation angle for the gauge. Useful for changing the direction of triangle or arrow gauges.",
          "type": "number",
          "displayName": "Rotation",
          "value": 0,
          "units": "degrees",
          "help": "rotation",
          "enumValues": [
            "0",
            "180",
            "270",
            "90"
          ],
          "propertyEditorValues": {
            "0": {
              "displayName": "0"
            },
            "90": {
              "displayName": "90"
            },
            "180": {
              "displayName": "180"
            },
            "270": {
              "displayName": "270"
            }
          }
        },
        "size": {
          "description": "Fraction of area to use. Values range from 0 to 1.",
          "type": "number",
          "displayName": "Size",
          "value": 1,
          "maximum": 1,
          "minimum": 0,
          "help": "size"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the gauge. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the gauge. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        },
        "thresholds": {
          "description": "An array of objects specifying the gauge thresholds.",
          "type": "Array<Object>",
          "displayName": "Thresholds",
          "value": [],
          "help": "thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The border color of the threshold.",
                  "type": "string"
                },
                "color": {
                  "description": "The color of the threshold.",
                  "type": "string"
                },
                "max": {
                  "description": "The upper bound of the threshold. This value is ignored for the final threshold, which uses the maximum value of the gauge.",
                  "type": "number"
                },
                "shortDesc": {
                  "description": "Specific description for the threshold and overwrites the shortDesc specified on gauge. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip for a gauge. The function takes a context argument, provided by the gauge. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            }
          }
        },
        "type": {
          "description": "The shape of the LED gauge. Can take the name of a built-in shape or the svg path commands for a custom shape.",
          "type": "string",
          "displayName": "Type",
          "value": "circle",
          "help": "type",
          "enumValues": [
            "arrow",
            "circle",
            "diamond",
            "human",
            "rectangle",
            "square",
            "star",
            "triangle"
          ],
          "propertyEditorValues": {
            "arrow": {
              "displayName": "Arrow"
            },
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "rectangle": {
              "displayName": "Rectangle"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangle": {
              "displayName": "Triangle"
            }
          }
        },
        "value": {
          "description": "The metric value.",
          "type": "number|null",
          "displayName": "Value",
          "writeback": true,
          "help": "value"
        },
        "visualEffects": {
          "description": "Defines whether visual effects such as overlays are applied to the gauge.",
          "type": "string",
          "displayName": "Visual Effects",
          "value": "auto",
          "help": "visualEffects",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "getMetricLabel": {
          "description": "Returns the gauge's formatted metric label.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getMetricLabel",
          "return": "string"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "color": {
              "description": "The indicator color of the gauge.",
              "type": "string"
            },
            "componentElement": {
              "description": "The LED gauge HTML element.",
              "type": "Element"
            },
            "label": {
              "description": "The computed metric label.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "oj-legend": {
      "name": "oj-legend",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Legend",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlegend"
        }
      },
      "description": "A legend displays an interactive description of symbols, colors, etc., used in graphical information representations.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojLegend.html",
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the nodeTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "data": {
          "description": "Specifies the DataProvider for the sections and items of the legend. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "off",
          "help": "drilling",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set containing the ids of sections that should be expanded on initial render. See the Help documentation for more information.",
          "type": "KeySet|null",
          "displayName": "Expanded",
          "writeback": true,
          "help": "expanded"
        },
        "halign": {
          "description": "Defines the horizontal alignment of the legend contents.",
          "type": "string",
          "displayName": "Halign",
          "value": "start",
          "help": "halign",
          "enumValues": [
            "center",
            "end",
            "start"
          ],
          "propertyEditorValues": {
            "center": {
              "displayName": "Center"
            },
            "end": {
              "displayName": "End"
            },
            "start": {
              "displayName": "Start"
            }
          }
        },
        "hiddenCategories": {
          "description": "An array of categories that will be hidden.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "hiddenCategories"
        },
        "hideAndShowBehavior": {
          "description": "Defines whether the legend can be used to initiate hide and show behavior on referenced data items.",
          "type": "string",
          "displayName": "Hide And Show Behavior",
          "value": "off",
          "help": "hideAndShowBehavior",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of categories that will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over a legend item.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "hoverBehaviorDelay": {
          "description": "Specifies initial hover delay in milliseconds for highlighting items in legend.",
          "type": "number",
          "displayName": "Hover Behavior Delay",
          "value": 200,
          "minimum": 0,
          "units": "milliseconds",
          "help": "hoverBehaviorDelay"
        },
        "orientation": {
          "description": "Defines the orientation of the legend, which determines the direction in which the legend items are laid out.",
          "type": "string",
          "displayName": "Orientation",
          "value": "vertical",
          "help": "orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "displayName": "Horizontal"
            },
            "vertical": {
              "displayName": "Vertical"
            }
          }
        },
        "scrolling": {
          "description": "Defines whether scrolling is enabled for the legend.",
          "type": "string",
          "displayName": "Scrolling",
          "value": "asNeeded",
          "help": "scrolling",
          "enumValues": [
            "asNeeded",
            "off"
          ],
          "propertyEditorValues": {
            "asNeeded": {
              "displayName": "As Needed"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "sections": {
          "description": "An array of objects specifying the legend sections.",
          "type": "Array<Object>|null",
          "displayName": "Sections",
          "value": null,
          "help": "sections",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "collapsible": {
                  "description": "Whether the section is collapsible. Only applies if the legend orientation is vertical.",
                  "type": "string",
                  "value": "off",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "expanded": {
                  "description": "Whether the section is initially expanded. Only applies if the section is collapsible.",
                  "type": "string",
                  "value": "on",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "description": "The id of the legend section. For the DataProvider case, the key for the node will be used as the id.",
                  "type": "string"
                },
                "items": {
                  "description": "An array of objects with the following properties defining the legend items. Also accepts a Promise for deferred data rendering. No data will be rendered if the Promise is rejected.",
                  "type": "Array<Object>",
                  "properties": {
                    "borderColor": {
                      "description": "The border color of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
                      "type": "string"
                    },
                    "categories": {
                      "description": "An array of categories for the legend item. Legend items currently only support a single category. If no category is specified, this defaults to the id or text of the legend item.",
                      "type": "Array<string>"
                    },
                    "categoryVisibility": {
                      "description": "Defines whether the legend item corresponds to visible data items. A hollow symbol is shown if the value is \"hidden\".",
                      "type": "string",
                      "value": "visible",
                      "enumValues": [
                        "hidden",
                        "visible"
                      ]
                    },
                    "color": {
                      "description": "The color of the legend symbol (line or marker). When symbolType is \"lineWithMarker\", this attribute defines the line color and the markerColor attribute defines the marker color.",
                      "type": "string"
                    },
                    "drilling": {
                      "description": "Whether drilling is enabled on the legend item. Drillable objects will show a pointer cursor on hover and fire ojDrill event on click. To enable drilling for all legend items at once, use the drilling attribute in the top level.",
                      "type": "string",
                      "value": "inherit",
                      "enumValues": [
                        "inherit",
                        "off",
                        "on"
                      ]
                    },
                    "id": {
                      "description": "The id of the legend item, which is provided as part of the context for events fired by the legend. If not specified, the id defaults to the text of the legend item if a DataProvider is not being used. For the DataProvider case, the key for the node will be used as the id.",
                      "type": "any"
                    },
                    "lineStyle": {
                      "description": "The line style. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
                      "type": "string",
                      "value": "solid",
                      "enumValues": [
                        "dashed",
                        "dotted",
                        "solid"
                      ]
                    },
                    "lineWidth": {
                      "description": "The line width in pixels. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
                      "type": "number"
                    },
                    "markerColor": {
                      "description": "The color of the marker, if different than the line color. Only applies if the symbolType is \"lineWithMarker\".",
                      "type": "string"
                    },
                    "markerShape": {
                      "description": "The shape of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\". Can take the name of a built-in shape or the svg path commands for a custom shape. Does not apply if a custom image is specified.",
                      "type": "string",
                      "value": "square",
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "markerSvgClassName": {
                      "description": "The CSS style class to apply to the marker. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the markerColor attribute.",
                      "type": "string"
                    },
                    "markerSvgStyle": {
                      "description": "The inline style to apply to the marker. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the markerColor attribute.",
                      "type": "object"
                    },
                    "pattern": {
                      "description": "The pattern used to fill the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
                      "type": "string",
                      "value": "none",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ]
                    },
                    "shortDesc": {
                      "description": "The description of this legend item. This is used for accessibility and for customizing the tooltip text.",
                      "type": "string"
                    },
                    "source": {
                      "description": "The URI of the image of the legend symbol.",
                      "type": "string"
                    },
                    "svgClassName": {
                      "description": "The CSS style class to apply to the legend item. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The inline style to apply to the legend item. The style class and inline style will override any other styling specified through the options. For tooltips and hover interactivity, it's recommended to also pass a representative color to the color attribute.",
                      "type": "object"
                    },
                    "symbolType": {
                      "description": "The type of legend symbol to display.",
                      "type": "string",
                      "value": "marker",
                      "enumValues": [
                        "image",
                        "line",
                        "lineWithMarker",
                        "marker"
                      ]
                    },
                    "text": {
                      "description": "The legend item text.",
                      "type": "string"
                    }
                  }
                },
                "sections": {
                  "description": "An array of nested legend sections.",
                  "type": "Array<Object>"
                },
                "title": {
                  "description": "The title of the legend section.",
                  "type": "string"
                },
                "titleHalign": {
                  "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
                  "type": "string",
                  "value": "start",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ]
                },
                "titleStyle": {
                  "description": "The CSS style object defining the style of the section title.",
                  "type": "object"
                }
              }
            }
          }
        },
        "symbolHeight": {
          "description": "The height of the legend symbol in pixels. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Symbol Height",
          "value": 0,
          "units": "pixels",
          "help": "symbolHeight"
        },
        "symbolWidth": {
          "description": "The width of the legend symbol in pixels. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Symbol Width",
          "value": 0,
          "units": "pixels",
          "help": "symbolWidth"
        },
        "textStyle": {
          "description": "The CSS style object defining the style of the legend item text.",
          "type": "object",
          "displayName": "Text Style",
          "value": {},
          "help": "textStyle"
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            },
            "tooltipCollapse": {
              "description": "Used for the collapse tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCollapse"
            },
            "tooltipExpand": {
              "description": "Used for the expand tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipExpand"
            }
          }
        },
        "valign": {
          "description": "Defines the vertical alignment of the legend contents.",
          "type": "string",
          "displayName": "Valign",
          "value": "top",
          "help": "valign",
          "enumValues": [
            "bottom",
            "middle",
            "top"
          ],
          "propertyEditorValues": {
            "bottom": {
              "displayName": "Bottom"
            },
            "middle": {
              "displayName": "Middle"
            },
            "top": {
              "displayName": "Top"
            }
          }
        }
      },
      "methods": {
        "getSection": {
          "description": "Returns information for automation testing verification of a specified legend section.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getSection",
          "params": [
            {
              "name": "subIdPath",
              "description": "The array of indices in the subId for the desired legend section.",
              "type": "Array"
            }
          ],
          "return": "object|null"
        },
        "getItem": {
          "description": "Returns information for automation testing verification of a specified legend item.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getItem",
          "params": [
            {
              "name": "subIdPath",
              "description": "The array of indices in the subId for the desired legend item.",
              "type": "Array"
            }
          ],
          "return": "object|null"
        },
        "getPreferredSize": {
          "description": "Returns the preferred size of the legend, given the available width and height. A re-render must be triggered by calling refresh after invoking this function.",
          "help": "getPreferredSize",
          "return": "object"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojDrill": {
          "description": "Triggered during a drill gesture (single click on the legend item).",
          "help": "drill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "any"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each legend item. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-legend> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the node",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent node",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data objects of the outermost to innermost parents of the node",
              "type": "Array"
            },
            "parentKey": {
              "description": "The key of the parent node",
              "type": "any"
            }
          }
        },
        "sectionTemplate": {
          "description": "The sectionTemplate slot is used to specify the template for creating each legend section. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "sectionTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-legend> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the node",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent node",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data objects of the outermost to innermost parents of the node",
              "type": "Array"
            },
            "parentKey": {
              "description": "The key of the parent node",
              "type": "any"
            }
          }
        }
      }
    },
    "oj-legend-item": {
      "name": "oj-legend-item",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Legend Item",
      "type": "core",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlegend"
        }
      },
      "description": "ojLegendItem",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojLegendItem.html",
      "properties": {
        "borderColor": {
          "description": "The border color of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "format": "color",
          "help": "borderColor"
        },
        "categories": {
          "description": "An array of categories for the legend item. Legend items currently only support a single category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "categories"
        },
        "categoryVisibility": {
          "description": "Defines whether the legend item corresponds to visible data items. A hollow symbol is shown if the value is \"hidden\".",
          "type": "string",
          "displayName": "Category Visibility",
          "value": "visible",
          "help": "categoryVisibility",
          "enumValues": [
            "hidden",
            "visible"
          ],
          "propertyEditorValues": {
            "hidden": {
              "displayName": "Hidden"
            },
            "visible": {
              "displayName": "Visible"
            }
          }
        },
        "color": {
          "description": "The color of the legend symbol (line or marker). When symbolType is \"lineWithMarker\", this attribute defines the line color and the markerColor attribute defines the marker color.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "color"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled on the legend item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "lineStyle": {
          "description": "The line style. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
          "type": "string",
          "displayName": "Line Style",
          "value": "solid",
          "help": "lineStyle",
          "enumValues": [
            "dashed",
            "dotted",
            "solid"
          ],
          "propertyEditorValues": {
            "dashed": {
              "displayName": "Dashed"
            },
            "dotted": {
              "displayName": "Dotted"
            },
            "solid": {
              "displayName": "Solid"
            }
          }
        },
        "lineWidth": {
          "description": "The line width in pixels. Only applies when the symbolType is \"line\" or \"lineWithMarker\".",
          "type": "number",
          "displayName": "Line Width",
          "help": "lineWidth"
        },
        "markerColor": {
          "description": "The color of the marker, if different than the line color. Only applies if the symbolType is \"lineWithMarker\".",
          "type": "string",
          "displayName": "Marker Color",
          "format": "color",
          "help": "markerColor"
        },
        "markerShape": {
          "description": "The shape of the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\". See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Shape",
          "value": "square",
          "help": "markerShape",
          "propertyEditorValues": {
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "ellipse": {
              "displayName": "Ellipse"
            },
            "human": {
              "displayName": "Human"
            },
            "plus": {
              "displayName": "Plus"
            },
            "rectangle": {
              "displayName": "Rectangle"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSvgClassName": {
          "description": "The CSS style class to apply to the marker. The style class and inline style will override any other styling specified through the options. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Svg Class Name",
          "value": "",
          "help": "markerSvgClassName"
        },
        "markerSvgStyle": {
          "description": "The inline style to apply to the marker. The style class and inline style will override any other styling specified through the options. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Marker Svg Style",
          "help": "markerSvgStyle"
        },
        "pattern": {
          "description": "The pattern used to fill the marker. Only applies if symbolType is \"marker\" or \"lineWithMarker\".",
          "type": "string",
          "displayName": "Pattern",
          "value": "none",
          "help": "pattern",
          "enumValues": [
            "largeChecker",
            "largeCrosshatch",
            "largeDiagonalLeft",
            "largeDiagonalRight",
            "largeDiamond",
            "largeTriangle",
            "none",
            "smallChecker",
            "smallCrosshatch",
            "smallDiagonalLeft",
            "smallDiagonalRight",
            "smallDiamond",
            "smallTriangle"
          ],
          "propertyEditorValues": {
            "largeChecker": {
              "displayName": "Large Checker"
            },
            "largeCrosshatch": {
              "displayName": "Large Crosshatch"
            },
            "largeDiagonalLeft": {
              "displayName": "Large Diagonal Left"
            },
            "largeDiagonalRight": {
              "displayName": "Large Diagonal Right"
            },
            "largeDiamond": {
              "displayName": "Large Diamond"
            },
            "largeTriangle": {
              "displayName": "Large Triangle"
            },
            "none": {
              "displayName": "None"
            },
            "smallChecker": {
              "displayName": "Small Checker"
            },
            "smallCrosshatch": {
              "displayName": "Small Crosshatch"
            },
            "smallDiagonalLeft": {
              "displayName": "Small Diagonal Left"
            },
            "smallDiagonalRight": {
              "displayName": "Small Diagonal Right"
            },
            "smallDiamond": {
              "displayName": "Small Diamond"
            },
            "smallTriangle": {
              "displayName": "Small Triangle"
            }
          }
        },
        "shortDesc": {
          "description": "The description of this legend item. This is used for accessibility and for customizing the tooltip text.",
          "type": "string",
          "displayName": "Short Desc",
          "value": "",
          "help": "shortDesc"
        },
        "source": {
          "description": "The URI of the image of the legend symbol.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "source"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the legend item. The style class and inline style will override any other styling specified through the options. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the legend item. The style class and inline style will override any other styling specified through the options. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Svg Style",
          "help": "svgStyle"
        },
        "symbolType": {
          "description": "The type of legend symbol to display.",
          "type": "string",
          "displayName": "Symbol Type",
          "value": "marker",
          "help": "symbolType",
          "enumValues": [
            "image",
            "line",
            "lineWithMarker",
            "marker"
          ],
          "propertyEditorValues": {
            "image": {
              "displayName": "Image"
            },
            "line": {
              "displayName": "Line"
            },
            "lineWithMarker": {
              "displayName": "Line With Marker"
            },
            "marker": {
              "displayName": "Marker"
            }
          }
        },
        "text": {
          "description": "The legend item text.",
          "type": "string",
          "displayName": "Text",
          "value": "",
          "help": "text"
        }
      }
    },
    "oj-legend-section": {
      "name": "oj-legend-section",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Legend Section",
      "type": "core",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlegend"
        }
      },
      "description": "ojLegendSection",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojLegendSection.html",
      "properties": {
        "collapsible": {
          "description": "Whether the section is collapsible. Only applies if the legend orientation is vertical.",
          "type": "string",
          "displayName": "Collapsible",
          "value": "off",
          "help": "collapsible",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "text": {
          "description": "The title of the legend section.",
          "type": "string",
          "displayName": "Text",
          "value": "",
          "help": "text"
        },
        "textHalign": {
          "description": "The horizontal alignment of the section title. If the section is collapsible or nested, only start alignment is supported.",
          "type": "string",
          "displayName": "Text Halign",
          "value": "start",
          "help": "textHalign",
          "enumValues": [
            "center",
            "end",
            "start"
          ],
          "propertyEditorValues": {
            "center": {
              "displayName": "Center"
            },
            "end": {
              "displayName": "End"
            },
            "start": {
              "displayName": "Start"
            }
          }
        },
        "textStyle": {
          "description": "The CSS style object defining the style of the section title.",
          "type": "object",
          "displayName": "Text Style",
          "value": {},
          "help": "textStyle"
        }
      }
    },
    "oj-list-view": {
      "name": "oj-list-view",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "List View",
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojlistview"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-clickthrough-disabled"
          ],
          "description": "Use on any element inside an item where you do not want ListView to process the click event."
        },
        {
          "styleGroup": [
            "oj-focus-highlight"
          ],
          "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control. The \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load. The application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are: \"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value. \"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism. \"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result. To change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
        },
        {
          "styleGroup": [
            "oj-full-width"
          ],
          "description": "Use when ListView occupies the entire width of the page. Removes left and right borders in card-layout mode and adjust positioning of cards to improve visual experience."
        },
        {
          "styleGroup": [
            "oj-listview-card-layout"
          ],
          "description": "Shows items as cards and lay them out in a grid."
        }
      ],
      "description": "A list view displays data items as a list or a grid with highly interactive features.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojListView.html",
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "Specifies the alias for the current item when referenced inside the item template.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "currentItem": {
          "description": "Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Current Item",
          "value": null,
          "writeback": true,
          "help": "currentItem"
        },
        "data": {
          "description": "Specifies the data for the list. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "dnd": {
          "description": "Customizes the drag and drop functionality. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Dnd",
          "help": "dnd",
          "properties": {
            "drag": {
              "description": "Customizes the drag functionality.",
              "type": "object",
              "displayName": "Drag",
              "help": "dnd.drag",
              "properties": {
                "items": {
                  "description": "An object that describes drag functionlity for a selected set of items. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Items",
                  "help": "dnd.drag.items",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies one or more MIME types to use for the dragged data in the dataTransfer object. See the Help documentation for more information.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drag.items.dataTypes"
                    },
                    "drag": {
                      "description": "An optional callback function that receives the \"drag\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag",
                      "value": null,
                      "help": "dnd.drag.items.drag"
                    },
                    "dragEnd": {
                      "description": "An optional callback function that receives the \"dragend\" event as its argument.",
                      "type": "function",
                      "displayName": "Drag End",
                      "value": null,
                      "help": "dnd.drag.items.dragEnd"
                    },
                    "dragStart": {
                      "description": "A callback function that receives the \"dragstart\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Start",
                      "value": null,
                      "help": "dnd.drag.items.dragStart"
                    }
                  }
                }
              }
            },
            "drop": {
              "description": "Customizes the drop functionality.",
              "type": "object",
              "displayName": "Drop",
              "help": "dnd.drop",
              "properties": {
                "items": {
                  "description": "An object that describes drop functionlity for a selected set of items.",
                  "type": "object",
                  "displayName": "Items",
                  "help": "dnd.drop.items",
                  "properties": {
                    "dataTypes": {
                      "description": "Specifies one or more data types that this component can accept. See the Help documentation for more information.",
                      "type": "string|Array<string>",
                      "displayName": "Data Types",
                      "value": null,
                      "help": "dnd.drop.items.dataTypes"
                    },
                    "dragEnter": {
                      "description": "An optional callback function that receives the \"dragenter\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Enter",
                      "value": null,
                      "help": "dnd.drop.items.dragEnter"
                    },
                    "dragLeave": {
                      "description": "An optional callback function that receives the \"dragleave\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Leave",
                      "value": null,
                      "help": "dnd.drop.items.dragLeave"
                    },
                    "dragOver": {
                      "description": "An optional callback function that receives the \"dragover\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drag Over",
                      "value": null,
                      "help": "dnd.drop.items.dragOver"
                    },
                    "drop": {
                      "description": "An optional callback function that receives the \"drop\" event and context information as its arguments.",
                      "type": "function",
                      "displayName": "Drop",
                      "value": null,
                      "help": "dnd.drop.items.drop"
                    }
                  }
                }
              }
            },
            "reorder": {
              "description": "Customizes the item reordering functionality.",
              "type": "object",
              "displayName": "Reorder",
              "help": "dnd.reorder",
              "properties": {
                "items": {
                  "description": "Specify the item reordering functionality. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Items",
                  "value": "disabled",
                  "help": "dnd.reorder.items",
                  "enumValues": [
                    "disabled",
                    "enabled"
                  ],
                  "propertyEditorValues": {
                    "disabled": {
                      "description": "Item reordering is disabled.",
                      "displayName": "Disabled"
                    },
                    "enabled": {
                      "description": "Item reordering is enabled.",
                      "displayName": "Enabled"
                    }
                  }
                }
              }
            }
          }
        },
        "drillMode": {
          "description": "Specifies whether expand or collapse operations are allowed.",
          "type": "string",
          "displayName": "Drill Mode",
          "value": "collapsible",
          "help": "drillMode",
          "enumValues": [
            "collapsible",
            "none"
          ],
          "propertyEditorValues": {
            "collapsible": {
              "description": "Group item can be expanded or collapsed by user.",
              "displayName": "Collapsible"
            },
            "none": {
              "description": "The expand state of a group item cannot be changed by user.",
              "displayName": "None"
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set containing the keys of the items that should be expanded. See the Help documentation for more information.",
          "type": "KeySet",
          "displayName": "Expanded",
          "value": "new ExpandedKeySet();",
          "writeback": true,
          "help": "expanded"
        },
        "firstSelectedItem": {
          "description": "Specifies the key and data of the first selected item. See the Help documentation for more information.",
          "type": "object",
          "displayName": "First Selected Item",
          "value": {
            "key": null,
            "data": null
          },
          "writeback": true,
          "readOnly": true,
          "help": "firstSelectedItem",
          "properties": {
            "key": {
              "description": "The key of the first selected item",
              "type": "any"
            },
            "data": {
              "description": "The data of the first selected item",
              "type": "any"
            }
          }
        },
        "groupHeaderPosition": {
          "description": "Specifies whether group header should stick to the top as user scrolls.",
          "type": "string",
          "displayName": "Group Header Position",
          "value": "sticky",
          "help": "groupHeaderPosition",
          "enumValues": [
            "static",
            "sticky"
          ],
          "propertyEditorValues": {
            "static": {
              "description": "The group header position updates as user scrolls.",
              "displayName": "Static"
            },
            "sticky": {
              "description": "The group header is fixed at the top when user scrolls.",
              "displayName": "Sticky"
            }
          }
        },
        "item": {
          "description": "Customizes the functionality of each item on the list.",
          "type": "object",
          "displayName": "Item",
          "help": "item",
          "properties": {
            "focusable": {
              "description": "Specifies whether the item can receive keyboard focus. See the Help documentation for more information.",
              "type": "boolean|function",
              "displayName": "Focusable",
              "value": true,
              "help": "item.focusable"
            },
            "renderer": {
              "description": "Specifies the renderer for the item. See the Help documentation for more information.",
              "type": "null|function",
              "displayName": "Renderer",
              "value": null,
              "help": "item.renderer"
            },
            "selectable": {
              "description": "Specifies whether the item can be selected. See the Help documentation for more information.",
              "type": "boolean|function",
              "displayName": "Selectable",
              "value": true,
              "help": "item.selectable"
            }
          }
        },
        "scrollPolicy": {
          "description": "Specifies how data are fetched as user scrolls down the list.",
          "type": "string|null",
          "displayName": "Scroll Policy",
          "value": "auto",
          "help": "scrollPolicy",
          "enumValues": [
            "auto",
            "loadAll",
            "loadMoreOnScroll"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "The behavior is determined by the component. By default the behavior is the same as \"loadMoreOnScroll\" except when legacy TableDataSource is used, in which case the behavior is the same as \"loadAll\".",
              "displayName": "Auto"
            },
            "loadAll": {
              "description": "Fetch and render all data.",
              "displayName": "Load All"
            },
            "loadMoreOnScroll": {
              "description": "Additional data is fetched when the user scrolls towards the bottom of the ListView. Not compatible when used with Paging Control \"loadMore\" mode.",
              "displayName": "Load More On Scroll"
            }
          }
        },
        "scrollPolicyOptions": {
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches. See the Help documentation for more information.",
          "type": "Object<string, number>|null",
          "displayName": "Scroll Policy Options",
          "help": "scrollPolicyOptions",
          "properties": {
            "fetchSize": {
              "description": "The number of items to fetch in each block",
              "type": "number",
              "displayName": "Fetch Size",
              "value": 25,
              "help": "scrollPolicyOptions.fetchSize"
            },
            "maxCount": {
              "description": "The maximum total number of items to fetch",
              "type": "number",
              "displayName": "Max Count",
              "value": 500,
              "help": "scrollPolicyOptions.maxCount"
            },
            "scroller": {
              "description": "The element used to determine the scroll position as well as the maximum scroll position. See the Help documentation for more information.",
              "type": "Element",
              "displayName": "Scroller",
              "value": null,
              "help": "scrollPolicyOptions.scroller"
            }
          }
        },
        "scrollPosition": {
          "description": "Specifies the current scroll position of the list. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Scroll Position",
          "value": {
            "x": 0,
            "y": 0
          },
          "writeback": true,
          "help": "scrollPosition",
          "properties": {
            "x": {
              "description": "the horizontal position in pixels",
              "type": "number"
            },
            "y": {
              "description": "the vertical position in pixels",
              "type": "number"
            },
            "index": {
              "description": "the zero-based index of the item. If scrollPolicy is set to 'loadMoreOnScroll' and the index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the list is reached and there's no more items to fetch.",
              "type": "number"
            },
            "parent": {
              "description": "the key of the parent where the index is relative to. If not specified, then the root is assumed",
              "type": "any"
            },
            "key": {
              "description": "the key of the item. If DataProvider is used for data and the key does not exists in the DataProvider, then the value is ignored. If DataProvider is not used then ListView will fetch and scroll until the item is found or the end of the list is reached and there's no more items to fetch.",
              "type": "any"
            },
            "offsetX": {
              "description": "the horizontal offset in pixels relative to the item identified by key/index.",
              "type": "number"
            },
            "offsetY": {
              "description": "the vertical offset in pixels relative to the item identified by key/index.",
              "type": "number"
            }
          }
        },
        "selected": {
          "description": "Specifies the keys of the current selected items. See the Help documentation for more information.",
          "type": "KeySet",
          "displayName": "Selected",
          "value": "new KeySetImpl();",
          "writeback": true,
          "help": "selected"
        },
        "selection": {
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "Use selected attribute instead."
            }
          ],
          "description": "Specifies the current selections in the list. See the Help documentation for more information.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only one item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "selectionRequired": {
          "description": "Specifies whether there should be at least one item selected when selection is enabled.",
          "type": "boolean",
          "displayName": "Selection Required",
          "value": false,
          "help": "selectionRequired"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "accessibleNavigateSkipItems": {
              "description": "Provides properties to customize the screen reader text when focus skips a number of items as a result of up/down arrow navigation in card layout mode.",
              "type": "string",
              "help": "translations.accessibleNavigateSkipItems"
            },
            "accessibleReorderAfterItem": {
              "description": "Provides properties to customize the screen reader text when the tentative drop target is after a certain item.",
              "type": "string",
              "help": "translations.accessibleReorderAfterItem"
            },
            "accessibleReorderBeforeItem": {
              "description": "Provides properties to customize the screen reader text when the tentative drop target is before a certain item.",
              "type": "string",
              "help": "translations.accessibleReorderBeforeItem"
            },
            "accessibleReorderInsideItem": {
              "description": "Provides properties to customize the screen reader text when the tentative drop target is inside a certain item.",
              "type": "string",
              "help": "translations.accessibleReorderInsideItem"
            },
            "accessibleReorderTouchInstructionText": {
              "description": "Provides properties to customize the screen reader touch instructional text for reordering items.",
              "type": "string",
              "help": "translations.accessibleReorderTouchInstructionText"
            },
            "indexerCharacters": {
              "description": "Provides properties to customize the characters to display in the Indexer.",
              "type": "string",
              "help": "translations.indexerCharacters"
            },
            "labelCopy": {
              "description": "Provides properties to customize the context menu copy label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCopy"
            },
            "labelCut": {
              "description": "Provides properties to customize the context menu cut label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCut"
            },
            "labelPaste": {
              "description": "Provides properties to customize the context menu paste label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelPaste"
            },
            "labelPasteAfter": {
              "description": "Provides properties to customize the context menu paste after label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelPasteAfter"
            },
            "labelPasteBefore": {
              "description": "Provides properties to customize the context menu paste before label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelPasteBefore"
            },
            "msgFetchingData": {
              "description": "Provides properties to customize the message text used by ListView when waiting for data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgFetchingData"
            },
            "msgItemsAppended": {
              "description": "Provides properties to customize the message text used by ListView when items are appended. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgItemsAppended"
            },
            "msgNoData": {
              "description": "Provides properties to customize the message text used by ListView when there are no items. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgNoData"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Redraw the entire list.",
          "help": "refresh",
          "return": "void"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getDataForVisibleItem": {
          "description": "Gets the raw data of an item.",
          "help": "getDataForVisibleItem",
          "params": [
            {
              "name": "context",
              "description": "The context of the item to retrieve raw data.",
              "type": "object"
            }
          ],
          "return": "any"
        },
        "getIndexerModel": {
          "description": "Gets the IndexerModel which can be used with the ojIndexer.",
          "status": [
            {
              "type": "deprecated",
              "since": "3.0.0",
              "description": "Implements your own IndexerModel or use the <a href=\"oj.IndexerModelTreeDataSource.html\">IndexerModelTreeDataSource</a> class instead."
            }
          ],
          "help": "getIndexerModel",
          "return": "object"
        },
        "scrollToItem": {
          "description": "Scrolls a loaded item until it is visible.",
          "help": "scrollToItem",
          "params": [
            {
              "name": "item",
              "description": "An object with a 'key' property that identifies the item to scroll to.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when the default animation of a particular action is about to start.",
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "the action that starts the animation. See animation section for a list of actions.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            },
            "endCallback": {
              "description": "if the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when the default animation of a particular action has ended.",
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "the action that started the animation. See animation section for a list of actions.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            }
          }
        },
        "ojBeforeCurrentItem": {
          "description": "Triggered before the current item is changed.",
          "cancelable": true,
          "help": "beforeCurrentItem",
          "detail": {
            "previousKey": {
              "description": "the key of the previous item",
              "type": "any"
            },
            "previousItem": {
              "description": "the previous item",
              "type": "Element"
            },
            "key": {
              "description": "the key of the new current item",
              "type": "any"
            },
            "item": {
              "description": "the new current item",
              "type": "Element"
            }
          }
        },
        "ojBeforeExpand": {
          "description": "Triggered before an item is expanded.",
          "cancelable": true,
          "help": "beforeExpand",
          "detail": {
            "key": {
              "description": "the key of the item to be expanded",
              "type": "any"
            },
            "item": {
              "description": "the item to be expanded",
              "type": "Element"
            }
          }
        },
        "ojBeforeCollapse": {
          "description": "Triggered before an item is collapsed.",
          "cancelable": true,
          "help": "beforeCollapse",
          "detail": {
            "key": {
              "description": "the key of the item to be collapsed",
              "type": "any"
            },
            "item": {
              "description": "the item to be collapsed",
              "type": "Element"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered after an item has been collapsed. See the Help documentation for more information.",
          "help": "collapse",
          "detail": {
            "key": {
              "description": "The key of the item that was just collapsed.",
              "type": "any"
            },
            "item": {
              "description": "The list item that was just collapsed.",
              "type": "Element"
            }
          }
        },
        "ojCopy": {
          "description": "Triggered when the copy action is performed on an item.",
          "help": "copy",
          "detail": {
            "items": {
              "description": "an array of items in which the copy action is performed on",
              "type": "Array<Element>"
            }
          }
        },
        "ojCut": {
          "description": "Triggered when the cut action is performed on an item.",
          "help": "cut",
          "detail": {
            "items": {
              "description": "an array of items in which the cut action is performed on",
              "type": "Array<Element>"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered after an item has been expanded. See the Help documentation for more information.",
          "help": "expand",
          "detail": {
            "key": {
              "description": "The key of the item that was just expanded.",
              "type": "any"
            },
            "item": {
              "description": "The list item that was just expanded.",
              "type": "Element"
            }
          }
        },
        "ojPaste": {
          "description": "Triggered when the paste action is performed on an item.",
          "help": "paste",
          "detail": {
            "item": {
              "description": "the element in which the paste action is performed on",
              "type": "Element"
            }
          }
        },
        "ojReorder": {
          "description": "Triggered after items are reordered, whether through a drag and drop action or a cut and paste action.",
          "help": "reorder",
          "detail": {
            "items": {
              "description": "an array of items that are moved",
              "type": "Array<Element>"
            },
            "position": {
              "description": "the drop position relative to the reference item. Possible values are \"before\", \"after\", \"inside\"",
              "type": "string"
            },
            "reference": {
              "description": "the item where the moved items are drop on",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the list. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-list-view> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current item being rendered",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent item",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item being rendered",
              "type": "any"
            },
            "depth": {
              "description": "The depth of the current item (available when hierarchical data is provided) being rendered. The depth of the first level children under the invisible root is 1.",
              "type": "number"
            },
            "leaf": {
              "description": "True if the current item is a leaf node (available when hierarchical data is provided).",
              "type": "boolean"
            },
            "parentkey": {
              "description": "The key of the parent item (available when hierarchical data is provided). The parent key is null for root nodes.",
              "type": "any"
            }
          }
        }
      }
    },
    "oj-masonry-layout": {
      "name": "oj-masonry-layout",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Masonry Layout",
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmasonrylayout"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-masonrylayout-tile-1x1"
          ],
          "description": "A tile that spans 1 column and 1 row."
        },
        {
          "styleGroup": [
            "oj-masonrylayout-tile-1x2"
          ],
          "description": "A tile that spans 1 column and 2 rows."
        },
        {
          "styleGroup": [
            "oj-masonrylayout-tile-1x3"
          ],
          "description": "A tile that spans 1 column and 3 rows."
        },
        {
          "styleGroup": [
            "oj-masonrylayout-tile-2x1"
          ],
          "description": "A tile that spans 2 columns and 1 row."
        },
        {
          "styleGroup": [
            "oj-masonrylayout-tile-2x2"
          ],
          "description": "A tile that spans 2 columns and 2 rows."
        },
        {
          "styleGroup": [
            "oj-masonrylayout-tile-2x3"
          ],
          "description": "A tile that spans 2 columns and 3 rows."
        },
        {
          "styleGroup": [
            "oj-masonrylayout-tile-3x1"
          ],
          "description": "A tile that spans 3 columns and 1 row."
        },
        {
          "styleGroup": [
            "oj-masonrylayout-tile-3x2"
          ],
          "description": "A tile that spans 3 columns and 2 rows."
        }
      ],
      "description": "A masonry layout lays out its children in a grid of tiles.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojMasonryLayout.html",
      "properties": {
        "reorderHandle": {
          "description": "Specifies the selector of the child DOM element that can be used to reorder the child.",
          "type": "string",
          "displayName": "Reorder Handle",
          "value": null,
          "help": "reorderHandle"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "labelCut": {
              "description": "Context menu text used for cutting a tile. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCut"
            },
            "labelPasteAfter": {
              "description": "Context menu text used for pasting a tile after another tile. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelPasteAfter"
            },
            "labelPasteBefore": {
              "description": "Context menu text used for pasting a tile before another tile. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelPasteBefore"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the visual state of the masonryLayout.",
          "help": "refresh",
          "return": "void"
        },
        "resizeTile": {
          "description": "Resize a tile.",
          "help": "resizeTile",
          "params": [
            {
              "name": "selector",
              "description": "Selector identifying the tile to resize.",
              "type": "string"
            },
            {
              "name": "sizeStyleClass",
              "description": "New size style class to apply to the tile.",
              "type": "string"
            }
          ],
          "return": "void"
        },
        "insertTile": {
          "description": "Insert a tile.",
          "help": "insertTile",
          "params": [
            {
              "name": "selector",
              "description": "Selector identifying the tile to insert. The tile does not need to be a child of the oj-masonry-layout when this method is called. This method will reparent the tile to the oj-masonry-layout.",
              "type": "string"
            },
            {
              "name": "index",
              "description": "The 0-based index into the set of rendered oj-masonry-layout children where the tile will be inserted.",
              "type": "number"
            }
          ],
          "return": "void"
        },
        "removeTile": {
          "description": "Remove a tile.",
          "help": "removeTile",
          "params": [
            {
              "name": "selector",
              "description": "Selector identifying the tile to remove.",
              "type": "string"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Event triggered when the default animation of a particular action is about to start. See the Help documentation for more information.",
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"insert\" - when a tile is inserted \"move\" - when a tile is moved \"remove\" - when a tile is removed \"resize\" - when a tile is resized \"reorder\" - when a tile is reordered Note that some animation effects may not look appropriate for a given action.",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function after it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Event triggered when the default animation of a particular action has ended.",
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"insert\" - when a tile is inserted \"move\" - when a tile is moved \"remove\" - when a tile is removed \"resize\" - when a tile is resized \"reorder\" - when a tile is reordered ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        },
        "ojBeforeInsert": {
          "description": "Event triggered before a tile is inserted.",
          "cancelable": true,
          "help": "beforeInsert",
          "detail": {
            "tile": {
              "description": "The tile that is about to be inserted.",
              "type": "Element"
            },
            "index": {
              "description": "The 0-based index into the set of rendered oj-masonry-layout children where the tile will be inserted.",
              "type": "number"
            }
          }
        },
        "ojInsert": {
          "description": "Event triggered after a tile is inserted.",
          "help": "insert",
          "detail": {
            "tile": {
              "description": "The tile that was inserted.",
              "type": "Element"
            },
            "index": {
              "description": "The 0-based index into the set of rendered oj-masonry-layout children where the tile was inserted.",
              "type": "number"
            }
          }
        },
        "ojBeforeRemove": {
          "description": "Event triggered before a tile is removed.",
          "cancelable": true,
          "help": "beforeRemove",
          "detail": {
            "tile": {
              "description": "The tile that will be removed.",
              "type": "Element"
            }
          }
        },
        "ojRemove": {
          "description": "Event triggered after a tile is removed.",
          "help": "remove",
          "detail": {
            "tile": {
              "description": "The tile that was removed.",
              "type": "Element"
            }
          }
        },
        "ojBeforeResize": {
          "description": "Event triggered before a tile is resized.",
          "cancelable": true,
          "help": "beforeResize",
          "detail": {
            "tile": {
              "description": "The tile that will be resized.",
              "type": "Element"
            },
            "previousSizeStyleClass": {
              "description": "The previous size style class applied to the tile.",
              "type": "string"
            },
            "sizeStyleClass": {
              "description": "The new size style class that will be applied to the tile.",
              "type": "string"
            }
          }
        },
        "ojResize": {
          "description": "Event triggered after a tile is resized.",
          "help": "resize",
          "detail": {
            "tile": {
              "description": "The tile that was resized.",
              "type": "Element"
            },
            "previousSizeStyleClass": {
              "description": "The previous size style class applied to the tile.",
              "type": "string"
            },
            "sizeStyleClass": {
              "description": "The new size style class applied to to the tile.",
              "type": "string"
            }
          }
        },
        "ojBeforeReorder": {
          "description": "Event triggered before a tile is reordered.",
          "cancelable": true,
          "help": "beforeReorder",
          "detail": {
            "tile": {
              "description": "The tile that will be reordered.",
              "type": "Element"
            },
            "fromIndex": {
              "description": "The 0-based index into the set of rendered oj-masonry-layout children from which the tile will be reordered.",
              "type": "number"
            }
          }
        },
        "ojReorder": {
          "description": "Event triggered after a tile is reordered.",
          "help": "reorder",
          "detail": {
            "tile": {
              "description": "The tile that was reordered.",
              "type": "Element"
            },
            "fromIndex": {
              "description": "The 0-based index into the set of rendered oj-masonry-layout children from which the tile was reordered.",
              "type": "number"
            },
            "toIndex": {
              "description": "The 0-based index into the set of rendered oj-masonry-layout children to which the tile was reordered.",
              "type": "number"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-masonry-layout element accepts arbitrary direct child elements that can be sized and positioned, which it will lay out as a grid of tiles. See the Help documentation for more information.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-menu": {
      "name": "oj-menu",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Menu",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmenu"
        }
      },
      "description": "A menu displays a list of options in a popup.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojMenu.html",
      "properties": {
        "disabled": {
          "description": "Disables the menu if set to true.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "openOptions": {
          "description": "Specifies settings for launching a menu. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Open Options",
          "help": "openOptions",
          "properties": {
            "display": {
              "description": "Specifies whether the menu displays as a dropdown or as a sheet. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Display",
              "value": "auto",
              "help": "openOptions.display",
              "enumValues": [
                "auto",
                "dropDown",
                "sheet"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "Displays the menu as a sheet or dropDown, depending on the screen width.",
                  "displayName": "Auto"
                },
                "dropDown": {
                  "description": "Displays the menu as a dropDown.",
                  "displayName": "Drop Down"
                },
                "sheet": {
                  "description": "Displays the menu as a sheet.",
                  "displayName": "Sheet"
                }
              }
            },
            "initialFocus": {
              "description": "Specifies focus behavior when the menu is initially opened.",
              "type": "string",
              "displayName": "Initial Focus",
              "value": "menu",
              "help": "openOptions.initialFocus",
              "enumValues": [
                "firstItem",
                "menu",
                "none"
              ],
              "propertyEditorValues": {
                "firstItem": {
                  "description": "Focuses the first menu item (e.g. MenuButton DownArrow behavior).",
                  "displayName": "First Item"
                },
                "menu": {
                  "description": "Focuses the menu itself, with no menu item focused (e.g. typical Context Menu behavior).",
                  "displayName": "Menu"
                },
                "none": {
                  "description": "Leaves focus where it is, e.g. on the launching component. The application must verify that the result is accessible.",
                  "displayName": "None"
                }
              }
            },
            "launcher": {
              "description": "Specifes the DOM node that launches this menu. See the Help documentation for more information.",
              "type": "string|Element",
              "displayName": "Launcher",
              "value": null,
              "help": "openOptions.launcher"
            },
            "position": {
              "description": "Specifies the position of a dropDown menu when launched. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Position",
              "help": "openOptions.position",
              "properties": {
                "at": {
                  "description": "Defines which position on the target element (\"of\") to align the positioned element against.",
                  "type": "object",
                  "displayName": "At",
                  "help": "openOptions.position.at",
                  "properties": {
                    "horizontal": {
                      "description": "Defines the horizontal alignment of what the menu is aligned to. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Horizontal",
                      "help": "openOptions.position.at.horizontal",
                      "enumValues": [
                        "center",
                        "end",
                        "left",
                        "right",
                        "start"
                      ],
                      "propertyEditorValues": {
                        "center": {
                          "displayName": "Center"
                        },
                        "end": {
                          "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                          "displayName": "End"
                        },
                        "left": {
                          "displayName": "Left"
                        },
                        "right": {
                          "displayName": "Right"
                        },
                        "start": {
                          "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                          "displayName": "Start"
                        }
                      }
                    },
                    "vertical": {
                      "description": "Defines the vertical alignment of what the menu is aligned to. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Vertical",
                      "help": "openOptions.position.at.vertical",
                      "enumValues": [
                        "bottom",
                        "center",
                        "top"
                      ],
                      "propertyEditorValues": {
                        "bottom": {
                          "displayName": "Bottom"
                        },
                        "center": {
                          "displayName": "Center"
                        },
                        "top": {
                          "displayName": "Top"
                        }
                      }
                    }
                  }
                },
                "collision": {
                  "description": "Rule for alternate alignment.",
                  "type": "string",
                  "displayName": "Collision",
                  "value": "flipfit",
                  "help": "openOptions.position.collision",
                  "enumValues": [
                    "fit",
                    "flip",
                    "flipcenter",
                    "flipfit",
                    "none"
                  ],
                  "propertyEditorValues": {
                    "fit": {
                      "description": "shift the element away from the edge of the window.",
                      "displayName": "Fit"
                    },
                    "flip": {
                      "description": "the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.",
                      "displayName": "Flip"
                    },
                    "flipcenter": {
                      "description": "first applies the flip rule and follows with center alignment.",
                      "displayName": "Flipcenter"
                    },
                    "flipfit": {
                      "description": "first applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.",
                      "displayName": "Flipfit"
                    },
                    "none": {
                      "description": "no collision detection.",
                      "displayName": "None"
                    }
                  }
                },
                "my": {
                  "description": "Defines which edge on the menu to align with the target (\"of\") element.",
                  "type": "object",
                  "displayName": "My",
                  "help": "openOptions.position.my",
                  "properties": {
                    "horizontal": {
                      "description": "Defines the horizontal alignment of the menu.",
                      "type": "string",
                      "displayName": "Horizontal",
                      "value": "start",
                      "help": "openOptions.position.my.horizontal",
                      "enumValues": [
                        "center",
                        "end",
                        "left",
                        "right",
                        "start"
                      ],
                      "propertyEditorValues": {
                        "center": {
                          "displayName": "Center"
                        },
                        "end": {
                          "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                          "displayName": "End"
                        },
                        "left": {
                          "displayName": "Left"
                        },
                        "right": {
                          "displayName": "Right"
                        },
                        "start": {
                          "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                          "displayName": "Start"
                        }
                      }
                    },
                    "vertical": {
                      "description": "Defines the vertical alignment of the menu.",
                      "type": "string",
                      "displayName": "Vertical",
                      "value": "top",
                      "help": "openOptions.position.my.vertical",
                      "enumValues": [
                        "bottom",
                        "center",
                        "top"
                      ],
                      "propertyEditorValues": {
                        "bottom": {
                          "displayName": "Bottom"
                        },
                        "center": {
                          "displayName": "Center"
                        },
                        "top": {
                          "displayName": "Top"
                        }
                      }
                    }
                  }
                },
                "of": {
                  "description": "Which element to position the menu against. See the Help documentation for more information.",
                  "type": "string|object",
                  "displayName": "Of",
                  "help": "openOptions.position.of"
                },
                "offset": {
                  "description": "Defines a point offset in pixels from the (\"my\") alignment.",
                  "type": "object",
                  "displayName": "Offset",
                  "help": "openOptions.position.offset",
                  "properties": {
                    "x": {
                      "description": "Horizontal aligment offset.",
                      "type": "number",
                      "displayName": "X",
                      "value": 0,
                      "help": "openOptions.position.offset.x"
                    },
                    "y": {
                      "description": "Vertical alignment offset.",
                      "type": "number",
                      "displayName": "Y",
                      "value": 0,
                      "help": "openOptions.position.offset.y"
                    }
                  }
                }
              }
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "ariaFocusSkipLink": {
              "description": "Label assigned to a hidden anchor tag used for accessibility navigation on platforms supporting VoiceOver. The link is injected before the first menu item. It is used for establishing VO cursor focus. Activation of the link will move focus to the first menu item.",
              "type": "string",
              "help": "translations.ariaFocusSkipLink"
            },
            "labelCancel": {
              "description": "Label for the \"Cancel\" menu item. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCancel"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the disclosed state of the menu. See the Help documentation for more information.",
          "help": "refresh",
          "return": "void"
        },
        "close": {
          "description": "Closes the menu.",
          "help": "close",
          "return": "void"
        },
        "open": {
          "description": "Launches this menu after firing the ojBeforeOpen event. See the Help documentation for more information.",
          "help": "open",
          "params": [
            {
              "name": "event",
              "description": "What triggered the menu launch. May be null. May be omitted if subsequent params are omitted.",
              "type": "Event"
            },
            {
              "name": "openOptions",
              "description": "Options to merge with the openOptions option. May be null. May be omitted if subsequent params are omitted.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that is starting the animation. The number of actions can vary from element to element. Suggested values are: \"open\" - when a menu element is opened \"close\" - when a menu element is closed ",
              "type": "\"open\"|\"close\""
            },
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "action": {
              "description": "The action that is ending the animation. The number of actions can vary from element to element. Suggested values are: \"open\" - when a menu element is opened \"close\" - when a menu element is closed ",
              "type": "\"open\"|\"close\""
            }
          }
        },
        "ojBeforeOpen": {
          "description": "Triggered before this menu is launched. See the Help documentation for more information.",
          "bubbles": true,
          "cancelable": true,
          "help": "beforeOpen",
          "detail": {
            "openOptions": {
              "description": "effecting the open operation",
              "type": "object",
              "properties": {
                "display": {
                  "description": "Determines whether the menu is displayed as a dropDown menu or a sheet menu.",
                  "type": "string"
                },
                "initialFocus": {
                  "description": "Determines focus behavior when the menu is initially opened.",
                  "type": "string"
                },
                "launcher": {
                  "description": "The DOM node (which may or may not be a JET element) that launches this menu.",
                  "type": "string|Element"
                },
                "position": {
                  "description": "Determines the position of a dropDown menu when launched. Ignored for sheet menus.",
                  "type": "object",
                  "properties": {
                    "my": {
                      "description": "Defines which edge on the menu to align with the target (\"of\") element.",
                      "type": "object",
                      "properties": {
                        "vertical": {
                          "description": "Vertical alignment.",
                          "type": "\"top\"|\"bottom\"|\"center\""
                        },
                        "horizontal": {
                          "description": "Horizontal alignment. \"start\" evaluates to \"left\" in LTR mode and \"right\" in RTL mode. \"end\" evaluates to \"right\" in LTR mode and \"left\" in RTL mode. ",
                          "type": "\"start\"|\"end\"|\"left\"|\"center\"|\"bottom\""
                        }
                      }
                    },
                    "at": {
                      "description": "Defines which position on the target element (\"of\") to align the positioned element against.",
                      "type": "object",
                      "properties": {
                        "vertical": {
                          "description": "Vertical alignment.",
                          "type": "\"top\"|\"bottom\"|\"center\""
                        },
                        "horizontal": {
                          "description": "Horizontal alignment. \"start\" evaluates to \"left\" in LTR mode and \"right\" in RTL mode. \"end\" evaluates to \"right\" in LTR mode and \"left\" in RTL mode. ",
                          "type": "\"start\"|\"end\"|\"left\"|\"center\"|\"bottom\""
                        }
                      }
                    },
                    "offset": {
                      "description": "Defines a point offset in pixels from the (\"my\") alignment.",
                      "type": "object",
                      "properties": {
                        "x": {
                          "description": "Horizontal aligment offset.",
                          "type": "number"
                        },
                        "y": {
                          "description": "Vertical alignment offset.",
                          "type": "number"
                        }
                      }
                    },
                    "of": {
                      "description": "Which element to position the menu against. The default is the launcher argument passed to the open method. If the value is a string, it should be a selector or the literal string value of window. Otherwise, a point of x,y. When a point is used, the values are relative to the whole document. Page horizontal and vertical scroll offsets need to be factored into this point - see UIEvent pageX, pageY.",
                      "type": "string|object",
                      "properties": {
                        "x": {
                          "description": "Horizontal aligment offset.",
                          "type": "number"
                        },
                        "y": {
                          "description": "Vertical alignment offset.",
                          "type": "number"
                        }
                      }
                    },
                    "collision": {
                      "description": "Rule for alternate alignment. \"flip\" the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used. \"fit\" shift the element away from the edge of the window. \"flipfit\" first applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible. flipcenter first applies the flip rule and follows with center alignment. \"none\" no collision detection. ",
                      "type": "\"flip\"|\"fit\"|\"flipfit\"|\"flipcenter\"|\"none\""
                    }
                  }
                }
              }
            }
          }
        },
        "ojClose": {
          "description": "Triggered after this menu is closed.",
          "help": "close",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojOpen": {
          "description": "Triggered after this menu is launched.",
          "help": "open",
          "detail": {
            "event": {
              "description": "a custom event",
              "type": "Event"
            }
          }
        },
        "ojAction": {
          "description": "Triggered when a menu item is selected. To ensure keyboard accessibility, the only correct, supported way to react to the selection of a menu item is to listen for this event. See the Help documentation for more information.",
          "bubbles": true,
          "cancelable": true,
          "help": "action"
        }
      },
      "slots": {
        "": {
          "description": "The oj-menu element accepts oj-option and oj-menu-select-many as child elements.",
          "displayName": "default",
          "help": "Default"
        }
      }
    },
    "oj-menu-button": {
      "name": "oj-menu-button",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Menu Button",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojbutton"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-button-sm",
            "oj-button-lg",
            "oj-button-xl"
          ],
          "description": "Makes the button small, large, or extra large. Is applied to the Button's root element."
        },
        {
          "styleGroup": [
            "oj-button-primary"
          ],
          "description": "Draws attention to the button, often identifying the primary action in a set of buttons. Designed for use with a push button. In some themes, this class does nothing. Is applied to the Button's root element."
        },
        {
          "styleGroup": [
            "oj-button-confirm"
          ],
          "description": "Identifies an action to confirm. Designed for use with a push button. Is applied to the Button's root element."
        },
        {
          "styleGroup": [
            "oj-focus-highlight"
          ],
          "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control. The \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load. The application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are: \"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value. \"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism. \"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result. To change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
        }
      ],
      "description": "A menu button launches a menu when clicked.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojMenuButton.html",
      "properties": {
        "chroming": {
          "description": "Indicates in what states the button has chrome (background and border).",
          "type": "string",
          "displayName": "Chroming",
          "help": "chroming",
          "enumValues": [
            "full",
            "half",
            "outlined"
          ],
          "propertyEditorValues": {
            "full": {
              "description": "In typical themes, full-chrome buttons always have chrome.",
              "displayName": "Full"
            },
            "half": {
              "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states. Half-chroming is recommended for buttons in a toolbar. (This is the toolbar default in most themes.)",
              "displayName": "Half"
            },
            "outlined": {
              "description": "In typical themes, outlined buttons are similar to half-chrome buttons, but have a border in the default state.",
              "displayName": "Outlined"
            }
          }
        },
        "disabled": {
          "description": "Specifies that the button element should be disabled.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "display": {
          "description": "Specifies whether the button displays label and icons, or just icons.",
          "type": "string",
          "displayName": "Display",
          "value": "all",
          "help": "display",
          "enumValues": [
            "all",
            "icons"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAction": {
          "description": "Triggered when a button is clicked, whether by keyboard, mouse, or touch events. To meet accessibility requirements, the only supported way to react to the click of a button is to listen for this event.",
          "bubbles": true,
          "cancelable": true,
          "help": "action"
        }
      },
      "slots": {
        "": {
          "description": "The default slot is the button's text label. The oj-menu-button element accepts plain text or DOM nodes as children for the default slot.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "endIcon": {
          "description": "The endIcon slot is the button's end icon. The oj-menu button element accepts DOM nodes as children with the endIcon slot.",
          "help": "endIcon"
        },
        "menu": {
          "description": "The menu associatied with the menu button. The oj-menu-button element accepts a single oj-menu element as a child with the menu slot.",
          "maxItems": 1,
          "help": "menu"
        },
        "startIcon": {
          "description": "The startIcon slot is the button's start icon. The oj-menu-button element accepts DOM nodes as children with the startIcon slot.",
          "help": "startIcon"
        }
      }
    },
    "oj-menu-select-many": {
      "name": "oj-menu-select-many",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Menu Multi Select",
      "type": "core",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmenuselectmany"
        }
      },
      "description": "A menu select many allows the user to select one or more menu items from a set.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojMenuSelectMany.html",
      "properties": {
        "disabled": {
          "description": "Disables all the checkable menu items if set to true.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "options": {
          "description": "The checkable menu option items.",
          "type": "Array<Object>|object|null",
          "displayName": "Options",
          "value": null,
          "help": "options",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "menu item id.",
                  "type": "string"
                },
                "disabled": {
                  "description": "menu item is disabled.",
                  "type": "boolean"
                },
                "label": {
                  "description": "menu item label.",
                  "type": "string"
                },
                "value": {
                  "description": "menu item value.",
                  "type": "any"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the element.",
          "type": "Array<any>",
          "displayName": "Value",
          "value": [],
          "writeback": true,
          "help": "value"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-menu-select-many element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "Default"
        }
      }
    },
    "oj-message": {
      "name": "oj-message",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Message",
      "type": "core",
      "since": "5.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmessage"
        }
      },
      "description": "A message conveys categorized information to the user, often regarding errors.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojMessage.html",
      "properties": {
        "displayOptions": {
          "description": "Specifies the display options for contents of the message.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "category": {
              "description": "Specifies the display option for message category text in this message.",
              "type": "string",
              "displayName": "Category",
              "value": "auto",
              "help": "displayOptions.category",
              "enumValues": [
                "auto",
                "header",
                "none"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "the component decides whether and where the ojMessage#message.category text is displayed. The behavior is same as 'header' option, but may change in future releases.",
                  "displayName": "Auto"
                },
                "header": {
                  "description": "if the ojMessage#message.category property is specified, its value will be displayed in the header region of the message next to message icon. If ojMessage#message.category property is not specified, a translated text corresponding to the value of the ojMessage#message.severity property will be displayed.",
                  "displayName": "Header"
                },
                "none": {
                  "description": "the ojMessage#message.category text will not be displayed",
                  "displayName": "None"
                }
              }
            }
          }
        },
        "message": {
          "description": "Structured data specifying essential information to display a message on the UI.",
          "type": "object",
          "displayName": "Message",
          "help": "message",
          "properties": {
            "autoTimeout": {
              "description": "Specifies the duration in milliseconds that the message will be shown before it closes automatically. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Auto Timeout",
              "value": -1,
              "help": "message.autoTimeout"
            },
            "category": {
              "description": "Specifies message category text which is shown next to the message icon. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Category",
              "value": "",
              "help": "message.category"
            },
            "closeAffordance": {
              "description": "Specifies the UI affordance provided to end users to be able to close the message.",
              "type": "string",
              "displayName": "Close Affordance",
              "value": "defaults",
              "help": "message.closeAffordance",
              "enumValues": [
                "defaults",
                "none"
              ],
              "propertyEditorValues": {
                "defaults": {
                  "description": "use implicit affordance to best suit the native theme, efficient use of available space and screen touch capabilities. A close 'X' icon is displayed in all cases except in the case when the message is set to auto-timeout when using mobile themes. The display of the close icon can be further controlled by using the theme variables as noted below. See keyboard and touch end user information sections in this document for interaction options.",
                  "displayName": "Defaults"
                },
                "none": {
                  "description": "no UI affordance is provided to close the message. Application has to call the close() method to dismiss the message",
                  "displayName": "None"
                }
              }
            },
            "detail": {
              "description": "Specifies detail text for the message.",
              "type": "string",
              "displayName": "Detail",
              "value": "",
              "help": "message.detail"
            },
            "icon": {
              "description": "Specifies the URL for the custom image to be used as an icon representing the message. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Icon",
              "value": "",
              "help": "message.icon"
            },
            "severity": {
              "description": "Specifies the severity of message.",
              "type": "string",
              "displayName": "Severity",
              "value": "none",
              "help": "message.severity",
              "enumValues": [
                "confirmation",
                "error",
                "info",
                "none",
                "warning"
              ],
              "propertyEditorValues": {
                "confirmation": {
                  "description": "confirmation message",
                  "displayName": "Confirmation"
                },
                "error": {
                  "description": "error level message",
                  "displayName": "Error"
                },
                "info": {
                  "description": "informational message",
                  "displayName": "Info"
                },
                "none": {
                  "description": "message status level not applicable",
                  "displayName": "None"
                },
                "warning": {
                  "description": "warning level message",
                  "displayName": "Warning"
                }
              }
            },
            "sound": {
              "description": "Specifies the sound to be played when a message is opened. This is needed for accessibility. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Sound",
              "value": "none",
              "help": "message.sound"
            },
            "summary": {
              "description": "Specifies summary text for the message.",
              "type": "string",
              "displayName": "Summary",
              "value": "",
              "help": "message.summary"
            },
            "timestamp": {
              "description": "Specifies a timestamp for the message to be displayed in the message header. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Timestamp",
              "value": "",
              "help": "message.timestamp"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "categories": {
              "description": "Category text to be displayed for the messages of different severity levels See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.categories",
              "properties": {
                "confirmation": {
                  "description": "Category text for the 'confirmation' severity level See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.categories.confirmation"
                },
                "error": {
                  "description": "Category text for the 'error' severity level See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.categories.error"
                },
                "info": {
                  "description": "Category text for the 'info' severity level See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.categories.info"
                },
                "warning": {
                  "description": "Category text for the 'warning' severity level See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.categories.warning"
                }
              }
            },
            "labelCloseIcon": {
              "description": "Label for the message close button. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCloseIcon"
            }
          }
        }
      },
      "methods": {
        "close": {
          "description": "Closes the message.",
          "help": "close",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojClose": {
          "description": "Triggered after the message is closed through user interaction or due to calling close() method.",
          "bubbles": true,
          "cancelable": true,
          "help": "close",
          "detail": {
            "message": {
              "description": "the message that was closed",
              "type": "object",
              "properties": {
                "icon": {
                  "description": "Defines the icon representing the message.",
                  "type": "string"
                },
                "category": {
                  "description": "Defines category text of the message.",
                  "type": "string"
                },
                "severity": {
                  "description": "Defines severity of the message.",
                  "type": "\"error\"|\"warning\"|\"confirmation\"|\"info\"|\"none\""
                },
                "timestamp": {
                  "description": "Defines timestamp of the message.",
                  "type": "string"
                },
                "summary": {
                  "description": "Defines summary text of the message.",
                  "type": "string"
                },
                "detail": {
                  "description": "Defines detail text of the message.",
                  "type": "string"
                },
                "autoTimeout": {
                  "description": "Defines the time after which the message is to be closed automatically.",
                  "type": "number"
                },
                "closeAffordance": {
                  "description": "Defines UI affordance provided to close the message.",
                  "type": "\"none\"|\"defaults\""
                },
                "sound": {
                  "description": "Defines the sound to be played when message is open.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "slots": {
        "detail": {
          "description": "The detail slot accepts DOM nodes as children. It is useful for adding links or buttons to the message's detail area.",
          "maxItems": 1,
          "help": "detail"
        }
      }
    },
    "oj-messages": {
      "name": "oj-messages",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Messages",
      "type": "core",
      "since": "5.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmessages"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-messages-inline-remove-bottom-border"
          ],
          "description": "Inline messages will include a bottom border so that the messages section is demarcated from the contents below it. If this border is not desirable for certain page layouts, it can be removed by setting this marker class on oj-messages."
        }
      ],
      "description": "Messages manages the layout and display of child messages.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojMessages.html",
      "properties": {
        "display": {
          "description": "Specifies the display purpose of the messages. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Display",
          "value": "general",
          "help": "display",
          "enumValues": [
            "general",
            "notification"
          ],
          "propertyEditorValues": {
            "general": {
              "description": "messages pertaining to the page or region of the application",
              "displayName": "General"
            },
            "notification": {
              "description": "often used for communicating alerts arriving asynchronously",
              "displayName": "Notification"
            }
          }
        },
        "displayOptions": {
          "description": "Specifies the display options for contents of all the messages.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "category": {
              "description": "Specifies display option for ojMessage#message.category text in all the messages specified for the ojMessages#messages attribute.",
              "type": "string",
              "displayName": "Category",
              "value": "auto",
              "help": "displayOptions.category",
              "enumValues": [
                "auto",
                "header",
                "none"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "the component decides whether and where the ojMessage#message.category text is displayed. The behavior is same as 'header' option, but may change in future releases.",
                  "displayName": "Auto"
                },
                "header": {
                  "description": "if the ojMessage#message.category property is specified, its value will be displayed in the header region of the message next to message icon. If ojMessage#message.category property is not specified, a translated text corresponding to the value of the ojMessage#message.severity property will be displayed.",
                  "displayName": "Header"
                },
                "none": {
                  "description": "the ojMessage#message.category text will not be displayed",
                  "displayName": "None"
                }
              }
            }
          }
        },
        "messages": {
          "description": "Specifies the collection of structured message data used to display the individual messages. See the Help documentation for more information.",
          "type": "null|Array<Object>|object",
          "displayName": "Messages",
          "value": null,
          "help": "messages",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "icon": {
                  "description": "Defines the icon representing the message.",
                  "type": "string"
                },
                "category": {
                  "description": "Defines category text of the message.",
                  "type": "string"
                },
                "severity": {
                  "description": "Defines severity of the message.",
                  "type": "string",
                  "enumValues": [
                    "confirmation",
                    "error",
                    "info",
                    "none",
                    "warning"
                  ]
                },
                "timestamp": {
                  "description": "Defines timestamp of the message.",
                  "type": "string"
                },
                "summary": {
                  "description": "Defines summary text of the message.",
                  "type": "string"
                },
                "detail": {
                  "description": "Defines detail text of the message.",
                  "type": "string"
                },
                "autoTimeout": {
                  "description": "Defines the time after which the message is to be closed automatically.",
                  "type": "number"
                },
                "closeAffordance": {
                  "description": "Defines UI affordance provided to close the message.",
                  "type": "string",
                  "enumValues": [
                    "defaults",
                    "none"
                  ]
                },
                "sound": {
                  "description": "Defines the sound to be played when message is open.",
                  "type": "string"
                }
              }
            }
          }
        },
        "position": {
          "description": "Specifies the position and presentation style of the messages. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Position",
          "help": "position",
          "properties": {
            "at": {
              "description": "Defines which position on the target element (\"of\") to align the positioned element against.",
              "type": "object",
              "displayName": "At",
              "help": "position.at",
              "properties": {
                "horizontal": {
                  "description": "Defines the horizontal alignment of what the messges overlay is aligned to.",
                  "type": "string",
                  "displayName": "Horizontal",
                  "help": "position.at.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "Defines the vertical alignment of what the messages overlay is aligned to.",
                  "type": "string",
                  "displayName": "Vertical",
                  "help": "position.at.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "collision": {
              "description": "Rule for alternate alignment.",
              "type": "string",
              "displayName": "Collision",
              "help": "position.collision",
              "enumValues": [
                "fit",
                "flip",
                "flipfit",
                "none"
              ],
              "propertyEditorValues": {
                "fit": {
                  "description": "shift the element away from the edge of the window.",
                  "displayName": "Fit"
                },
                "flip": {
                  "description": "the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.",
                  "displayName": "Flip"
                },
                "flipfit": {
                  "description": "first applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.",
                  "displayName": "Flipfit"
                },
                "none": {
                  "description": "no collision detection.",
                  "displayName": "None"
                }
              }
            },
            "my": {
              "description": "Defines which edge on the messages overlay to align with the target (\"of\") element.",
              "type": "object",
              "displayName": "My",
              "help": "position.my",
              "properties": {
                "horizontal": {
                  "description": "Defines the horizontal alignment of the messages overlay.",
                  "type": "string",
                  "displayName": "Horizontal",
                  "help": "position.my.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "Defines the vertical alignment of the messages overlay.",
                  "type": "string",
                  "displayName": "Vertical",
                  "help": "position.my.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "of": {
              "description": "Specifies which element to position the messages overlay against. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Of",
              "help": "position.of"
            },
            "offset": {
              "description": "Defines a point offset in pixels from the (\"my\") alignment.",
              "type": "object",
              "displayName": "Offset",
              "help": "position.offset",
              "properties": {
                "x": {
                  "description": "Horizontal aligment offset.",
                  "type": "number",
                  "displayName": "X",
                  "help": "position.offset.x"
                },
                "y": {
                  "description": "Vertical alignment offset.",
                  "type": "number",
                  "displayName": "Y",
                  "help": "position.offset.y"
                }
              }
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "ariaLiveRegion": {
              "description": "Various contextual live region texts that oj-messages component will use for accessibility purpose. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.ariaLiveRegion",
              "properties": {
                "navigationFromKeyboard": {
                  "description": "Text to guide keyboard users navigate to prior focussed element when the messages region gains focus. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.ariaLiveRegion.navigationFromKeyboard"
                },
                "navigationToKeyboard": {
                  "description": "Text to guide keyboard users navigate to new displayed messages when focus is outside the messages popup. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.ariaLiveRegion.navigationToKeyboard"
                },
                "navigationToTouch": {
                  "description": "Text to guide touch screen (voice-over) users navigate to new displayed messages when focus is outside the messages popup. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.ariaLiveRegion.navigationToTouch"
                },
                "newMessage": {
                  "description": "Text representing the new displayed message. This text may contain tokens '{category}' and '{summary}', which will be replaced by the corresponding sub-property values in the data for the new message. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.ariaLiveRegion.newMessage"
                }
              }
            },
            "labelLandmark": {
              "description": "Label for the landmark region for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelLandmark"
            }
          }
        }
      },
      "methods": {
        "close": {
          "description": "Unconditionally closes the specified message. See the Help documentation for more information.",
          "help": "close",
          "params": [
            {
              "name": "message",
              "description": "the message to be closed",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "closeAll": {
          "description": "Closes all child messages matching an optional filter criteria. See the Help documentation for more information.",
          "help": "closeAll",
          "params": [
            {
              "name": "closeFilter",
              "description": "an optional callback function that will be passed an instance of type ojMessage#message for each child oj-message. If closeFilter returns true, the associated oj-message will be closed. Returning false will exclude the child message from closure. If a closeFilter is not passed, all child messages will be closed.",
              "type": "function"
            }
          ],
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-messages element accepts only oj-message elements as children for the default slot. See the Help documentation for more information.",
          "displayName": "default",
          "help": "Default"
        },
        "messageTemplate": {
          "description": "The messageTemplate slot is used to specify the template for rendering each message. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "messageTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-messages> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current message being rendered.",
              "type": "object",
              "properties": {
                "icon": {
                  "description": "Defines the icon representing the message.",
                  "type": "string"
                },
                "category": {
                  "description": "Defines category text of the message.",
                  "type": "string"
                },
                "severity": {
                  "description": "Defines severity of the message.",
                  "type": "\"error\"|\"warning\"|\"confirmation\"|\"info\"|\"none\""
                },
                "timestamp": {
                  "description": "Defines timestamp of the message.",
                  "type": "string"
                },
                "summary": {
                  "description": "Defines summary text of the message.",
                  "type": "string"
                },
                "detail": {
                  "description": "Defines detail text of the message.",
                  "type": "string"
                },
                "autoTimeout": {
                  "description": "Defines the time after which the message is to be closed automatically.",
                  "type": "number"
                },
                "closeAffordance": {
                  "description": "Defines UI affordance provided to close the message.",
                  "type": "\"none\"|\"defaults\""
                },
                "sound": {
                  "description": "Defines the sound to be played when message is open.",
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "oj-module": {
      "name": "oj-module",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "ojModule Element",
      "type": "core",
      "since": "4.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojmodule-element"
        }
      },
      "description": "A module is a navigational element that manages content replacement within a particular region of the page.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojModule.html",
      "properties": {
        "animation": {
          "description": "Specifies an animation object used for view transitions. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Animation",
          "value": null,
          "help": "animation"
        },
        "config": {
          "description": "The module configuration object. See the Help documentation for more information.",
          "type": "object|Promise",
          "displayName": "Config",
          "help": "config",
          "properties": {
            "cleanupMode": {
              "description": "The cleanup mode for the view.",
              "type": "string",
              "displayName": "Cleanup Mode",
              "value": "onDisconnect",
              "help": "config.cleanupMode",
              "enumValues": [
                "none",
                "onDisconnect"
              ],
              "propertyEditorValues": {
                "none": {
                  "description": "Use the setting to preserve the view, e.g. if the view and view model will be stored in external cache.",
                  "displayName": "None"
                },
                "onDisconnect": {
                  "description": "The View nodes will be destroyed on disconnect.",
                  "displayName": "On Disconnect"
                }
              }
            },
            "view": {
              "description": "Defines module view.",
              "type": "Array<Node>",
              "displayName": "View",
              "value": null,
              "help": "config.view"
            },
            "viewModel": {
              "description": "The ViewModel instance.",
              "type": "object|null",
              "displayName": "View Model",
              "value": null,
              "help": "config.viewModel"
            }
          }
        }
      },
      "events": {
        "ojViewDisconnected": {
          "description": "Triggered after the View is removed from the DOM",
          "help": "viewDisconnected",
          "detail": {
            "viewModel": {
              "description": "An array of DOM nodes that represent the disconnected View. The application can use the nodes to store them in cache.",
              "type": "object"
            },
            "view": {
              "description": "ViewModel for the new View.",
              "type": "Array<Node>"
            }
          }
        },
        "ojTransitionStart": {
          "description": "Triggered before transition to the new View is started",
          "help": "transitionStart",
          "detail": {
            "viewModel": {
              "description": "ViewModel for the new View.",
              "type": "object"
            }
          }
        },
        "ojViewConnected": {
          "description": "Triggered after the View is inserted into the DOM",
          "help": "viewConnected",
          "detail": {
            "viewModel": {
              "description": "ViewModel for the View being attached to the DOM.",
              "type": "object"
            }
          }
        },
        "ojTransitionEnd": {
          "description": "Triggered after transition to the new View is complete",
          "help": "transitionEnd",
          "detail": {
            "viewModel": {
              "description": "ViewModel for the new View.",
              "type": "object"
            }
          }
        }
      }
    },
    "oj-navigation-list": {
      "name": "oj-navigation-list",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Navigation List",
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojnavigationlist"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-navigationlist-stack-icon-label"
          ],
          "description": "Displays horizontal Navigation List with icon and label stacked. Applicable only when \"edge\" is \"top\"."
        },
        {
          "styleGroup": [
            "oj-navigationlist-category-divider"
          ],
          "description": "Use this class to add horizontal divider line between two categories of items."
        },
        {
          "styleGroup": [
            "oj-navigationlist-item-icon"
          ],
          "description": "Use this class to add icon to list item."
        },
        {
          "styleGroup": [
            "oj-navigationlist-item-title"
          ],
          "description": "When arbitrary content is placed inside item's content area, it's title text can be marked using this style class. This helps component in identifying the Item's label."
        },
        {
          "styleGroup": [
            "oj-navigationlist-item-text-wrap"
          ],
          "description": "Use this class to wrap item label text. Note: On IE11, this is not supported when \"overflow\" attribute is set to \"popup\"."
        },
        {
          "styleGroup": [
            "oj-navigationlist-item-dividers"
          ],
          "description": "Use this class to show dividers between horizontal navigation list items."
        },
        {
          "styleGroup": [
            "oj-sm-condense"
          ],
          "description": "Use this class to condense horizontal navigation list items on small screens and larger."
        },
        {
          "styleGroup": [
            "oj-md-condense"
          ],
          "description": "Use this class to condense horizontal navigation list items on medium screens and larger."
        },
        {
          "styleGroup": [
            "oj-lg-condense"
          ],
          "description": "Use this class to condense horizontal navigation list items on large screens and larger."
        },
        {
          "styleGroup": [
            "oj-xl-condense"
          ],
          "description": "Use this class to condense horizontal navigation list items on extra large screens and larger."
        },
        {
          "styleGroup": [
            "oj-navigationlist-nofollow-link"
          ],
          "description": "Use this class to prevent automatic navigation to the url specified on \"&lt;a \" tag's \"href\" attribute. In this case, navigation can be handled programmatically by using \"selectionChanged\" event. This is useful to execute some custom logic before browser triggers navigation."
        },
        {
          "styleGroup": [
            "oj-focus-highlight"
          ],
          "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control. The \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load. The application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are: \"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value. \"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism. \"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result. To change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
        }
      ],
      "description": "A navigation list allows navigation between different content sections.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojNavigationList.html",
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "Specifies the alias for the current item when referenced inside the item template.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "currentItem": {
          "description": "Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Current Item",
          "value": null,
          "writeback": true,
          "help": "currentItem"
        },
        "data": {
          "description": "Specifies the data provider for the Navigation List. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "display": {
          "description": "Specifies what needs to be displayed. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Display",
          "value": "all",
          "help": "display",
          "enumValues": [
            "all",
            "icons"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            }
          }
        },
        "drillMode": {
          "description": "Specifies whether expand/collapse or sliding operations are allowed.",
          "type": "string",
          "displayName": "Drill Mode",
          "value": "none",
          "help": "drillMode",
          "enumValues": [
            "collapsible",
            "none",
            "sliding"
          ],
          "propertyEditorValues": {
            "collapsible": {
              "description": "Allows user to expand and collapse group items. If there are more than two levels in hierarchy, sliding is preferered drill mode.",
              "displayName": "Collapsible"
            },
            "none": {
              "description": "All group items are expanded by default and user not allowed to collapse them.",
              "displayName": "None"
            },
            "sliding": {
              "description": "This is typically used for hierarchical lists. This allows user to view one level at a time.",
              "displayName": "Sliding"
            }
          }
        },
        "edge": {
          "description": "Specifies the edge position of the Navigation List.",
          "type": "string",
          "displayName": "Edge",
          "value": "start",
          "help": "edge",
          "enumValues": [
            "start",
            "top"
          ],
          "propertyEditorValues": {
            "start": {
              "description": "This renders list items vertically.",
              "displayName": "Start"
            },
            "top": {
              "description": "This renders list items horizontally.",
              "displayName": "Top"
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set containing the keys of the items that should be expanded. See the Help documentation for more information.",
          "type": "KeySet",
          "displayName": "Expanded",
          "value": "new ExpandedKeySet();",
          "writeback": true,
          "help": "expanded"
        },
        "hierarchyMenuThreshold": {
          "description": "Specifies the level at which the user can see hierarchical menu button. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Hierarchy Menu Threshold",
          "value": 0,
          "help": "hierarchyMenuThreshold"
        },
        "item": {
          "description": "Customize the functionality of each item in Navigation List.",
          "type": "object",
          "displayName": "Item",
          "help": "item",
          "properties": {
            "renderer": {
              "description": "Specifies the renderer for the item. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null,
              "help": "item.renderer"
            },
            "selectable": {
              "description": "Specifies whether the item can be selected. See the Help documentation for more information.",
              "type": "function|boolean",
              "displayName": "Selectable",
              "value": true,
              "help": "item.selectable"
            }
          }
        },
        "overflow": {
          "description": "Specifies overflow behaviour for the Navigation List.",
          "type": "string",
          "displayName": "Overflow",
          "value": "hidden",
          "help": "overflow",
          "enumValues": [
            "hidden",
            "popup"
          ],
          "propertyEditorValues": {
            "hidden": {
              "description": "overflow is clipped, and the rest of the content will be invisible.",
              "displayName": "Hidden"
            },
            "popup": {
              "description": "popup menu will be shown with overflowed items. NOTE: Setting overflow to popup can trigger browser reflow, so only set it when it is actually required.",
              "displayName": "Popup"
            }
          }
        },
        "rootLabel": {
          "description": "Specifies the label for top level list items.",
          "type": "string",
          "displayName": "Root Label",
          "value": "Navigation List",
          "help": "rootLabel"
        },
        "selection": {
          "description": "Specifies the key of the selected item. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Selection",
          "value": null,
          "writeback": true,
          "help": "selection"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "defaultRootLabel": {
              "description": "Provides properties to customize the title text used by Sliding Navigation List for root node. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.defaultRootLabel"
            },
            "hierMenuBtnLabel": {
              "description": "Provides properties to customize the hover message text used by Sliding Navigation List as label for Hierarchical Menu button. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.hierMenuBtnLabel"
            },
            "previousIcon": {
              "description": "Provides properties to customize the hover message text used by Sliding Navigation List for previous button. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.previousIcon"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the visual state of the Navigation List.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Event handler for when the default animation of a particular action is about to start.",
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "the action that starts the animation. See animation section for a list of actions.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            },
            "endCallback": {
              "description": "if the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Event handler for when the default animation of a particular action has ended.",
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "the action that started the animation. See animation section for a list of actions.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            }
          }
        },
        "ojBeforeSelect": {
          "description": "Event handler for when before the selection is changed.",
          "cancelable": true,
          "help": "beforeSelect",
          "detail": {
            "key": {
              "description": "Selected list item Key.",
              "type": "any"
            },
            "item": {
              "description": "Selected list item.",
              "type": "Element"
            }
          }
        },
        "ojBeforeCollapse": {
          "description": "Event handler for when an item is about to collapse.",
          "cancelable": true,
          "help": "beforeCollapse",
          "detail": {
            "key": {
              "description": "the Key of the item to be collapse",
              "type": "any"
            },
            "item": {
              "description": "the item to be collapse",
              "type": "Element"
            }
          }
        },
        "ojBeforeCurrentItem": {
          "description": "Event handler for when before the current item is changed.",
          "cancelable": true,
          "help": "beforeCurrentItem",
          "detail": {
            "previousKey": {
              "description": "the Key of the previous item",
              "type": "any"
            },
            "previousItem": {
              "description": "the previous item",
              "type": "Element"
            },
            "key": {
              "description": "the Key of the new current item",
              "type": "any"
            },
            "item": {
              "description": "the new current item",
              "type": "Element"
            }
          }
        },
        "ojCollapse": {
          "description": "Event handler for after an item has collapsed.",
          "help": "collapse",
          "detail": {
            "key": {
              "description": "The Key of the item that was just collapsed.",
              "type": "any"
            },
            "item": {
              "description": "The list item that was just collapsed.",
              "type": "Element"
            }
          }
        },
        "ojBeforeExpand": {
          "description": "Event handler for when an item is about to expand.",
          "cancelable": true,
          "help": "beforeExpand",
          "detail": {
            "key": {
              "description": "the Key of the item to be expand",
              "type": "any"
            },
            "item": {
              "description": "the item to be expand",
              "type": "Element"
            }
          }
        },
        "ojExpand": {
          "description": "Event handler for after an item has expanded.",
          "help": "expand",
          "detail": {
            "key": {
              "description": "The Key of the item that was just expanded.",
              "type": "any"
            },
            "item": {
              "description": "The list item that was just expanded.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the list. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-navigation-list> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current item being rendered",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent item",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item being rendered",
              "type": "any"
            },
            "depth": {
              "description": "The depth of the current item (available when hierarchical data is provided) being rendered. The depth of the first level children under the invisible root is 1.",
              "type": "number"
            },
            "leaf": {
              "description": "True if the current item is a leaf node (available when hierarchical data is provided).",
              "type": "boolean"
            },
            "parentkey": {
              "description": "The key of the parent item (available when hierarchical data is provided). The parent key is null for root nodes.",
              "type": "any"
            }
          }
        }
      }
    },
    "oj-n-box": {
      "name": "oj-n-box",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "N Box",
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojnbox"
        }
      },
      "description": "NBox is an interactive data visualization (typically found in Human Capital Management applications) in which employees are grouped and compared across two dimensions.  Each dimension can be split into multiple ranges.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojNBox.html",
      "properties": {
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "Specifies the alias for the current item when referenced inside the nodeTemplate.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "cellContent": {
          "description": "Specifies the content displayed in cells. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Cell Content",
          "value": "auto",
          "help": "cellContent",
          "enumValues": [
            "auto",
            "counts"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "counts": {
              "displayName": "Counts"
            }
          }
        },
        "cellMaximize": {
          "description": "Specifies whether cell maximize/de-maximize gestures are enabled.",
          "type": "string",
          "displayName": "Cell Maximize",
          "value": "on",
          "help": "cellMaximize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "cells": {
          "description": "Specifies the list of cells. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Cells",
          "value": null,
          "help": "cells",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "label": {
                  "description": "The text for the cell label.",
                  "type": "string"
                },
                "column": {
                  "description": "The id of the column containing this cell.",
                  "type": "string"
                },
                "labelHalign": {
                  "description": "The halign value for the cell label.",
                  "type": "string"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the cell label.",
                  "type": "object"
                },
                "svgClassName": {
                  "description": "The CSS style class for this cell. Used for customizing the cell background and border.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS style object for this cell. Used for customizing the cell background and border.",
                  "type": "object"
                },
                "maximizedSvgStyle": {
                  "description": "The CSS style object for this cell. Used for customizing the maximized cell background and border.",
                  "type": "object"
                },
                "maximizedSvgClassName": {
                  "description": "The CSS style class for this cell. Used for customizing the minimized cell background and border.",
                  "type": "string"
                },
                "minimizedSvgStyle": {
                  "description": "The CSS style object for this cell. Used for customizing the minimized cell background and border.",
                  "type": "object"
                },
                "minimizedSvgClassName": {
                  "description": "The CSS style class for this cell. Used for customizing the minimized cell background and border.",
                  "type": "string"
                },
                "row": {
                  "description": "The id of the row containing this cell.",
                  "type": "string"
                },
                "showCount": {
                  "description": "Determines when to display the cell count label (extra info displayed after primary cell label). \"off\" never show the count label. \"on\" always show the count label. Show countLabel value if specified, otherwise use a simple node count. \"auto\" show the count label if countLabel attribute is defined.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ]
                },
                "shortDesc": {
                  "description": "The description of this cell. This is used for accessibility.",
                  "type": "string"
                }
              }
            }
          }
        },
        "columns": {
          "description": "Specifies the list of columns. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Columns",
          "value": null,
          "help": "columns",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The id of the column. Used to identify this column.",
                  "type": "string"
                },
                "label": {
                  "description": "The text for the column label.",
                  "type": "string"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the column label.",
                  "type": "object"
                }
              }
            }
          }
        },
        "columnsTitle": {
          "description": "The text for the title on the column edge.",
          "type": "string",
          "displayName": "Columns Title",
          "value": "",
          "help": "columnsTitle"
        },
        "countLabel": {
          "description": "A function that returns custom text for the cell count labels.",
          "type": "function|null",
          "displayName": "Count Label",
          "value": null,
          "help": "countLabel"
        },
        "data": {
          "description": "Specifies the data provider for the NBox. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "groupAttributes": {
          "description": "An array of attributes for styling the group nodes.",
          "type": "Array<string>",
          "displayName": "Group Attributes",
          "value": [
            "color",
            "indicatorColor",
            "indicatorIconShape",
            "indicatorIconColor",
            "indicatorIconPattern"
          ],
          "help": "groupAttributes",
          "enumValues": [
            "color",
            "indicatorColor",
            "indicatorIconColor",
            "indicatorIconPattern",
            "indicatorIconShape"
          ],
          "propertyEditorValues": {
            "color": {
              "displayName": "Color"
            },
            "indicatorColor": {
              "displayName": "Indicator Color"
            },
            "indicatorIconColor": {
              "displayName": "Indicator Icon Color"
            },
            "indicatorIconPattern": {
              "displayName": "Indicator Icon Pattern"
            },
            "indicatorIconShape": {
              "displayName": "Indicator Icon Shape"
            }
          }
        },
        "groupBehavior": {
          "description": "Specifies how nodes should be grouped.",
          "type": "string",
          "displayName": "Group Behavior",
          "value": "withinCell",
          "help": "groupBehavior",
          "enumValues": [
            "acrossCells",
            "none",
            "withinCell"
          ],
          "propertyEditorValues": {
            "acrossCells": {
              "displayName": "Across Cells"
            },
            "none": {
              "displayName": "None"
            },
            "withinCell": {
              "displayName": "Within Cell"
            }
          }
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Data items with any category matching an item in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over data items.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "labelTruncation": {
          "description": "Specifies node label truncation behavior. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Truncation",
          "value": "on",
          "help": "labelTruncation",
          "enumValues": [
            "ifRequired",
            "on"
          ],
          "propertyEditorValues": {
            "ifRequired": {
              "displayName": "If Required"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "maximizedColumn": {
          "description": "The id of the column to be maximized.",
          "type": "string",
          "displayName": "Maximized Column",
          "value": "",
          "writeback": true,
          "help": "maximizedColumn"
        },
        "maximizedRow": {
          "description": "The id of the row to be maximized.",
          "type": "string",
          "displayName": "Maximized Row",
          "value": "",
          "writeback": true,
          "help": "maximizedRow"
        },
        "nodes": {
          "description": "The list of nodes. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Nodes",
          "value": null,
          "help": "nodes",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The node id. The node id should be set by the application if the DataProvider is not being used.",
                  "type": "any"
                },
                "borderColor": {
                  "description": "The border color of the node. Does not apply if custom image is specified.",
                  "type": "string"
                },
                "borderWidth": {
                  "description": "The border width of the node in pixels. Does not apply if custom image is specified.",
                  "type": "number"
                },
                "categories": {
                  "description": "An optional array of additional category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with other visualization elements. Defaults to node's id if unspecified.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The color of the node. Does not apply if custom image is specified.",
                  "type": "string"
                },
                "column": {
                  "description": "The column id for this node.",
                  "type": "string"
                },
                "groupCategory": {
                  "description": "The group category this node belongs to. Nodes with the same groupCategory will be grouped together.",
                  "type": "string"
                },
                "icon": {
                  "description": "Defines the primary icon for this node.",
                  "type": "object",
                  "properties": {
                    "borderColor": {
                      "description": "The border color of this icon.",
                      "type": "string"
                    },
                    "borderRadius": {
                      "description": "The border radius of this icon. CSS border-radius values accepted. Note that non-% values (including unitless) get interpreted as 'px'.",
                      "type": "string"
                    },
                    "borderWidth": {
                      "description": "The border width of this icon.",
                      "type": "number"
                    },
                    "color": {
                      "description": "The fill color of this icon.",
                      "type": "string"
                    },
                    "height": {
                      "description": "The height of this icon.",
                      "type": "number"
                    },
                    "opacity": {
                      "description": "The opacity of this icon.",
                      "type": "number"
                    },
                    "pattern": {
                      "description": "The pattern of this icon.",
                      "type": "string",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ]
                    },
                    "shape": {
                      "description": "The shape of this icon. Can take the name of a built-in shape or the svg path commands for a custom shape.",
                      "type": "string",
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "source": {
                      "description": "The URL of an image to display for this icon.",
                      "type": "string"
                    },
                    "svgClassName": {
                      "description": "The CSS style class defining the style of this icon.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The CSS style object defining the style of this icon.",
                      "type": "object"
                    },
                    "width": {
                      "description": "The width of this icon.",
                      "type": "number"
                    }
                  }
                },
                "indicatorColor": {
                  "description": "The background color for the indicator section of this node.",
                  "type": "string"
                },
                "indicatorIcon": {
                  "description": "Defines the indicator icon for this node.",
                  "type": "object",
                  "properties": {
                    "borderColor": {
                      "description": "The border color of this indicator icon.",
                      "type": "string"
                    },
                    "borderRadius": {
                      "description": "The border radius of this indicator icon. CSS border-radius values accepted. Note that non-% values (including unitless) get interpreted as 'px'.",
                      "type": "string"
                    },
                    "borderWidth": {
                      "description": "The border width of this indicator icon.",
                      "type": "number"
                    },
                    "color": {
                      "description": "The fill color of this indicator icon.",
                      "type": "string"
                    },
                    "height": {
                      "description": "The height of this indicator icon.",
                      "type": "number"
                    },
                    "opacity": {
                      "description": "The opacity of this indicator icon.",
                      "type": "number"
                    },
                    "pattern": {
                      "description": "The pattern of this indicator icon.",
                      "type": "string",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ]
                    },
                    "shape": {
                      "description": "The shape of this indicator icon. Can take the name of a built-in shape or the svg path commands for a custom shape.",
                      "type": "string",
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "source": {
                      "description": "The URL of an image to display for this indicator icon.",
                      "type": "string"
                    },
                    "svgClassName": {
                      "description": "The CSS style class defining the style of this indicator icon.",
                      "type": "string"
                    },
                    "svgStyle": {
                      "description": "The CSS style object defining the style of this indicator icon.",
                      "type": "object"
                    },
                    "width": {
                      "description": "The width of this indicator icon.",
                      "type": "number"
                    }
                  }
                },
                "row": {
                  "description": "The row id for this node.",
                  "type": "string"
                },
                "label": {
                  "description": "The text for the node label.",
                  "type": "string"
                },
                "secondaryLabel": {
                  "description": "The text for the secondary node label.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of this node.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of this node.",
                  "type": "object"
                },
                "xPercentage": {
                  "description": "An optional horizontal position (as a percentage) to be used in the average position calculation when grouping across cells.",
                  "type": "number"
                },
                "yPercentage": {
                  "description": "An optional vertical position (as a percentage) to be used in the average position calculation when grouping across cells.",
                  "type": "number"
                },
                "shortDesc": {
                  "description": "The description of this node. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string"
                }
              }
            }
          }
        },
        "otherColor": {
          "description": "The color for the \"other\" group nodes. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Other Color",
          "format": "color",
          "help": "otherColor"
        },
        "otherThreshold": {
          "description": "The threshold for aggregating nodes into an \"other\" group node. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Other Threshold",
          "value": 0,
          "help": "otherThreshold"
        },
        "rows": {
          "description": "The list of rows. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Rows",
          "value": null,
          "help": "rows",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The id of the row. Used to identify this row.",
                  "type": "string"
                },
                "label": {
                  "description": "The text for the row label.",
                  "type": "string"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the row label.",
                  "type": "object"
                }
              }
            }
          }
        },
        "rowsTitle": {
          "description": "The text for the title on the row edge.",
          "type": "string",
          "displayName": "Rows Title",
          "value": "",
          "help": "rowsTitle"
        },
        "selection": {
          "description": "Specifies the ids of the selected nodes.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "multiple",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "displayName": "Multiple"
            },
            "none": {
              "displayName": "None"
            },
            "single": {
              "displayName": "Single"
            }
          }
        },
        "styleDefaults": {
          "description": "An object defining the style defaults for this NBox.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "styleDefaults",
          "properties": {
            "animationDuration": {
              "description": "The duration of the animations in milliseconds.",
              "type": "number",
              "displayName": "Animation Duration",
              "units": "milliseconds",
              "help": "styleDefaults.animationDuration"
            },
            "cellDefaults": {
              "description": "An object defining the style defaults for cells.",
              "type": "object",
              "displayName": "Cell Defaults",
              "help": "styleDefaults.cellDefaults",
              "properties": {
                "labelHalign": {
                  "description": "The halign value for the cell label.",
                  "type": "string",
                  "displayName": "Label Halign",
                  "value": "start",
                  "help": "styleDefaults.cellDefaults.labelHalign",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "displayName": "End"
                    },
                    "start": {
                      "displayName": "Start"
                    }
                  }
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the cell labels.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "styleDefaults.cellDefaults.labelStyle"
                },
                "maximizedSvgStyle": {
                  "description": "The CSS style object defining the styles of the cell background and border when the cell is maximized.",
                  "type": "object",
                  "displayName": "Maximized Svg Style",
                  "help": "styleDefaults.cellDefaults.maximizedSvgStyle"
                },
                "minimizedSvgStyle": {
                  "description": "The CSS style object defining the styles of the cell background and border when the cell is minimized.",
                  "type": "object",
                  "displayName": "Minimized Svg Style",
                  "help": "styleDefaults.cellDefaults.minimizedSvgStyle"
                },
                "showCount": {
                  "description": "Specifies when to display the cell count label. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Show Count",
                  "value": "auto",
                  "help": "styleDefaults.cellDefaults.showCount",
                  "enumValues": [
                    "auto",
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                },
                "svgStyle": {
                  "description": "The CSS style object defining the styles of the cell background and border.",
                  "type": "object",
                  "displayName": "Svg Style",
                  "help": "styleDefaults.cellDefaults.svgStyle"
                }
              }
            },
            "columnLabelStyle": {
              "description": "The CSS style object defining the style of the column labels.",
              "type": "object",
              "displayName": "Column Label Style",
              "help": "styleDefaults.columnLabelStyle"
            },
            "columnsTitleStyle": {
              "description": "The CSS style object defining the style of the columns title.",
              "type": "object",
              "displayName": "Columns Title Style",
              "help": "styleDefaults.columnsTitleStyle"
            },
            "hoverBehaviorDelay": {
              "description": "Specifies initial hover delay in milliseconds for highlighting data items.",
              "type": "number",
              "displayName": "Hover Behavior Delay",
              "value": 200,
              "units": "milliseconds",
              "help": "styleDefaults.hoverBehaviorDelay"
            },
            "nodeDefaults": {
              "description": "An object defining the style defaults for nodes.",
              "type": "object",
              "displayName": "Node Defaults",
              "help": "styleDefaults.nodeDefaults",
              "properties": {
                "borderColor": {
                  "description": "The default color of the node borders. The default value varies based on theme.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "styleDefaults.nodeDefaults.borderColor"
                },
                "borderWidth": {
                  "description": "The default width of the node borders. The default value varies based on theme.",
                  "type": "number",
                  "displayName": "Border Width",
                  "units": "pixels",
                  "help": "styleDefaults.nodeDefaults.borderWidth"
                },
                "color": {
                  "description": "The default background color of the nodes.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "styleDefaults.nodeDefaults.color"
                },
                "iconDefaults": {
                  "description": "An object defining the style defaults for the node icons.",
                  "type": "object",
                  "displayName": "Icon Defaults",
                  "help": "styleDefaults.nodeDefaults.iconDefaults",
                  "properties": {
                    "borderColor": {
                      "description": "The default border color of the node icons. The default value varies based on theme.",
                      "type": "string",
                      "displayName": "Border Color",
                      "format": "color",
                      "help": "styleDefaults.nodeDefaults.iconDefaults.borderColor"
                    },
                    "borderRadius": {
                      "description": "The default border radius of the node icons. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Border Radius",
                      "help": "styleDefaults.nodeDefaults.iconDefaults.borderRadius"
                    },
                    "borderWidth": {
                      "description": "The default border width of the node icons. The default value varies based on theme.",
                      "type": "number",
                      "displayName": "Border Width",
                      "help": "styleDefaults.nodeDefaults.iconDefaults.borderWidth"
                    },
                    "color": {
                      "description": "The default fill color of the node icons.",
                      "type": "string",
                      "displayName": "Color",
                      "value": "",
                      "format": "color",
                      "help": "styleDefaults.nodeDefaults.iconDefaults.color"
                    },
                    "height": {
                      "description": "The default height of the node icons. If the value is 0, the height will be automatically based on the remaining node contents.",
                      "type": "number",
                      "displayName": "Height",
                      "value": 0,
                      "units": "pixels",
                      "help": "styleDefaults.nodeDefaults.iconDefaults.height"
                    },
                    "opacity": {
                      "description": "The default opacity of the node icons.",
                      "type": "number",
                      "displayName": "Opacity",
                      "value": 1,
                      "help": "styleDefaults.nodeDefaults.iconDefaults.opacity"
                    },
                    "pattern": {
                      "description": "The default fill pattern of the node icons.",
                      "type": "string",
                      "displayName": "Pattern",
                      "value": "none",
                      "help": "styleDefaults.nodeDefaults.iconDefaults.pattern",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ],
                      "propertyEditorValues": {
                        "largeChecker": {
                          "displayName": "Large Checker"
                        },
                        "largeCrosshatch": {
                          "displayName": "Large Crosshatch"
                        },
                        "largeDiagonalLeft": {
                          "displayName": "Large Diagonal Left"
                        },
                        "largeDiagonalRight": {
                          "displayName": "Large Diagonal Right"
                        },
                        "largeDiamond": {
                          "displayName": "Large Diamond"
                        },
                        "largeTriangle": {
                          "displayName": "Large Triangle"
                        },
                        "none": {
                          "displayName": "None"
                        },
                        "smallChecker": {
                          "displayName": "Small Checker"
                        },
                        "smallCrosshatch": {
                          "displayName": "Small Crosshatch"
                        },
                        "smallDiagonalLeft": {
                          "displayName": "Small Diagonal Left"
                        },
                        "smallDiagonalRight": {
                          "displayName": "Small Diagonal Right"
                        },
                        "smallDiamond": {
                          "displayName": "Small Diamond"
                        },
                        "smallTriangle": {
                          "displayName": "Small Triangle"
                        }
                      }
                    },
                    "shape": {
                      "description": "The default shape of the node icons. Can take the name of a built-in shape or the svg path commands for a custom shape.",
                      "type": "string",
                      "displayName": "Shape",
                      "value": "square",
                      "help": "styleDefaults.nodeDefaults.iconDefaults.shape",
                      "enumValues": [
                        "circle",
                        "diamond",
                        "ellipse",
                        "human",
                        "plus",
                        "rectangle",
                        "square",
                        "star",
                        "triangleDown",
                        "triangleUp"
                      ],
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "source": {
                      "description": "The URL of an image to display by default for the node icons.",
                      "type": "string",
                      "displayName": "Source",
                      "value": "",
                      "help": "styleDefaults.nodeDefaults.iconDefaults.source"
                    },
                    "width": {
                      "description": "The default width of the node icons. If the value is 0, the width will be automatically based on the remaining node contents.",
                      "type": "number",
                      "displayName": "Width",
                      "value": 0,
                      "help": "styleDefaults.nodeDefaults.iconDefaults.width"
                    }
                  }
                },
                "indicatorColor": {
                  "description": "The default background color of the node indicator sections.",
                  "type": "string",
                  "displayName": "Indicator Color",
                  "value": "",
                  "format": "color",
                  "help": "styleDefaults.nodeDefaults.indicatorColor"
                },
                "indicatorIconDefaults": {
                  "description": "An object defining the style defaults for the node indicator icons.",
                  "type": "object",
                  "displayName": "Indicator Icon Defaults",
                  "help": "styleDefaults.nodeDefaults.indicatorIconDefaults",
                  "properties": {
                    "borderColor": {
                      "description": "The default border color of the node indicator icons. The default value varies based on theme.",
                      "type": "string",
                      "displayName": "Border Color",
                      "format": "color",
                      "help": "styleDefaults.nodeDefaults.indicatorIconDefaults.borderColor"
                    },
                    "borderRadius": {
                      "description": "The default border radius of the node indicator icons. See the Help documentation for more information.",
                      "type": "string",
                      "displayName": "Border Radius",
                      "help": "styleDefaults.nodeDefaults.indicatorIconDefaults.borderRadius"
                    },
                    "borderWidth": {
                      "description": "The default border width of the node indicator icons. The default value varies based on theme.",
                      "type": "number",
                      "displayName": "Border Width",
                      "help": "styleDefaults.nodeDefaults.indicatorIconDefaults.borderWidth"
                    },
                    "color": {
                      "description": "The default fill color of the node indicator icons.",
                      "type": "string",
                      "displayName": "Color",
                      "value": "",
                      "format": "color",
                      "help": "styleDefaults.nodeDefaults.indicatorIconDefaults.color"
                    },
                    "height": {
                      "description": "The default height of the node indicator icons. The default value varies based on theme.",
                      "type": "number",
                      "displayName": "Height",
                      "units": "pixels",
                      "help": "styleDefaults.nodeDefaults.indicatorIconDefaults.height"
                    },
                    "opacity": {
                      "description": "The default opacity of the node indicator icons.",
                      "type": "number",
                      "displayName": "Opacity",
                      "value": 1,
                      "help": "styleDefaults.nodeDefaults.indicatorIconDefaults.opacity"
                    },
                    "pattern": {
                      "description": "The default fill pattern of the node indicator icons.",
                      "type": "string",
                      "displayName": "Pattern",
                      "value": "none",
                      "help": "styleDefaults.nodeDefaults.indicatorIconDefaults.pattern",
                      "enumValues": [
                        "largeChecker",
                        "largeCrosshatch",
                        "largeDiagonalLeft",
                        "largeDiagonalRight",
                        "largeDiamond",
                        "largeTriangle",
                        "none",
                        "smallChecker",
                        "smallCrosshatch",
                        "smallDiagonalLeft",
                        "smallDiagonalRight",
                        "smallDiamond",
                        "smallTriangle"
                      ],
                      "propertyEditorValues": {
                        "largeChecker": {
                          "displayName": "Large Checker"
                        },
                        "largeCrosshatch": {
                          "displayName": "Large Crosshatch"
                        },
                        "largeDiagonalLeft": {
                          "displayName": "Large Diagonal Left"
                        },
                        "largeDiagonalRight": {
                          "displayName": "Large Diagonal Right"
                        },
                        "largeDiamond": {
                          "displayName": "Large Diamond"
                        },
                        "largeTriangle": {
                          "displayName": "Large Triangle"
                        },
                        "none": {
                          "displayName": "None"
                        },
                        "smallChecker": {
                          "displayName": "Small Checker"
                        },
                        "smallCrosshatch": {
                          "displayName": "Small Crosshatch"
                        },
                        "smallDiagonalLeft": {
                          "displayName": "Small Diagonal Left"
                        },
                        "smallDiagonalRight": {
                          "displayName": "Small Diagonal Right"
                        },
                        "smallDiamond": {
                          "displayName": "Small Diamond"
                        },
                        "smallTriangle": {
                          "displayName": "Small Triangle"
                        }
                      }
                    },
                    "shape": {
                      "description": "The default shape of the node indicator icons. Can take the name of a built-in shape or the svg path commands for a custom shape.",
                      "type": "string",
                      "displayName": "Shape",
                      "value": "square",
                      "help": "styleDefaults.nodeDefaults.indicatorIconDefaults.shape",
                      "enumValues": [
                        "circle",
                        "diamond",
                        "ellipse",
                        "human",
                        "plus",
                        "rectangle",
                        "square",
                        "star",
                        "triangleDown",
                        "triangleUp"
                      ],
                      "propertyEditorValues": {
                        "circle": {
                          "displayName": "Circle"
                        },
                        "diamond": {
                          "displayName": "Diamond"
                        },
                        "ellipse": {
                          "displayName": "Ellipse"
                        },
                        "human": {
                          "displayName": "Human"
                        },
                        "plus": {
                          "displayName": "Plus"
                        },
                        "rectangle": {
                          "displayName": "Rectangle"
                        },
                        "square": {
                          "displayName": "Square"
                        },
                        "star": {
                          "displayName": "Star"
                        },
                        "triangleDown": {
                          "displayName": "Triangle Down"
                        },
                        "triangleUp": {
                          "displayName": "Triangle Up"
                        }
                      }
                    },
                    "source": {
                      "description": "The URL of an image to display by default for the node indicator icons.",
                      "type": "string",
                      "displayName": "Source",
                      "value": null,
                      "help": "styleDefaults.nodeDefaults.indicatorIconDefaults.source"
                    },
                    "width": {
                      "description": "The default width of the node indicator icons. The default value varies based on theme.",
                      "type": "number",
                      "displayName": "Width",
                      "units": "pixels",
                      "help": "styleDefaults.nodeDefaults.indicatorIconDefaults.width"
                    }
                  }
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the node labels.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "styleDefaults.nodeDefaults.labelStyle"
                },
                "secondaryLabelStyle": {
                  "description": "The CSS style object defining the style of the node secondary labels.",
                  "type": "object",
                  "displayName": "Secondary Label Style",
                  "help": "styleDefaults.nodeDefaults.secondaryLabelStyle"
                }
              }
            },
            "rowLabelStyle": {
              "description": "The CSS style object defining the style of the row labels.",
              "type": "object",
              "displayName": "Row Label Style",
              "help": "styleDefaults.rowLabelStyle"
            },
            "rowsTitleStyle": {
              "description": "The CSS style object defining the style of the rows title.",
              "type": "object",
              "displayName": "Rows Title Style",
              "value": null,
              "help": "styleDefaults.rowsTitleStyle"
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "highlightedCount": {
              "description": "Used to indicate number of highlighted nodes in a cell. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.highlightedCount"
            },
            "labelAdditionalData": {
              "description": "Used for node overflow button See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAdditionalData"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelGroup": {
              "description": "Used to indicate group info for nbox drawer and group nodes for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelGroup"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "labelOther": {
              "description": "Used for the other label which aggregates small data values. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelOther"
            },
            "labelSize": {
              "description": "Used to indicate size of node drawer and group nodes for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSize"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            }
          }
        }
      },
      "methods": {
        "getRowsTitle": {
          "description": "Get the NBox rows title.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getRowsTitle",
          "return": "String"
        },
        "getRowCount": {
          "description": "Get the NBox row count.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getRowCount",
          "return": "Number"
        },
        "getRow": {
          "description": "Returns information for automation testing verification of a specified NBox row.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getRow",
          "params": [
            {
              "name": "rowValue",
              "description": "The id of the row.",
              "type": "string"
            }
          ],
          "return": "object|null"
        },
        "getColumnsTitle": {
          "description": "Get the NBox columns title.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getColumnsTitle",
          "return": "String"
        },
        "getColumnCount": {
          "description": "Get the NBox column count.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getColumnCount",
          "return": "Number"
        },
        "getColumn": {
          "description": "Returns information for automation testing verification of a specified NBox column.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getColumn",
          "params": [
            {
              "name": "columnValue",
              "description": "The id of the column.",
              "type": "string"
            }
          ],
          "return": "object|null"
        },
        "getCell": {
          "description": "Returns information for automation testing verification of a specified NBox cell.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getCell",
          "params": [
            {
              "name": "rowValue",
              "description": "The id of the containing row.",
              "type": "string"
            },
            {
              "name": "columnValue",
              "description": "The id of the containing column.",
              "type": "string"
            }
          ],
          "return": "object|null"
        },
        "getGroupBehavior": {
          "description": "Get the NBox group behavior.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getGroupBehavior",
          "return": "String"
        },
        "getGroupNode": {
          "description": "Returns information for automation testing verification of a specified NBox group node.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getGroupNode",
          "params": [
            {
              "name": "groupCategory",
              "description": "A string corresponding to the groupCategory value of the nodes represented by this group node.",
              "type": "String"
            }
          ],
          "return": "object|null"
        },
        "getDialog": {
          "description": "Returns information for automation testing verification of the currently active NBox dialog.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getDialog",
          "return": "object|null"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "nodeTemplate": {
          "description": "The nodeTemplate slot is used to specify the template for creating each node of the NBox. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "nodeTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-n-box> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current node.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current node.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node.",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered node.",
              "type": "any"
            },
            "label": {
              "description": "The label of the hovered node.",
              "type": "string"
            },
            "secondaryLabel": {
              "description": "The secondaryLabel of the hovered node.",
              "type": "string"
            },
            "row": {
              "description": "The id of the row containing the hovered node.",
              "type": "string"
            },
            "column": {
              "description": "The id of the column containing the hovered node.",
              "type": "string"
            },
            "color": {
              "description": "The color of the hovered node.",
              "type": "string"
            },
            "indicatorColor": {
              "description": "The indicator color of the hovered node.",
              "type": "string"
            },
            "componentElement": {
              "description": "The nbox HTML element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "oj-n-box-node": {
      "name": "oj-n-box-node",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "N Box Node",
      "type": "core",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojnbox"
        }
      },
      "description": "ojNBoxNode",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojNBoxNode.html",
      "properties": {
        "borderColor": {
          "description": "The color of the node border.",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "help": "borderColor"
        },
        "borderWidth": {
          "description": "The width of the node border.",
          "type": "number",
          "displayName": "Border Width",
          "value": 0,
          "help": "borderWidth"
        },
        "categories": {
          "description": "An optional array of additional category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with other visualization elements. If not defined, the node id is used.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "categories"
        },
        "color": {
          "description": "The background color of this node.",
          "type": "string",
          "displayName": "Color",
          "value": "",
          "help": "color"
        },
        "column": {
          "description": "The column id for this node.",
          "type": "string",
          "displayName": "Column",
          "value": "",
          "help": "column"
        },
        "groupCategory": {
          "description": "The group category this node belongs to. Nodes with the same groupCategory will be grouped together.",
          "type": "string",
          "displayName": "Group Category",
          "value": "",
          "help": "groupCategory"
        },
        "icon": {
          "description": "Defines the primary icon for this node.",
          "type": "object",
          "displayName": "Icon",
          "value": null,
          "help": "icon",
          "properties": {
            "borderColor": {
              "description": "The border color of this icon.",
              "type": "string",
              "displayName": "Border Color",
              "help": "icon.borderColor"
            },
            "borderRadius": {
              "description": "The border radius of this icon. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Border Radius",
              "help": "icon.borderRadius"
            },
            "borderWidth": {
              "description": "The border width of this icon.",
              "type": "number",
              "displayName": "Border Width",
              "help": "icon.borderWidth"
            },
            "color": {
              "description": "The fill color of this icon.",
              "type": "string",
              "displayName": "Color",
              "help": "icon.color"
            },
            "height": {
              "description": "The height of this icon.",
              "type": "number|null",
              "displayName": "Height",
              "help": "icon.height"
            },
            "opacity": {
              "description": "The opacity of this icon.",
              "type": "number",
              "displayName": "Opacity",
              "help": "icon.opacity"
            },
            "pattern": {
              "description": "The fill pattern of this icon.",
              "type": "string",
              "displayName": "Pattern",
              "value": "none",
              "help": "icon.pattern",
              "enumValues": [
                "largeChecker",
                "largeCrosshatch",
                "largeDiagonalLeft",
                "largeDiagonalRight",
                "largeDiamond",
                "largeTriangle",
                "mallChecker",
                "none",
                "smallCrosshatch",
                "smallDiagonalLeft",
                "smallDiagonalRight",
                "smallDiamond",
                "smallTriangle"
              ],
              "propertyEditorValues": {
                "largeChecker": {
                  "displayName": "Large Checker"
                },
                "largeCrosshatch": {
                  "displayName": "Large Crosshatch"
                },
                "largeDiagonalLeft": {
                  "displayName": "Large Diagonal Left"
                },
                "largeDiagonalRight": {
                  "displayName": "Large Diagonal Right"
                },
                "largeDiamond": {
                  "displayName": "Large Diamond"
                },
                "largeTriangle": {
                  "displayName": "Large Triangle"
                },
                "mallChecker": {
                  "displayName": "Mall Checker"
                },
                "none": {
                  "displayName": "None"
                },
                "smallCrosshatch": {
                  "displayName": "Small Crosshatch"
                },
                "smallDiagonalLeft": {
                  "displayName": "Small Diagonal Left"
                },
                "smallDiagonalRight": {
                  "displayName": "Small Diagonal Right"
                },
                "smallDiamond": {
                  "displayName": "Small Diamond"
                },
                "smallTriangle": {
                  "displayName": "Small Triangle"
                }
              }
            },
            "shape": {
              "description": "The shape of this icon. Can take the name of a built-in shape or the svg path commands for a custom shape.",
              "type": "string",
              "displayName": "Shape",
              "help": "icon.shape",
              "propertyEditorValues": {
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "ellipse": {
                  "displayName": "Ellipse"
                },
                "human": {
                  "displayName": "Human"
                },
                "plus": {
                  "displayName": "Plus"
                },
                "rectangle": {
                  "displayName": "Rectangle"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangleDown": {
                  "displayName": "Triangle Down"
                },
                "triangleUp": {
                  "displayName": "Triangle Up"
                }
              }
            },
            "source": {
              "description": "The URL of an image to display for this icon.",
              "type": "string",
              "displayName": "Source",
              "help": "icon.source"
            },
            "svgClassName": {
              "description": "The CSS style class defining the style of this icon.",
              "type": "string",
              "displayName": "Svg Class Name",
              "value": "",
              "help": "icon.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of this icon.",
              "type": "object",
              "displayName": "Svg Style",
              "help": "icon.svgStyle"
            },
            "width": {
              "description": "The width of this icon.",
              "type": "number|null",
              "displayName": "Width",
              "help": "icon.width"
            }
          }
        },
        "indicatorColor": {
          "description": "The background color for the indicator section of this node.",
          "type": "string",
          "displayName": "Indicator Color",
          "value": "",
          "help": "indicatorColor"
        },
        "indicatorIcon": {
          "description": "Defines the indicator icon for this node.",
          "type": "object",
          "displayName": "Indicator Icon",
          "value": null,
          "help": "indicatorIcon",
          "properties": {
            "borderColor": {
              "description": "The border color of this indicator icon.",
              "type": "string",
              "displayName": "Border Color",
              "help": "indicatorIcon.borderColor"
            },
            "borderRadius": {
              "description": "The border radius of this indicator icon. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Border Radius",
              "help": "indicatorIcon.borderRadius"
            },
            "borderWidth": {
              "description": "The border width of this indicator icon.",
              "type": "number",
              "displayName": "Border Width",
              "help": "indicatorIcon.borderWidth"
            },
            "color": {
              "description": "The fill color of this indicator icon.",
              "type": "string",
              "displayName": "Color",
              "help": "indicatorIcon.color"
            },
            "height": {
              "description": "The height of this indicator icon.",
              "type": "number|null",
              "displayName": "Height",
              "help": "indicatorIcon.height"
            },
            "opacity": {
              "description": "The opacity of this indicator icon.",
              "type": "number",
              "displayName": "Opacity",
              "help": "indicatorIcon.opacity"
            },
            "pattern": {
              "description": "The fill pattern of this indicator icon.",
              "type": "string",
              "displayName": "Pattern",
              "help": "indicatorIcon.pattern",
              "enumValues": [
                "largeChecker",
                "largeCrosshatch",
                "largeDiagonalLeft",
                "largeDiagonalRight",
                "largeDiamond",
                "largeTriangle",
                "none",
                "smallChecker",
                "smallCrosshatch",
                "smallDiagonalLeft",
                "smallDiagonalRight",
                "smallDiamond",
                "smallTriangle"
              ],
              "propertyEditorValues": {
                "largeChecker": {
                  "displayName": "Large Checker"
                },
                "largeCrosshatch": {
                  "displayName": "Large Crosshatch"
                },
                "largeDiagonalLeft": {
                  "displayName": "Large Diagonal Left"
                },
                "largeDiagonalRight": {
                  "displayName": "Large Diagonal Right"
                },
                "largeDiamond": {
                  "displayName": "Large Diamond"
                },
                "largeTriangle": {
                  "displayName": "Large Triangle"
                },
                "none": {
                  "displayName": "None"
                },
                "smallChecker": {
                  "displayName": "Small Checker"
                },
                "smallCrosshatch": {
                  "displayName": "Small Crosshatch"
                },
                "smallDiagonalLeft": {
                  "displayName": "Small Diagonal Left"
                },
                "smallDiagonalRight": {
                  "displayName": "Small Diagonal Right"
                },
                "smallDiamond": {
                  "displayName": "Small Diamond"
                },
                "smallTriangle": {
                  "displayName": "Small Triangle"
                }
              }
            },
            "shape": {
              "description": "The shape of this indicator icon. Can take the name of a built-in shape or the svg path commands for a custom shape.",
              "type": "string",
              "displayName": "Shape",
              "help": "indicatorIcon.shape",
              "propertyEditorValues": {
                "circle": {
                  "displayName": "Circle"
                },
                "diamond": {
                  "displayName": "Diamond"
                },
                "ellipse": {
                  "displayName": "Ellipse"
                },
                "human": {
                  "displayName": "Human"
                },
                "plus": {
                  "displayName": "Plus"
                },
                "rectangle": {
                  "displayName": "Rectangle"
                },
                "square": {
                  "displayName": "Square"
                },
                "star": {
                  "displayName": "Star"
                },
                "triangleDown": {
                  "displayName": "Triangle Down"
                },
                "triangleUp": {
                  "displayName": "Triangle Up"
                }
              }
            },
            "source": {
              "description": "The URL of an image to display for this indicator icon.",
              "type": "string|null",
              "displayName": "Source",
              "help": "indicatorIcon.source"
            },
            "svgClassName": {
              "description": "The CSS style class defining the style of this indicator icon.",
              "type": "string",
              "displayName": "Svg Class Name",
              "help": "indicatorIcon.svgClassName"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of this indicator icon.",
              "type": "object|null",
              "displayName": "Svg Style",
              "help": "indicatorIcon.svgStyle"
            },
            "width": {
              "description": "The width of this indicator icon.",
              "type": "number|null",
              "displayName": "Width",
              "help": "indicatorIcon.width"
            }
          }
        },
        "label": {
          "description": "The text for the node label.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "label"
        },
        "row": {
          "description": "The row id for this node.",
          "type": "string",
          "displayName": "Row",
          "value": "",
          "help": "row"
        },
        "secondaryLabel": {
          "description": "The text for the secondary node label.",
          "type": "string",
          "displayName": "Secondary Label",
          "value": "",
          "help": "secondaryLabel"
        },
        "shortDesc": {
          "description": "The description of the node. This is used for customizing the tooltip text.",
          "type": "string",
          "displayName": "Short Desc",
          "value": "",
          "help": "shortDesc"
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the node text.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the node text.",
          "type": "object|null",
          "displayName": "Svg Style",
          "value": null,
          "help": "svgStyle"
        },
        "xPercentage": {
          "description": "An optional horizontal position (as a percentage) to be used in the average position calculation when grouping across cells.",
          "type": "number|null",
          "displayName": "X Percentage",
          "value": null,
          "help": "xPercentage"
        },
        "yPercentage": {
          "description": "An optional vertical position (as a percentage) to be used in the average position calculation when grouping across cells.",
          "type": "number|null",
          "displayName": "Y Percentage",
          "value": null,
          "help": "yPercentage"
        }
      }
    },
    "oj-optgroup": {
      "name": "oj-optgroup",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Option Group",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojoptgroup"
        }
      },
      "description": "An optgroup supports grouping of child oj-option elements.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojOptgroup.html",
      "properties": {
        "disabled": {
          "description": "Disables the group if set to true.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "label": {
          "description": "The group label.",
          "type": "string",
          "displayName": "Label",
          "translatable": true,
          "required": true,
          "help": "label"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The oj-optgroup element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "Default"
        }
      }
    },
    "oj-option": {
      "name": "oj-option",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Option",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojoption"
        }
      },
      "description": "An option represents a value for JET elements that display a list of values.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojOption.html",
      "properties": {
        "disabled": {
          "description": "Disables the option if set to true.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "value": {
          "description": "The value of the option.",
          "type": "any",
          "displayName": "Value",
          "required": true,
          "help": "value"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "refresh": {
          "description": "Refreshes the visual state of the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The default slot for the option's content.",
          "displayName": "default",
          "help": "Default"
        },
        "endIcon": {
          "description": "The slot for the option's end icon.",
          "help": "endIcon"
        },
        "startIcon": {
          "description": "The slot for the option's start icon.",
          "help": "startIcon"
        }
      }
    },
    "oj-paging-control": {
      "name": "oj-paging-control",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Paging Control",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojpagingcontrol"
        }
      },
      "description": "A paging control provides paging functionality for data collections.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojPagingControl.html",
      "properties": {
        "data": {
          "description": "Specifies the data bound to the Paging Control. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "loadMoreOptions": {
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid). In addition, \"loadMore\" is not compatible with Table, Listview, DataGrid default scroll-policy \"loadMoreOnScroll\"."
            }
          ],
          "description": "Options for loadMore mode.",
          "type": "object",
          "displayName": "Load More Options",
          "help": "loadMoreOptions",
          "properties": {
            "maxCount": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid)."
                }
              ],
              "description": "The maximum number of items to display.",
              "type": "number",
              "displayName": "Max Count",
              "value": 500,
              "minimum": 0,
              "help": "loadMoreOptions.maxCount"
            }
          }
        },
        "mode": {
          "description": "Specifies the paging mode.",
          "type": "string",
          "displayName": "Mode",
          "value": "page",
          "help": "mode",
          "enumValues": [
            "loadMore",
            "page"
          ],
          "propertyEditorValues": {
            "loadMore": {
              "description": "Deprecated: This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid). In addition, \"loadMore\" is not compatible with Table, Listview, DataGrid default scroll-policy \"loadMoreOnScroll\". Display paging control in high-water mark mode.",
              "displayName": "Load More"
            },
            "page": {
              "description": "Display paging control in pagination mode.",
              "displayName": "Page"
            }
          }
        },
        "overflow": {
          "description": "Specifies the options for when the Paging Control width is too narrow.",
          "type": "string",
          "displayName": "Overflow",
          "value": "fit",
          "help": "overflow",
          "enumValues": [
            "fit",
            "none"
          ],
          "propertyEditorValues": {
            "fit": {
              "description": "Display as many controls as can fit in the PagingControl width.",
              "displayName": "Fit"
            },
            "none": {
              "description": "Display all controls. Controls which cannot fit will be truncated.",
              "displayName": "None"
            }
          }
        },
        "pageOptions": {
          "description": "Options for page mode.",
          "type": "object",
          "displayName": "Page Options",
          "help": "pageOptions",
          "properties": {
            "layout": {
              "description": "An array of values specifying the navigation controls to display for numeric page links.",
              "type": "Array<string>",
              "displayName": "Layout",
              "value": [
                "auto"
              ],
              "help": "pageOptions.layout",
              "enumValues": [
                "all",
                "auto",
                "input",
                "nav",
                "pages",
                "rangeText"
              ],
              "propertyEditorValues": {
                "all": {
                  "description": "Display all controls",
                  "displayName": "All"
                },
                "auto": {
                  "description": "The PagingControl decides which controls to display",
                  "displayName": "Auto"
                },
                "input": {
                  "description": "Display the page input control",
                  "displayName": "Input"
                },
                "nav": {
                  "description": "Display the navigation arrows",
                  "displayName": "Nav"
                },
                "pages": {
                  "description": "Display the page links",
                  "displayName": "Pages"
                },
                "rangeText": {
                  "description": "Display the page range text control",
                  "displayName": "Range Text"
                }
              }
            },
            "maxPageLinks": {
              "description": "Specifies the maximum number of numeric page links to display.",
              "type": "number",
              "displayName": "Max Page Links",
              "value": 6,
              "minimum": 5,
              "help": "pageOptions.maxPageLinks"
            },
            "orientation": {
              "description": "Specifies the orientation of the page links.",
              "type": "string",
              "displayName": "Orientation",
              "value": "horizontal",
              "help": "pageOptions.orientation",
              "enumValues": [
                "horizontal",
                "vertical"
              ],
              "propertyEditorValues": {
                "horizontal": {
                  "displayName": "Horizontal"
                },
                "vertical": {
                  "displayName": "Vertical"
                }
              }
            },
            "type": {
              "description": "Specifies the type of page links.",
              "type": "string",
              "displayName": "Type",
              "value": "numbers",
              "help": "pageOptions.type",
              "enumValues": [
                "dots",
                "numbers"
              ],
              "propertyEditorValues": {
                "dots": {
                  "description": "Render dots",
                  "displayName": "Dots"
                },
                "numbers": {
                  "description": "Render numeric page links",
                  "displayName": "Numbers"
                }
              }
            }
          }
        },
        "pageSize": {
          "description": "Page size. ",
          "type": "number",
          "displayName": "Page Size",
          "value": 25,
          "minimum": 1,
          "help": "pageSize"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "fullMsgItem": {
              "description": "Singe item page index text See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.fullMsgItem"
            },
            "fullMsgItemApprox": {
              "description": "Single item page index text for approx See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.fullMsgItemApprox"
            },
            "fullMsgItemAtLeast": {
              "description": "Singe item page index text for at least See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.fullMsgItemAtLeast"
            },
            "fullMsgItemRange": {
              "description": "Item range page index text See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.fullMsgItemRange"
            },
            "fullMsgItemRangeApprox": {
              "description": "Item range page index text for approx See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.fullMsgItemRangeApprox"
            },
            "fullMsgItemRangeAtLeast": {
              "description": "Item range page index text for at least See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.fullMsgItemRangeAtLeast"
            },
            "labelAccNavFirstPage": {
              "description": "First page label for screen readers. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccNavFirstPage"
            },
            "labelAccNavLastPage": {
              "description": "Last page label for screen readers. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccNavLastPage"
            },
            "labelAccNavNextPage": {
              "description": "Next page label for screen readers. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccNavNextPage"
            },
            "labelAccNavPage": {
              "description": "Current page label for screen readers. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccNavPage"
            },
            "labelAccNavPreviousPage": {
              "description": "Previous page label for screen readers. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccNavPreviousPage"
            },
            "labelAccPageNumber": {
              "description": "Paging control page number label for screen readers. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccPageNumber"
            },
            "labelAccPaging": {
              "description": "Paging control label for screen readers. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccPaging"
            },
            "labelLoadMore": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid)."
                }
              ],
              "description": "Load more link text. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelLoadMore"
            },
            "labelLoadMoreMaxRows": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0",
                  "description": "This option is deprecated and will not get feature updates or support going forward. Please use native component high-water mark scrolling API instead (see Table, ListView, DataGrid)."
                }
              ],
              "description": "Label for when load more has reached the maximum limit of rows to fetch. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelLoadMoreMaxRows"
            },
            "labelNavInputPage": {
              "description": "Current page label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNavInputPage"
            },
            "labelNavInputPageMax": {
              "description": "Maximum page label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNavInputPageMax"
            },
            "maxPageLinksInvalid": {
              "description": "Invalid max page links value error. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.maxPageLinksInvalid"
            },
            "msgItemNoTotal": {
              "description": "Single item page index text for no total items See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgItemNoTotal"
            },
            "msgItemRangeCurrent": {
              "description": "Item range text for known row count. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgItemRangeCurrent"
            },
            "msgItemRangeCurrentSingle": {
              "description": "Item range text for single page range. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgItemRangeCurrentSingle"
            },
            "msgItemRangeItems": {
              "description": "Item range items text. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgItemRangeItems"
            },
            "msgItemRangeNoTotal": {
              "description": "Item range [age index text for no total items See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgItemRangeNoTotal"
            },
            "msgItemRangeOf": {
              "description": "Item range \"of\" text. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgItemRangeOf"
            },
            "msgItemRangeOfApprox": {
              "description": "Item range \"of approx\" text. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgItemRangeOfApprox"
            },
            "msgItemRangeOfAtLeast": {
              "description": "Item range \"of at least\" text. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgItemRangeOfAtLeast"
            },
            "pageInvalid": {
              "description": "Invalid page error. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.pageInvalid"
            },
            "tipNavFirstPage": {
              "description": "First page button tip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tipNavFirstPage"
            },
            "tipNavInputPage": {
              "description": "Current page tip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tipNavInputPage"
            },
            "tipNavLastPage": {
              "description": "Last page button tip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tipNavLastPage"
            },
            "tipNavNextPage": {
              "description": "Next page button tip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tipNavNextPage"
            },
            "tipNavPageLink": {
              "description": "Current page link tip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tipNavPageLink"
            },
            "tipNavPreviousPage": {
              "description": "Previous page button tip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tipNavPreviousPage"
            }
          }
        }
      },
      "methods": {
        "firstPage": {
          "description": "Load the first page of data",
          "help": "firstPage",
          "return": "Promise<null>"
        },
        "previousPage": {
          "description": "Load the previous page of data",
          "help": "previousPage",
          "return": "Promise<null>"
        },
        "nextPage": {
          "description": "Load the next page of data",
          "help": "nextPage",
          "return": "Promise<null>"
        },
        "lastPage": {
          "description": "Load the last page of data",
          "help": "lastPage",
          "return": "Promise<null>"
        },
        "page": {
          "description": "Load the specified page of data",
          "help": "page",
          "params": [
            {
              "name": "page",
              "description": "Page number.",
              "type": "number"
            }
          ],
          "return": "Promise<null>"
        },
        "loadNext": {
          "description": "Load the next set of data",
          "help": "loadNext",
          "return": "Promise<null>"
        },
        "refresh": {
          "description": "Refresh the paging control.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-picto-chart": {
      "name": "oj-picto-chart",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Picto Chart",
      "type": "core",
      "since": "1.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojpictochart"
        }
      },
      "description": "A picto chart displays information using icons to visualize an absolute number or the relative sizes of the different parts of a population.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojPictoChart.html",
      "properties": {
        "animationDuration": {
          "description": "The duration of the animations in milliseconds.",
          "type": "number",
          "displayName": "Animation Duration",
          "units": "milliseconds",
          "help": "animationDuration"
        },
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "alphaFade",
            "auto",
            "none",
            "popIn",
            "zoom"
          ],
          "propertyEditorValues": {
            "alphaFade": {
              "displayName": "Alpha Fade"
            },
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            },
            "popIn": {
              "displayName": "Pop In"
            },
            "zoom": {
              "displayName": "Zoom"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the itemTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "columnCount": {
          "description": "The number of columns in the picto chart. If unspecified, the number of columns will be automatically computed.",
          "type": "number|null",
          "displayName": "Column Count",
          "value": null,
          "help": "columnCount"
        },
        "columnWidth": {
          "description": "The width of a column in pixels. If unspecified, the column width will be automatically computed. See the Help documentation for more information.",
          "type": "number|null",
          "displayName": "Column Width",
          "value": null,
          "units": "pixels",
          "help": "columnWidth"
        },
        "data": {
          "description": "Specifies the DataProvider for the picto chart. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled. Drillable objects will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "off",
          "help": "drilling",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Data items with any category matching an item in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over data items.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "hoverBehaviorDelay": {
          "description": "Specifies initial hover delay in milliseconds for highlighting data items.",
          "type": "number",
          "displayName": "Hover Behavior Delay",
          "value": 200,
          "units": "milliseconds",
          "help": "hoverBehaviorDelay"
        },
        "items": {
          "description": "An array of objects that define the picto chart items. See the Help documentation for more information.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Items",
          "value": null,
          "help": "items",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The item id. The item id should be set by the application if the DataProvider is not being used.",
                  "type": "any"
                },
                "name": {
                  "description": "The name of the item. Used for default tooltip and accessibility.",
                  "type": "string"
                },
                "shape": {
                  "description": "The shape of the item. Can take the name of a built-in shape or the svg path commands for a custom shape. \"None\" will make the item transparent and can be used to create gaps. Does not apply if custom image is specified.",
                  "type": "string",
                  "value": "rectangle",
                  "propertyEditorValues": {
                    "circle": {
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "displayName": "Diamond"
                    },
                    "ellipse": {
                      "displayName": "Ellipse"
                    },
                    "human": {
                      "displayName": "Human"
                    },
                    "none": {
                      "displayName": "None"
                    },
                    "plus": {
                      "displayName": "Plus"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "square": {
                      "displayName": "Square"
                    },
                    "star": {
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "color": {
                  "description": "The color of the item. Does not apply if custom image is specified.",
                  "type": "string"
                },
                "borderColor": {
                  "description": "The border color of the item. Does not apply if custom image is specified.",
                  "type": "string"
                },
                "borderWidth": {
                  "description": "The border width of the item in pixels. Does not apply if custom image is specified.",
                  "type": "number"
                },
                "source": {
                  "description": "The URI of the custom image. If specified, it takes precedence over shape.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the item. The style class and inline style will override any other styling specified with other properties. For tooltip interactivity, it's recommended to also pass a representative color to the item color attribute. Does not apply if custom image is specified.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the item. The style class and inline style will override any other styling specified with other properties. For tooltip interactivity, it's recommended to also pass a representative color to the item color attribute. Does not apply if custom image is specified.",
                  "type": "object"
                },
                "sourceHover": {
                  "description": "The optional URI for the hover state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "The optional URI for the selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
                  "type": "string"
                },
                "count": {
                  "description": "Specifies the number of times that the shape (or custom image) is drawn. Fractional counts (such as 4.5) are supported; however, fractions other than the multiples of 0.5 should be avoided because the fractional rendering ignores the gaps between shapes and the irregularity of the shapes.",
                  "type": "number"
                },
                "rowSpan": {
                  "description": "The number of rows each shape (or custom image) spans. Used for creating a pictoChart with mixed item sizes.",
                  "type": "number"
                },
                "columnSpan": {
                  "description": "The number of columns each shape (or custom image) spans. Used for creating a pictoChart with mixed item sizes.",
                  "type": "number"
                },
                "shortDesc": {
                  "description": "Short description string for accessibility users.",
                  "type": "string"
                },
                "categories": {
                  "description": "An array of category strings corresponding to this item. If not specified, defaults to the item id or name. This enables highlighting and filtering of individual data items through interactions with other visualization elements.",
                  "type": "Array<string>"
                },
                "drilling": {
                  "description": "Whether drilling is enabled for the item. Drillable items will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all items at once, use the drilling attribute in the top level.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                }
              }
            }
          }
        },
        "layout": {
          "description": "Specifies the direction in which items are laid out.",
          "type": "string",
          "displayName": "Layout",
          "value": "horizontal",
          "help": "layout",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "displayName": "Horizontal"
            },
            "vertical": {
              "displayName": "Vertical"
            }
          }
        },
        "layoutOrigin": {
          "description": "Specifies where the first item is rendered. Subsequent items follow the first item according to the layout.",
          "type": "string",
          "displayName": "Layout Origin",
          "value": "topStart",
          "help": "layoutOrigin",
          "enumValues": [
            "bottomEnd",
            "bottomStart",
            "topEnd",
            "topStart"
          ],
          "propertyEditorValues": {
            "bottomEnd": {
              "displayName": "Bottom End"
            },
            "bottomStart": {
              "displayName": "Bottom Start"
            },
            "topEnd": {
              "displayName": "Top End"
            },
            "topStart": {
              "displayName": "Top Start"
            }
          }
        },
        "rowCount": {
          "description": "The number of rows in the picto chart. If unspecified, the number of rows will be automatically computed.",
          "type": "number|null",
          "displayName": "Row Count",
          "value": null,
          "help": "rowCount"
        },
        "rowHeight": {
          "description": "The height of a row in pixels. If unspecified, the row height will be automatically computed. See the Help documentation for more information.",
          "type": "number|null",
          "displayName": "Row Height",
          "value": null,
          "units": "pixels",
          "help": "rowHeight"
        },
        "selection": {
          "description": "An array of id strings, used to define the selected objects.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "displayName": "Multiple"
            },
            "none": {
              "displayName": "None"
            },
            "single": {
              "displayName": "Single"
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the picto chart. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            }
          }
        }
      },
      "methods": {
        "getItem": {
          "description": "Returns information for automation testing verification of a specified item.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getItem",
          "params": [
            {
              "name": "index",
              "description": "The index.",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getItemCount": {
          "description": "Returns the number of items in the pictoChart data.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getItemCount",
          "return": "number"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojDrill": {
          "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "drill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "any"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the picto chart. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-picto-chart> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current item.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item.",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered item.",
              "type": "any"
            },
            "name": {
              "description": "The name of the hovered item.",
              "type": "string"
            },
            "count": {
              "description": "The count of the hovered item.",
              "type": "number"
            },
            "color": {
              "description": "The color of the hovered item.",
              "type": "string"
            },
            "componentElement": {
              "description": "The picto chart HTML element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "oj-picto-chart-item": {
      "name": "oj-picto-chart-item",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Picto Chart Item",
      "type": "core",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojpictochart"
        }
      },
      "description": "ojPictoChartItem",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojPictoChartItem.html",
      "properties": {
        "borderColor": {
          "description": "The border color of the item. Does not apply if custom image is specified.",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "format": "color",
          "help": "borderColor"
        },
        "borderWidth": {
          "description": "The border width of the item in pixels. Does not apply if custom image is specified.",
          "type": "number",
          "displayName": "Border Width",
          "value": 0,
          "units": "pixels",
          "help": "borderWidth"
        },
        "categories": {
          "description": "An array of category strings corresponding to this picto chart item. This allows highlighting and filtering of items.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "categories"
        },
        "color": {
          "description": "The color of the item. Does not apply if custom image is specified.",
          "type": "string",
          "displayName": "Color",
          "value": "",
          "format": "color",
          "help": "color"
        },
        "columnSpan": {
          "description": "The number of columns each shape (or custom image) spans. Used for creating a picto chart with mixed item sizes.",
          "type": "number",
          "displayName": "Column Span",
          "value": 1,
          "minimum": 0,
          "help": "columnSpan"
        },
        "count": {
          "description": "Specifies the number of times that the shape (or custom image) is drawn. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Count",
          "value": 1,
          "help": "count"
        },
        "drilling": {
          "description": "Whether drilling is enabled on the item. Drillable items will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "name": {
          "description": "The name of the item. Used for default tooltip and accessibility.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "translatable": true,
          "help": "name"
        },
        "rowSpan": {
          "description": "The number of rows each shape (or custom image) spans. Used for creating a picto chart with mixed item sizes.",
          "type": "number",
          "displayName": "Row Span",
          "value": 1,
          "help": "rowSpan"
        },
        "shape": {
          "description": "The shape of the item. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Shape",
          "value": "rectangle",
          "help": "shape",
          "propertyEditorValues": {
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "none": {
              "displayName": "None"
            },
            "plus": {
              "displayName": "Plus"
            },
            "rectangle": {
              "displayName": "Rectangle"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "shortDesc": {
          "description": "The description of the item. This is used for customizing the tooltip text.",
          "type": "string",
          "displayName": "Short Desc",
          "help": "shortDesc"
        },
        "source": {
          "description": "The URI of the custom image. If specified, it takes precedence over shape.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "source"
        },
        "sourceHover": {
          "description": "The optional URI for the hover state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover",
          "value": "",
          "help": "sourceHover"
        },
        "sourceHoverSelected": {
          "description": "The optional URI for the hover selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover Selected",
          "value": "",
          "help": "sourceHoverSelected"
        },
        "sourceSelected": {
          "description": "The optional URI for the selected state. If not specified, the source image will be used.",
          "type": "string",
          "displayName": "Source Selected",
          "value": "",
          "help": "sourceSelected"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the item. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        }
      }
    },
    "oj-popup": {
      "name": "oj-popup",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Popup",
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojpopup"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-focus-highlight"
          ],
          "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control. The \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load. The application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are: \"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value. \"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism. \"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result. To change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
        }
      ],
      "description": "A popup temporarily 'pops up' content in the foreground.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojPopup.html",
      "properties": {
        "autoDismiss": {
          "description": "Specifies the auto dismissal behavior.",
          "type": "string",
          "displayName": "Auto Dismiss",
          "value": "focusLoss",
          "help": "autoDismiss",
          "enumValues": [
            "focusLoss",
            "none"
          ],
          "propertyEditorValues": {
            "focusLoss": {
              "description": "defines auto dismissal behavior when focus leaves the content of the popup or associated launcher. In addition, if what the popup is positioned to is not visible within an overflow area, the popup will auto close dismiss.",
              "displayName": "Focus Loss"
            },
            "none": {
              "description": "disables auto dismissal behaviors.",
              "displayName": "None"
            }
          }
        },
        "chrome": {
          "description": "Specifies whether to use the border, shadow, and background colors from the active theme.",
          "type": "string",
          "displayName": "Chrome",
          "value": "default",
          "help": "chrome",
          "enumValues": [
            "default",
            "none"
          ],
          "propertyEditorValues": {
            "default": {
              "description": "describes the popups border, shadow, and background color defined by the active theme.",
              "displayName": "Default"
            },
            "none": {
              "description": "turns off the outer chrome defined by the active theme.",
              "displayName": "None"
            }
          }
        },
        "initialFocus": {
          "description": "Specifies whether the popup steals focus to its content when initially opened.",
          "type": "string",
          "displayName": "Initial Focus",
          "value": "auto",
          "help": "initialFocus",
          "enumValues": [
            "auto",
            "firstFocusable",
            "none",
            "popup"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "is derived from the values of the modality and autoDismiss properties",
              "displayName": "Auto"
            },
            "firstFocusable": {
              "description": "defines that a popup should grab focus to the first focusable element within the popup's content.",
              "displayName": "First Focusable"
            },
            "none": {
              "description": "prevents the popup from stealing focus when open.",
              "displayName": "None"
            },
            "popup": {
              "description": "focus to the root popup container (good choice for touch platforms).",
              "displayName": "Popup"
            }
          }
        },
        "modality": {
          "description": "Specifies whether the popup should block user input to the page.",
          "type": "string",
          "displayName": "Modality",
          "value": "modeless",
          "help": "modality",
          "enumValues": [
            "modal",
            "modeless"
          ],
          "propertyEditorValues": {
            "modal": {
              "description": "The popup is modal. Interactions with other page elements are disabled. Modal popups overlay other page elements.",
              "displayName": "Modal"
            },
            "modeless": {
              "description": "defines a modeless popup.",
              "displayName": "Modeless"
            }
          }
        },
        "position": {
          "description": "Specifies the position of a popup when launched. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Position",
          "help": "position",
          "properties": {
            "at": {
              "description": "Defines which position on the target element (\"of\") to align the positioned element against.",
              "type": "object",
              "displayName": "At",
              "help": "position.at",
              "properties": {
                "horizontal": {
                  "description": "Defines the horizontal alignment of what the popup is aligned to.",
                  "type": "string",
                  "displayName": "Horizontal",
                  "value": "start",
                  "help": "position.at.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "Defines the vertical alignment of what the popup is aligned to.",
                  "type": "string",
                  "displayName": "Vertical",
                  "value": "bottom",
                  "help": "position.at.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "collision": {
              "description": "Rule for alternate alignment.",
              "type": "string",
              "displayName": "Collision",
              "value": "flip",
              "help": "position.collision",
              "enumValues": [
                "fit",
                "flip",
                "flipcenter",
                "flipfit",
                "none"
              ],
              "propertyEditorValues": {
                "fit": {
                  "description": "shift the element away from the edge of the window.",
                  "displayName": "Fit"
                },
                "flip": {
                  "description": "the element to the opposite side of the target and the collision detection is run again to see if it will fit. Whichever side allows more of the element to be visible will be used.",
                  "displayName": "Flip"
                },
                "flipcenter": {
                  "description": "first applies the flip rule and follow with center alignment.",
                  "displayName": "Flipcenter"
                },
                "flipfit": {
                  "description": "first applies the flip logic, placing the element on whichever side allows more of the element to be visible. Then the fit logic is applied to ensure as much of the element is visible as possible.",
                  "displayName": "Flipfit"
                },
                "none": {
                  "description": "no collision detection.",
                  "displayName": "None"
                }
              }
            },
            "my": {
              "description": "Defines which edge on the popup to align with the target (\"of\") element.",
              "type": "object",
              "displayName": "My",
              "help": "position.my",
              "properties": {
                "horizontal": {
                  "description": "Defines the horizontal alignment of the popup.",
                  "type": "string",
                  "displayName": "Horizontal",
                  "value": "start",
                  "help": "position.my.horizontal",
                  "enumValues": [
                    "center",
                    "end",
                    "left",
                    "right",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "description": "evaluates to \"right\" in LTR mode and \"left\" in RTL mode.",
                      "displayName": "End"
                    },
                    "left": {
                      "displayName": "Left"
                    },
                    "right": {
                      "displayName": "Right"
                    },
                    "start": {
                      "description": "evaluates to \"left\" in LTR mode and \"right\" in RTL mode.",
                      "displayName": "Start"
                    }
                  }
                },
                "vertical": {
                  "description": "Defines the vertical alignment of the popup.",
                  "type": "string",
                  "displayName": "Vertical",
                  "value": "top",
                  "help": "position.my.vertical",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ],
                  "propertyEditorValues": {
                    "bottom": {
                      "displayName": "Bottom"
                    },
                    "center": {
                      "displayName": "Center"
                    },
                    "top": {
                      "displayName": "Top"
                    }
                  }
                }
              }
            },
            "of": {
              "description": "Which element to position the popup against. See the Help documentation for more information.",
              "type": "string|object",
              "displayName": "Of",
              "help": "position.of"
            },
            "offset": {
              "description": "Defines a point offset in pixels from the (\"my\") alignment.",
              "type": "object",
              "displayName": "Offset",
              "help": "position.offset",
              "properties": {
                "x": {
                  "description": "Horizontal aligment offset.",
                  "type": "number",
                  "displayName": "X",
                  "value": 0,
                  "help": "position.offset.x"
                },
                "y": {
                  "description": "Vertical alignment offset.",
                  "type": "number",
                  "displayName": "Y",
                  "value": 0,
                  "help": "position.offset.y"
                }
              }
            }
          }
        },
        "tail": {
          "description": "Specifies whether to display a decoration pointing from the popup to the launching element. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Tail",
          "value": "none",
          "help": "tail",
          "enumValues": [
            "none",
            "simple"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "no decoration will be displayed from the popup pointing to the launcher.",
              "displayName": "None"
            },
            "simple": {
              "description": "enables showing the tail defined by the current theme.",
              "displayName": "Simple"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "ariaCloseSkipLink": {
              "description": "Label assigned to a hidden anchor tag used for accessibility navigation on platforms supporting VoiceOver. The link is injected as a sibling to the context area of an open popup and used for ojPopup#close activation.",
              "type": "string",
              "help": "translations.ariaCloseSkipLink"
            },
            "ariaFocusSkipLink": {
              "description": "Label assigned to a hidden anchor tag used for accessibility navigation on platforms supporting VoiceOver. The link is injected as a sibling to the launcher of an open popup. The launcher is passed as the first argument to ojPopup#open. Activation of the link will move focus to the content of the associated popup.",
              "type": "string",
              "help": "translations.ariaFocusSkipLink"
            },
            "ariaLiveRegionInitialFocusFirstFocusable": {
              "description": "Message announced to a wai-aria live region on desktop platforms when a popup opens and steals initial focus.",
              "type": "string",
              "help": "translations.ariaLiveRegionInitialFocusFirstFocusable"
            },
            "ariaLiveRegionInitialFocusFirstFocusableTouch": {
              "description": "Message announced to a wai-aria live region on platforms supporting VoiceOver when a popup opens and steals initial focus.",
              "type": "string",
              "help": "translations.ariaLiveRegionInitialFocusFirstFocusableTouch"
            },
            "ariaLiveRegionInitialFocusNone": {
              "description": "Message announced to a wai-aria live region on desktop platforms when a popup opens but doesn't change focus.",
              "type": "string",
              "help": "translations.ariaLiveRegionInitialFocusNone"
            },
            "ariaLiveRegionInitialFocusNoneTouch": {
              "description": "Message announced to a wai-aria live region on platforms supporting VocieOver when a popup opens but doesn't change focus.",
              "type": "string",
              "help": "translations.ariaLiveRegionInitialFocusNoneTouch"
            }
          }
        }
      },
      "methods": {
        "open": {
          "description": "Opens the popup.",
          "help": "open",
          "params": [
            {
              "name": "launcher",
              "description": "selector or dom element that is associated with the popup. Defines the context of how the popup is used. The argument is required.",
              "type": "string|Element"
            },
            {
              "name": "position",
              "description": "{@link oj.ojPopup.Position} an element relative to another",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "close": {
          "description": "Closes the popup.",
          "help": "close",
          "return": "void"
        },
        "isOpen": {
          "description": "Returns the state of whether the popup is currently visible.",
          "help": "isOpen",
          "return": "boolean"
        },
        "refresh": {
          "description": "Refreshes the popup, causing it to reevaluate its position.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeOpen": {
          "description": "Triggered before the popup is launched.",
          "bubbles": true,
          "cancelable": true,
          "help": "beforeOpen"
        },
        "ojOpen": {
          "description": "Triggered after the popup is launched.",
          "bubbles": true,
          "help": "open"
        },
        "ojBeforeClose": {
          "description": "Triggered before the popup is dismissed.",
          "bubbles": true,
          "cancelable": true,
          "help": "beforeClose"
        },
        "ojClose": {
          "description": "Triggered after the popup is dismissed.",
          "bubbles": true,
          "help": "close"
        },
        "ojFocus": {
          "description": "Triggered after focus has been transfered to the popup.",
          "bubbles": true,
          "help": "focus"
        },
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that is starting the animation. The number of actions can vary from component to component. Suggested values are: \"open\" - when a popup component is opened \"close\" - when a popup component is closed ",
              "type": "\"open\"|\"close\""
            },
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, It must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation had ended, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "element": {
              "description": "target of animation",
              "type": "Element"
            },
            "action": {
              "description": "The action that is ending the animation. The number of actions can vary from component to component. Suggested values are: \"open\" - when a popup component is opened \"close\" - when a popup component is closed ",
              "type": "\"open\"|\"close\""
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-progress": {
      "name": "oj-progress",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Progress",
      "type": "core",
      "since": "1.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojprogress"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-progress-bar-embedded"
          ],
          "description": "Optional class that can be set on a oj-progress bar element to style an embedded progress bar within a web application or dialog."
        },
        {
          "styleGroup": [
            "oj-progress-bar-start-label"
          ],
          "description": "Optional class that can be set on a div after the oj-progress element. This div contains the start text to display underneath the oj-progress bar."
        },
        {
          "styleGroup": [
            "oj-progress-bar-end-label"
          ],
          "description": "Optional class that can be set on a div after the oj-progress element. This div contains the end text to display underneath the oj-progress bar."
        }
      ],
      "description": "A progress allows the user to visualize the progression of an extended computer operation.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojProgress.html",
      "properties": {
        "max": {
          "description": "The maximum allowed value.",
          "type": "number",
          "displayName": "Max",
          "value": 100,
          "minimum": 0,
          "help": "max"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "ariaIndeterminateProgressText": {
              "description": "Accessible text read by a screen reader while an indeterminate oj-progress is in progress. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.ariaIndeterminateProgressText"
            }
          }
        },
        "type": {
          "description": "The shape of the Progress.",
          "type": "string",
          "displayName": "Type",
          "value": "bar",
          "help": "type",
          "enumValues": [
            "bar",
            "circle"
          ],
          "propertyEditorValues": {
            "bar": {
              "description": "displays progress in a rectangular horizontal meter",
              "displayName": "Bar"
            },
            "circle": {
              "description": "displays progress in a circular meter",
              "displayName": "Circle"
            }
          }
        },
        "value": {
          "description": "The value of the Progress.",
          "type": "number",
          "displayName": "Value",
          "value": 0,
          "writeback": true,
          "minimum": -1,
          "help": "value"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-progress-list": {
      "name": "oj-progress-list",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Progress List",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojprogresslist"
        }
      },
      "description": "A progress list displays a list of items and their progress, it is most commonly used in conjunction with a file picker to display file upload progress.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojProgressList.html",
      "properties": {
        "data": {
          "description": "Data used by the ProgressList.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-radioset": {
      "name": "oj-radioset",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Radioset",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojradioset"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-choice-direction-column"
          ],
          "description": "This is the default. It lays out the radios in a column."
        },
        {
          "styleGroup": [
            "oj-choice-direction-row"
          ],
          "description": "It lays out the radio buttons in a row."
        },
        {
          "styleGroup": [
            "oj-radioset-no-chrome"
          ],
          "description": "Use this styleclass if you don't want the chrome around the set."
        },
        {
          "styleGroup": [
            "oj-radioset-input-start"
          ],
          "description": "Use this styleclass to order the radio at the start and label text at the end even if a theme has a different default order."
        },
        {
          "styleGroup": [
            "oj-radioset-input-end"
          ],
          "description": "Use this styleclass to order the radio at the end and the label text at the start even if a theme has a different default order."
        }
      ],
      "description": "A radio set allows the user to select one option from a set of mutually exclusive options.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojRadioset.html",
      "properties": {
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies if the component is disabled. If true, then all of its inputs and labels are also disabled. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "Establishes a relationship between this component and another element, typically an oj-label custom element. See the Help documenation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "optionRenderer"
        },
        "options": {
          "description": "The option items for the Radioset.",
          "type": "object|null",
          "displayName": "Options",
          "value": null,
          "help": "options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "optionsKeys",
          "properties": {
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "optionsKeys.value"
            }
          }
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Read Only",
          "value": false,
          "help": "readOnly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "readonlyNoValue": {
              "description": "Used for the readonly checkboxset when no option is selected. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.readonlyNoValue"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The value of the component. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "help": "value"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the radioset. A refresh is required after a radioset is programmatically changed. See the Help documentation for more information.",
          "help": "refresh",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise<string>"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-radioset element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-rating-gauge": {
      "name": "oj-rating-gauge",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Rating Gauge",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgauge"
        }
      },
      "description": "A rating gauge displays information graphically, typically displaying or accepting user feedback on a product or service.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojRatingGauge.html",
      "properties": {
        "changed": {
          "description": "Whether there has been a value entered by the user.",
          "type": "boolean",
          "displayName": "Changed",
          "value": false,
          "writeback": true,
          "help": "changed"
        },
        "changedState": {
          "description": "The changed shape for the gauge. Displayed after the user has set a value, or when the changed attribute of the data object is set to true.",
          "type": "object",
          "displayName": "Changed State",
          "help": "changedState",
          "properties": {
            "borderColor": {
              "description": "The border color for changed state. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Border Color",
              "value": "",
              "format": "color",
              "help": "changedState.borderColor"
            },
            "color": {
              "description": "The color for changed state. Does not apply if a custom image is specified. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "changedState.color"
            },
            "shape": {
              "description": "The shape to be used. Can take the name of a built-in shape or the svg path commands for a custom shape. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Shape",
              "value": "star",
              "help": "changedState.shape"
            },
            "source": {
              "description": "The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "changedState.source"
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the changed state. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Svg Class Name",
              "value": "",
              "help": "changedState.svgClassName"
            },
            "svgStyle": {
              "description": "The inline style to apply to the changed state. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "changedState.svgStyle"
            }
          }
        },
        "hoverState": {
          "description": "The shape that displays on hover.",
          "type": "object",
          "displayName": "Hover State",
          "help": "hoverState",
          "properties": {
            "borderColor": {
              "description": "The border color for hover state. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Border Color",
              "value": "",
              "format": "color",
              "help": "hoverState.borderColor"
            },
            "color": {
              "description": "The color for hover state. Does not apply if a custom image is specified. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "hoverState.color"
            },
            "shape": {
              "description": "The shape to be used. Can take the name of a built-in shape or the svg path commands for a custom shape. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Shape",
              "value": "star",
              "help": "hoverState.shape"
            },
            "source": {
              "description": "The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "hoverState.source"
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the hover state. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Svg Class Name",
              "value": "",
              "help": "hoverState.svgClassName"
            },
            "svgStyle": {
              "description": "The inline style to apply to the hover state. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "hoverState.svgStyle"
            }
          }
        },
        "max": {
          "description": "Integer value specifying the maximum value of the gauge, which determines the number of shapes or images that are displayed.",
          "type": "number",
          "displayName": "Max",
          "value": 5,
          "minimum": 0,
          "help": "max"
        },
        "min": {
          "description": "The minimum value that can be set on the gauge by the end user. Does not affect the value set on the gauge by API.",
          "type": "number",
          "displayName": "Min",
          "value": 0,
          "minimum": 0,
          "help": "min"
        },
        "orientation": {
          "description": "Defines the type of rating gauge to be rendered.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "displayName": "Horizontal"
            },
            "vertical": {
              "displayName": "Vertical"
            }
          }
        },
        "preserveAspectRatio": {
          "description": "Specifies whether the images provided should show up at their defined aspect ratios. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Preserve Aspect Ratio",
          "value": "meet",
          "help": "preserveAspectRatio",
          "enumValues": [
            "meet",
            "none"
          ],
          "propertyEditorValues": {
            "meet": {
              "displayName": "Meet"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "readonly": {
          "description": "Defines whether the value of the gauge can be changed by the end user.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "selectedState": {
          "description": "The selected shape for the gauge.",
          "type": "object",
          "displayName": "Selected State",
          "help": "selectedState",
          "properties": {
            "borderColor": {
              "description": "The border color for selected state. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Border Color",
              "value": "",
              "format": "color",
              "help": "selectedState.borderColor"
            },
            "color": {
              "description": "The color for selected state. Does not apply if a custom image is specified. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "selectedState.color"
            },
            "shape": {
              "description": "The shape to be used. Can take the name of a built-in shape or the svg path commands for a custom shape. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Shape",
              "value": "star",
              "help": "selectedState.shape"
            },
            "source": {
              "description": "The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "selectedState.source"
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the selected state. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Svg Class Name",
              "value": "",
              "help": "selectedState.svgClassName"
            },
            "svgStyle": {
              "description": "The inline style to apply to the selected state. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "selectedState.svgStyle"
            }
          }
        },
        "step": {
          "description": "Specifies the increment by which values can be specified by the end user.",
          "type": "number",
          "displayName": "Step",
          "value": 1,
          "help": "step",
          "enumValues": [
            "0",
            "1",
            "5"
          ],
          "propertyEditorValues": {
            "0": {
              "displayName": "0"
            },
            "1": {
              "displayName": "1"
            },
            "5": {
              "displayName": "5"
            }
          }
        },
        "thresholds": {
          "description": "An array of objects specifying the gauge thresholds.",
          "type": "Array<Object>",
          "displayName": "Thresholds",
          "value": [],
          "help": "thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The border color of the threshold.",
                  "type": "string"
                },
                "color": {
                  "description": "The color of the threshold.",
                  "type": "string"
                },
                "max": {
                  "description": "The upper bound of the threshold. This value is ignored for the final threshold, which uses the maximum value of the gauge.",
                  "type": "number"
                },
                "shortDesc": {
                  "description": "Specific description for the threshold and overwrites the shortDesc specified on gauge. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip for a gauge. The function takes a context argument, provided by the gauge. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "transientValue": {
          "description": "Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.",
          "type": "number|null",
          "displayName": "Transient Value",
          "writeback": true,
          "readOnly": true,
          "help": "transientValue"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            }
          }
        },
        "unselectedState": {
          "description": "The unselected shape for the gauge.",
          "type": "object",
          "displayName": "Unselected State",
          "help": "unselectedState",
          "properties": {
            "borderColor": {
              "description": "The border color for unselected state. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Border Color",
              "value": "",
              "format": "color",
              "help": "unselectedState.borderColor"
            },
            "color": {
              "description": "The color for unselected state. Does not apply if a custom image is specified. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "unselectedState.color"
            },
            "shape": {
              "description": "The shape to be used. Can take the name of a built-in shape or the svg path commands for a custom shape. Does not apply if a custom image is specified.",
              "type": "string",
              "displayName": "Shape",
              "value": "star",
              "help": "unselectedState.shape"
            },
            "source": {
              "description": "The URI of the custom image. If specified, it takes precedence over shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "unselectedState.source"
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the unselected state. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Svg Class Name",
              "value": "",
              "help": "unselectedState.svgClassName"
            },
            "svgStyle": {
              "description": "The inline style to apply to the unselected state. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "unselectedState.svgStyle"
            }
          }
        },
        "value": {
          "description": "The value set on the gauge.",
          "type": "number|null",
          "displayName": "Value",
          "writeback": true,
          "minimum": "0",
          "help": "value"
        },
        "visualEffects": {
          "description": "Defines whether visual effects such as overlays are applied to the gauge.",
          "type": "string",
          "displayName": "Visual Effects",
          "value": "auto",
          "help": "visualEffects",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "color": {
              "description": "The indicator color of the gauge.",
              "type": "string"
            },
            "componentElement": {
              "description": "The rating gauge HTML element.",
              "type": "Element"
            },
            "label": {
              "description": "The computed metric label.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "oj-refresher": {
      "name": "oj-refresher",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Refresher",
      "type": "core",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojrefresher"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-scroller"
          ],
          "description": "Designates the element to be the scroller element used in place of the target."
        }
      ],
      "description": "A refresher is a wrapper for attaching pull to refresh functionality to a DOM element.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojRefresher.html",
      "properties": {
        "refreshContent": {
          "description": "Specifies the function to invoke when pull-to-refresh operation is triggered. See the Help documentation for more information.",
          "type": "function",
          "displayName": "Refresh Content",
          "value": null,
          "help": "refreshContent"
        },
        "target": {
          "description": "The target element used to detect a pull-to-refresh trigger. See the Help documentation for more information.",
          "type": "Element",
          "displayName": "Target",
          "value": null,
          "help": "target"
        },
        "text": {
          "description": "Specifies a text message to display in the pull-to-refresh panel after a pull down gesture.",
          "type": "string",
          "displayName": "Text",
          "value": "",
          "translatable": true,
          "help": "text"
        },
        "threshold": {
          "description": "The minimum distance in pixels that the user needs to pull down in order to trigger a refresh. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Threshold",
          "value": 0,
          "help": "threshold"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "ariaRefreshCompleteLink": {
              "description": "Label assigned to the refresh message to denote refresh complete that appears after triggering refresh content.",
              "type": "string",
              "help": "translations.ariaRefreshCompleteLink"
            },
            "ariaRefreshLink": {
              "description": "Label assigned to the refresh link used for triggering refresh content when using keyboard or accessibility agents such as VoiceOver.",
              "type": "string",
              "help": "translations.ariaRefreshLink"
            },
            "ariaRefreshingLink": {
              "description": "Label assigned to the refresh message to denote that the refresh is occuring that appears after triggering refresh content.",
              "type": "string",
              "help": "translations.ariaRefreshingLink"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      }
    },
    "oj-row-expander": {
      "name": "oj-row-expander",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Row Expander",
      "type": "core",
      "since": "1.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojrowexpander"
        }
      },
      "description": "Enable hierarchical data to be displayed in a JET Table and JET DataGrid.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojRowExpander.html",
      "properties": {
        "context": {
          "description": "The context object obtained from the column renderer (Table) or cell renderer (DataGrid)",
          "type": "object",
          "displayName": "Context",
          "value": null,
          "help": "context",
          "properties": {
            "datasource": {
              "description": "a reference to the data source object",
              "type": "oj.DataProvider<K, D>|null"
            },
            "keys": {
              "description": "the object that contains both the row key and column key which identifies the cell",
              "type": "object",
              "properties": {
                "row": {
                  "description": "the row key",
                  "type": "K"
                },
                "column": {
                  "description": "the column key",
                  "type": "K"
                }
              }
            },
            "key": {
              "description": "the row key",
              "type": "K"
            },
            "parentKey": {
              "description": "the parent row key",
              "type": "K"
            },
            "treeDepth": {
              "description": "the depth of the node",
              "type": "number"
            },
            "isLeaf": {
              "description": "true if it is a leaf node",
              "type": "boolean"
            }
          }
        },
        "expanded": {
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The source of truth for expansion is the data source key set."
            }
          ],
          "description": "Specifies if the RowExpander is expanded.",
          "type": "boolean|null",
          "displayName": "Expanded",
          "value": null,
          "writeback": true,
          "help": "expanded"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "accessibleLevelDescription": {
              "description": "Provides properties to customize the accessible context level of the expanded or collapsed row See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleLevelDescription"
            },
            "accessibleRowCollapsed": {
              "description": "Provides properties to customize the accessible context when a row is collapsed See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowCollapsed"
            },
            "accessibleRowDescription": {
              "description": "Provides properties to customize the accessible context level and index of the row See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowDescription"
            },
            "accessibleRowExpanded": {
              "description": "Provides properties to customize the accessible context when a row is expanded See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleRowExpanded"
            },
            "accessibleStateCollapsed": {
              "description": "Provides properties to customize the accessible state of a collapsed row See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleStateCollapsed"
            },
            "accessibleStateExpanded": {
              "description": "Provides properties to customize the accessible state of an expanded row See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.accessibleStateExpanded"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Redraw the RowExpander element.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojExpand": {
          "description": "Triggered when a expand is performed on the RowExpander",
          "help": "expand",
          "detail": {
            "rowKey": {
              "description": "the key of the expanded row",
              "type": "any"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered when a collapse is performed on the RowExpander",
          "help": "collapse",
          "detail": {
            "rowKey": {
              "description": "the key of the collapsed row",
              "type": "any"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-select-many": {
      "name": "oj-select-many",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Multi Select",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojselectcombobox"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction or default text alignment. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "A select many is a dropdown list that supports multiple selections and search filtering.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojSelectMany.html",
      "properties": {
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "minimumResultsForSearch": {
          "description": "The threshold for showing the search box in the dropdown.",
          "type": "number",
          "displayName": "Minimum Results For Search",
          "value": 15,
          "minimum": 0,
          "help": "minimumResultsForSearch"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "optionRenderer"
        },
        "options": {
          "description": "The option items for the Select.",
          "type": "Array<Object>|object|null",
          "displayName": "Options",
          "value": null,
          "help": "options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "optionsKeys",
          "properties": {
            "childKeys": {
              "description": "The object for the child keys. It is ignored when using a TreeDataProvider.",
              "type": "object",
              "displayName": "Child Keys",
              "value": null,
              "help": "optionsKeys.childKeys",
              "properties": {
                "label": {
                  "description": "The key name for the label.",
                  "type": "string"
                },
                "value": {
                  "description": "The key name for the value.",
                  "type": "string"
                },
                "children": {
                  "description": "The key name for the children.",
                  "type": "string"
                },
                "childKeys": {
                  "description": "The object for the child keys.",
                  "type": "object"
                }
              }
            },
            "children": {
              "description": "The key name for the children. It is ignored when using a TreeDataProvider.",
              "type": "string",
              "displayName": "Children",
              "value": null,
              "help": "optionsKeys.children"
            },
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "optionsKeys.value"
            }
          }
        },
        "pickerAttributes": {
          "description": "The style attributes for the drop down.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "pickerAttributes",
          "properties": {
            "style": {
              "description": "The css style to append to the picker.",
              "type": "string"
            },
            "class": {
              "description": "The css class to append to the picker.",
              "type": "string"
            }
          }
        },
        "placeholder": {
          "description": "A short hint that can be displayed before user selects a value.",
          "type": "string|null",
          "displayName": "Placeholder",
          "value": null,
          "help": "placeholder"
        },
        "readonly": {
          "description": "Specifies whether a value is readonly",
          "type": "boolean",
          "displayName": "Read Only",
          "value": false,
          "help": "readOnly"
        },
        "renderMode": {
          "description": "Specifies whether to render select in JET or as a HTML Select tag.",
          "type": "string",
          "displayName": "Render Mode",
          "help": "renderMode",
          "enumValues": [
            "jet",
            "native"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Render the select in jet mode.",
              "displayName": "Jet"
            },
            "native": {
              "description": "Render the select in native mode.",
              "displayName": "Native"
            }
          }
        },
        "required": {
          "description": "Specifies whether a value is required.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "filterFurther": {
              "description": "Text at the top of drop down when not all results are fetched and users need to filter further.",
              "type": "string",
              "help": "translations.filterFurther"
            },
            "moreMatchesFound": {
              "description": "Text for the drop down when more than one options are found.",
              "type": "string",
              "help": "translations.moreMatchesFound"
            },
            "noMatchesFound": {
              "description": "Text for the drop down when no options are found.",
              "type": "string",
              "help": "translations.noMatchesFound"
            },
            "oneMatchesFound": {
              "description": "Text for the drop down when one option is found.",
              "type": "string",
              "help": "translations.oneMatchesFound"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            },
            "searchField": {
              "description": "Tooltip text for the search box",
              "type": "string",
              "help": "translations.searchField"
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The value of the element.",
          "type": "Array<any>|null",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "help": "value"
        },
        "valueOptions": {
          "description": "The current values of the element and their associated display labels.",
          "type": "null|Array<Object>",
          "displayName": "Value Options",
          "value": null,
          "writeback": true,
          "help": "valueOptions",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "value": {
                  "description": "a current value of JET Select",
                  "type": "any"
                },
                "label": {
                  "description": "display label of value above. If missing, String(value) is used.",
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the visual state of the select.",
          "help": "refresh",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-select-many element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-select-one": {
      "name": "oj-select-one",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Single Select",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojselectcombobox"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction or default text alignment. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "A select one is a dropdown list that supports single selection and search filtering.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojSelectOne.html",
      "properties": {
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "help": "labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "minimumResultsForSearch": {
          "description": "The threshold for showing the search box in the dropdown.",
          "type": "number",
          "displayName": "Minimum Results For Search",
          "value": 15,
          "minimum": 0,
          "help": "minimumResultsForSearch"
        },
        "optionRenderer": {
          "description": "The renderer function that renders the content of each option.",
          "type": "null|function",
          "displayName": "Option Renderer",
          "value": null,
          "help": "optionRenderer"
        },
        "options": {
          "description": "The option items for the Select.",
          "type": "Array<Object>|object|null",
          "displayName": "Options",
          "value": null,
          "help": "options"
        },
        "optionsKeys": {
          "description": "Specify the key names to use in the options array. Depending on options-keys means that the signature of the data does not match what is supported by the options attribute.",
          "type": "object",
          "displayName": "Options Keys",
          "value": null,
          "help": "optionsKeys",
          "properties": {
            "childKeys": {
              "description": "The object for the child keys. It is ignored when using a TreeDataProvider.",
              "type": "object",
              "displayName": "Child Keys",
              "value": null,
              "help": "optionsKeys.childKeys",
              "properties": {
                "label": {
                  "description": "The key name for the label.",
                  "type": "string"
                },
                "value": {
                  "description": "The key name for the value.",
                  "type": "string"
                },
                "children": {
                  "description": "The key name for the children.",
                  "type": "string"
                },
                "childKeys": {
                  "description": "The object for the child keys.",
                  "type": "object"
                }
              }
            },
            "children": {
              "description": "The key name for the children. It is ignored when using a TreeDataProvider.",
              "type": "string",
              "displayName": "Children",
              "value": null,
              "help": "optionsKeys.children"
            },
            "label": {
              "description": "The key name for the label.",
              "type": "string",
              "displayName": "Label",
              "value": null,
              "help": "optionsKeys.label"
            },
            "value": {
              "description": "The key name for the value.",
              "type": "string",
              "displayName": "Value",
              "value": null,
              "help": "optionsKeys.value"
            }
          }
        },
        "pickerAttributes": {
          "description": "The style attributes for the drop down.",
          "type": "object",
          "displayName": "Picker Attributes",
          "value": null,
          "help": "pickerAttributes",
          "properties": {
            "style": {
              "description": "The css style to append to the picker.",
              "type": "string"
            },
            "class": {
              "description": "The css class to append to the picker.",
              "type": "string"
            }
          }
        },
        "placeholder": {
          "description": "A short hint that can be displayed before user selects a value.",
          "type": "string|null",
          "displayName": "Placeholder",
          "value": null,
          "help": "placeholder"
        },
        "readonly": {
          "description": "Specifies whether a value is readonly",
          "type": "boolean",
          "displayName": "Read Only",
          "value": false,
          "help": "readOnly"
        },
        "renderMode": {
          "description": "Specifies whether to render select in JET or as a HTML Select tag.",
          "type": "string",
          "displayName": "Render Mode",
          "help": "renderMode",
          "enumValues": [
            "jet",
            "native"
          ],
          "propertyEditorValues": {
            "jet": {
              "description": "Render the select in jet mode.",
              "displayName": "Jet"
            },
            "native": {
              "description": "Render the select in native mode.",
              "displayName": "Native"
            }
          }
        },
        "required": {
          "description": "Specifies whether a value is required.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "filterFurther": {
              "description": "Text at the top of drop down when not all results are fetched and users need to filter further.",
              "type": "string",
              "help": "translations.filterFurther"
            },
            "moreMatchesFound": {
              "description": "Text for the drop down when more than one options are found.",
              "type": "string",
              "help": "translations.moreMatchesFound"
            },
            "noMatchesFound": {
              "description": "Text for the drop down when no options are found.",
              "type": "string",
              "help": "translations.noMatchesFound"
            },
            "oneMatchesFound": {
              "description": "Text for the drop down when one option is found.",
              "type": "string",
              "help": "translations.oneMatchesFound"
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            },
            "searchField": {
              "description": "Tooltip text for the search box",
              "type": "string",
              "help": "translations.searchField"
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The value of the element.",
          "type": "any",
          "displayName": "Value",
          "writeback": true,
          "help": "value"
        },
        "valueOption": {
          "description": "The current value of the element and its associated display label.",
          "type": "null|object",
          "displayName": "Value Option",
          "value": null,
          "writeback": true,
          "help": "valueOption",
          "properties": {
            "value": {
              "description": "current value of JET Select",
              "type": "any"
            },
            "label": {
              "description": "display label of value above. If missing, String(value) is used.",
              "type": "string"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the visual state of the select.",
          "help": "refresh",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all validators registered on the component. If there are no validation errors, then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "": {
          "description": "The oj-select-one element accepts oj-option elements as children.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-slider": {
      "name": "oj-slider",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Slider",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojslider"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-focus-highlight"
          ],
          "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control. The \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load. The application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are: \"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value. \"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism. \"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result. To change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
        },
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        }
      ],
      "description": "A slider allows a user to set a value by moving an indicator.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojSlider.html",
      "properties": {
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "max": {
          "description": "The maximum value of the slider. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Max",
          "value": null,
          "help": "max"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "min": {
          "description": "The minimum value of the slider. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Min",
          "value": null,
          "help": "min"
        },
        "orientation": {
          "description": "Specifies the orientation of the slider.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "description": "Orient the slider horizontally.",
              "displayName": "Horizontal"
            },
            "vertical": {
              "description": "Orient the slider vertically.",
              "displayName": "Vertical"
            }
          }
        },
        "step": {
          "description": "Specifies the amount to increase or decrease the value when moving in step increments. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Step",
          "value": 1,
          "help": "step"
        },
        "transientValue": {
          "description": "Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Transient Value",
          "writeback": true,
          "readOnly": true,
          "help": "transientValue"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "invalidStep": {
              "description": "Invalid step value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.invalidStep"
            },
            "maxMin": {
              "description": "Max is greater than min. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.maxMin"
            },
            "noValue": {
              "description": "Missing value exception. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.noValue"
            },
            "optionNum": {
              "description": "The option is not a number. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.optionNum"
            },
            "valueRange": {
              "description": "Value outside min to max range. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.valueRange"
            }
          }
        },
        "type": {
          "description": "The slider type specifies how the slider value is represented.",
          "type": "string",
          "displayName": "Type",
          "value": "fromMin",
          "help": "type",
          "enumValues": [
            "fromMax",
            "fromMin",
            "single"
          ],
          "propertyEditorValues": {
            "fromMax": {
              "description": "A single-thumb slider where the value bar goes from the slider thumb to the the slider max.",
              "displayName": "From Max"
            },
            "fromMin": {
              "description": "A single-thumb slider where the value bar goes from the slider min to the the slider thumb.",
              "displayName": "From Min"
            },
            "single": {
              "description": "A single-thumb slider where the value bar has no additional styling.",
              "displayName": "Single"
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The numerical value of the slider.",
          "type": "number",
          "displayName": "Value",
          "value": 0,
          "writeback": true,
          "help": "value"
        }
      },
      "methods": {
        "refresh": {
          "description": "Called when the DOM underneath the component changes, requiring a re-render of the component.",
          "help": "refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-spark-chart": {
      "name": "oj-spark-chart",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Spark Chart",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart"
        }
      },
      "description": "A spark chart displays information graphically, typically highlighting the trend of a data set in a compact form factor.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojSparkChart.html",
      "properties": {
        "animationDuration": {
          "description": "The duration of the animations in milliseconds.",
          "type": "number",
          "displayName": "Animation Duration",
          "units": "milliseconds",
          "help": "animationDuration"
        },
        "animationOnDataChange": {
          "description": "Defines the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Defines the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "areaColor": {
          "description": "The color of the area. Only applies if type is \"area\" or \"lineWithArea\".",
          "type": "string",
          "displayName": "Area Color",
          "value": "",
          "format": "color",
          "help": "areaColor"
        },
        "areaSvgClassName": {
          "description": "The CSS style class to apply if type is \"area\" or \"lineWithArea\".",
          "type": "string",
          "displayName": "Area Svg Class Name",
          "value": "",
          "help": "areaSvgClassName"
        },
        "areaSvgStyle": {
          "description": "The inline style to apply if type is \"area\" or \"lineWithArea\".",
          "type": "object",
          "displayName": "Area Svg Style",
          "value": {},
          "help": "areaSvgStyle"
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the itemTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "barGapRatio": {
          "description": "Specifies the width of the bar gap as a ratio of the item width. The valid value is a number from 0 to 1.",
          "type": "number",
          "displayName": "Bar Gap Ratio",
          "value": 0.25,
          "help": "barGapRatio"
        },
        "baselineScaling": {
          "description": "Defines whether the axis baseline starts at the minimum value of the data or at zero.",
          "type": "string",
          "displayName": "Baseline Scaling",
          "value": "min",
          "help": "baselineScaling",
          "enumValues": [
            "min",
            "zero"
          ],
          "propertyEditorValues": {
            "min": {
              "displayName": "Min"
            },
            "zero": {
              "displayName": "Zero"
            }
          }
        },
        "color": {
          "description": "The color of the data items.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "color"
        },
        "data": {
          "description": "Specifies the data for the spark chart. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "firstColor": {
          "description": "The color of the first data item.",
          "type": "string",
          "displayName": "First Color",
          "value": "",
          "format": "color",
          "help": "firstColor"
        },
        "highColor": {
          "description": "The color of the data item with the greatest value.",
          "type": "string",
          "displayName": "High Color",
          "value": "",
          "format": "color",
          "help": "highColor"
        },
        "items": {
          "description": "An array of objects that define the data for the spark chart. See the Help documentation for more information.",
          "type": "Array<Object>|Array<number>|Promise|null",
          "displayName": "Items",
          "value": null,
          "help": "items",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The default border color for the data items.",
                  "type": "string"
                },
                "color": {
                  "description": "The color of the bar or marker for the data item. This override can be used to highlight important values or thresholds.",
                  "type": "string"
                },
                "date": {
                  "description": "The date for the data item. The date should only be specified if the interval between data items is irregular.",
                  "type": "Date"
                },
                "high": {
                  "description": "The high value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart.",
                  "type": "number"
                },
                "low": {
                  "description": "The low value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart.",
                  "type": "number"
                },
                "markerDisplayed": {
                  "description": "Defines whether a marker should be displayed for the data item. Only applies to line and area spark charts.",
                  "type": "string",
                  "value": "off",
                  "enumValues": [
                    "off",
                    "on"
                  ]
                },
                "markerShape": {
                  "description": "The shape of the data markers. Can take the name of a built-in shape or the svg path commands for a custom shape. Only applies to line and area spark charts.",
                  "type": "string",
                  "value": "auto",
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "circle": {
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "displayName": "Diamond"
                    },
                    "human": {
                      "displayName": "Human"
                    },
                    "plus": {
                      "displayName": "Plus"
                    },
                    "square": {
                      "displayName": "Square"
                    },
                    "star": {
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "markerSize": {
                  "description": "The size of the data markers in pixels. Only applies to line and area spark charts.",
                  "type": "number"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the data item. The style class and inline style will override any other styling specified through the properties. For tooltips and hover interactivity, it's recommended to also pass a representative color to the item color attribute.",
                  "type": "object"
                },
                "value": {
                  "description": "The value of the data item.",
                  "type": "number"
                }
              }
            }
          }
        },
        "lastColor": {
          "description": "The color of the last data item.",
          "type": "string",
          "displayName": "Last Color",
          "value": "",
          "format": "color",
          "help": "lastColor"
        },
        "lineStyle": {
          "description": "The line style of the data line. Only applies to line spark charts.",
          "type": "string",
          "displayName": "Line Style",
          "value": "solid",
          "help": "lineStyle",
          "enumValues": [
            "dashed",
            "dotted",
            "solid"
          ],
          "propertyEditorValues": {
            "dashed": {
              "displayName": "Dashed"
            },
            "dotted": {
              "displayName": "Dotted"
            },
            "solid": {
              "displayName": "Solid"
            }
          }
        },
        "lineType": {
          "description": "The line type of the data line or area. Only applies to line and area spark charts.",
          "type": "string",
          "displayName": "Line Type",
          "value": "straight",
          "help": "lineType",
          "enumValues": [
            "centeredSegmented",
            "centeredStepped",
            "curved",
            "none",
            "segmented",
            "stepped",
            "straight"
          ],
          "propertyEditorValues": {
            "centeredSegmented": {
              "displayName": "Centered Segmented"
            },
            "centeredStepped": {
              "displayName": "Centered Stepped"
            },
            "curved": {
              "displayName": "Curved"
            },
            "none": {
              "displayName": "None"
            },
            "segmented": {
              "displayName": "Segmented"
            },
            "stepped": {
              "displayName": "Stepped"
            },
            "straight": {
              "displayName": "Straight"
            }
          }
        },
        "lineWidth": {
          "description": "The width of the data line in pixels. Only applies to line spark charts.",
          "type": "number",
          "displayName": "Line Width",
          "value": 1,
          "units": "pixels",
          "help": "lineWidth"
        },
        "lowColor": {
          "description": "The color of the data item with the lowest value.",
          "type": "string",
          "displayName": "Low Color",
          "value": "",
          "format": "color",
          "help": "lowColor"
        },
        "markerShape": {
          "description": "The shape of the data markers. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Shape",
          "value": "auto",
          "help": "markerShape",
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "plus": {
              "displayName": "Plus"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSize": {
          "description": "The size of the data markers in pixels. Only applies to line and area spark charts.",
          "type": "number",
          "displayName": "Marker Size",
          "value": 5,
          "units": "pixels",
          "help": "markerSize"
        },
        "referenceObjects": {
          "description": "An array of reference objects associated with the y axis of the spark chart.",
          "type": "Array<Object>",
          "displayName": "Reference Objects",
          "value": [],
          "help": "referenceObjects",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "color": {
                  "description": "The color of the reference object.",
                  "type": "string"
                },
                "high": {
                  "description": "The high value of a reference area.",
                  "type": "number"
                },
                "lineWidth": {
                  "description": "The width of a reference line.",
                  "type": "number"
                },
                "lineStyle": {
                  "description": "The line style of a reference line.",
                  "type": "string",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                },
                "location": {
                  "description": "The location of the reference object relative to the data items.",
                  "type": "string",
                  "value": "back",
                  "enumValues": [
                    "back",
                    "front"
                  ]
                },
                "low": {
                  "description": "The low value of a reference area.",
                  "type": "number"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the reference object. The style class and inline style will override any other styling specified through the properties.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the reference object. The style class and inline style will override any other styling specified through the properties.",
                  "type": "object"
                },
                "type": {
                  "description": "The type of reference object being shown.",
                  "type": "string",
                  "value": "line",
                  "enumValues": [
                    "area",
                    "line"
                  ]
                },
                "value": {
                  "description": "The value of a reference line.",
                  "type": "number"
                }
              }
            }
          }
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the data items. If type is \"lineWithArea\", this style will only be applied to the line if areaSvgClassName is also specified. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the data items. If type is \"lineWithArea\", this style will only be applied to the line if areaSvgStyle is also specified. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the spark chart. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            }
          }
        },
        "type": {
          "description": "The chart type.",
          "type": "string",
          "displayName": "Type",
          "value": "line",
          "help": "type",
          "enumValues": [
            "area",
            "bar",
            "line",
            "lineWithArea"
          ],
          "propertyEditorValues": {
            "area": {
              "displayName": "Area"
            },
            "bar": {
              "displayName": "Bar"
            },
            "line": {
              "displayName": "Line"
            },
            "lineWithArea": {
              "displayName": "Line With Area"
            }
          }
        },
        "visualEffects": {
          "description": "Defines whether visual effects such as overlays are applied to the spark chart.",
          "type": "string",
          "displayName": "Visual Effects",
          "value": "auto",
          "help": "visualEffects",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "getDataItem": {
          "description": "Returns information for automation testing verification of a specified data item.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getDataItem",
          "params": [
            {
              "name": "itemIndex",
              "description": "The item index",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the spark chart. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-spark-chart> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current item.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item.",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "color": {
              "description": "The color of the chart.",
              "type": "string"
            },
            "componentElement": {
              "description": "The spark chart element.",
              "type": "Element"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "oj-spark-chart-item": {
      "name": "oj-spark-chart-item",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Spark Chart Item",
      "type": "core",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojchart"
        }
      },
      "description": "ojSparkChartItem",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojSparkChartItem.html",
      "properties": {
        "borderColor": {
          "description": "The default border color for the data items.",
          "type": "string",
          "displayName": "Border Color",
          "value": "",
          "format": "color",
          "help": "borderColor"
        },
        "color": {
          "description": "The color of the bar or marker for the data item. This override can be used to highlight important values or thresholds.",
          "type": "string",
          "displayName": "Color",
          "value": "",
          "format": "color",
          "help": "color"
        },
        "date": {
          "description": "The date for the data item. The date should only be specified if the interval between data items is irregular.",
          "type": "string",
          "displayName": "Date",
          "value": "",
          "help": "date"
        },
        "high": {
          "description": "The high value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart.",
          "type": "number|null",
          "displayName": "High",
          "value": null,
          "help": "high"
        },
        "low": {
          "description": "The low value for range bar/area. Define 'low' and 'high' instead of 'value' to create a range bar/area spark chart.",
          "type": "number|null",
          "displayName": "Low",
          "value": null,
          "help": "low"
        },
        "markerDisplayed": {
          "description": "Defines whether a marker should be displayed for the data item. Only applies to line and area spark charts",
          "type": "string",
          "displayName": "Marker Displayed",
          "value": "off",
          "help": "markerDisplayed",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "markerShape": {
          "description": "The shape of the data markers. In addition to the built-in shapes, it may also take SVG path commands to specify a custom shape. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Marker Shape",
          "help": "markerShape",
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "circle": {
              "displayName": "Circle"
            },
            "diamond": {
              "displayName": "Diamond"
            },
            "human": {
              "displayName": "Human"
            },
            "plus": {
              "displayName": "Plus"
            },
            "square": {
              "displayName": "Square"
            },
            "star": {
              "displayName": "Star"
            },
            "triangleDown": {
              "displayName": "Triangle Down"
            },
            "triangleUp": {
              "displayName": "Triangle Up"
            }
          }
        },
        "markerSize": {
          "description": "The size of the data markers in pixels. Only applies to line and area spark charts.",
          "type": "number",
          "displayName": "Marker Size",
          "help": "markerSize"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the data item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the data item. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        },
        "value": {
          "description": "The value of the data item.",
          "type": "number|null",
          "displayName": "Value",
          "value": null,
          "help": "value"
        }
      }
    },
    "oj-status-meter-gauge": {
      "name": "oj-status-meter-gauge",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Status Meter Gauge",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojgauge"
        }
      },
      "description": "A status meter gauge displays information graphically, highlighting a specific metric value's progress in relation to its thresholds.  Horizontal, vertical, and circular formats are supported.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojStatusMeterGauge.html",
      "properties": {
        "angleExtent": {
          "description": "Specifies the angle extent of a gauge with circular orientation. Value should be provided in degrees.",
          "type": "number",
          "displayName": "Angle Extent",
          "value": 360,
          "maximum": 360,
          "minimum": 0,
          "units": "degrees",
          "help": "angleExtent"
        },
        "animationDuration": {
          "description": "The duration of the animations in milliseconds.",
          "type": "number",
          "displayName": "Animation Duration",
          "minimum": 0,
          "units": "milliseconds",
          "help": "animationDuration"
        },
        "animationOnDataChange": {
          "description": "Defines the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Defines the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "borderColor": {
          "description": "The border color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "borderColor"
        },
        "borderRadius": {
          "description": "Specifies the border radius of the indicator and plot area. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Border Radius",
          "value": "auto",
          "help": "borderRadius"
        },
        "center": {
          "description": "An object defining the center content of a status meter with circular orientation.",
          "type": "object",
          "displayName": "Center",
          "help": "center",
          "properties": {
            "renderer": {
              "description": "A function that returns custom center content. The function takes a context argument, provided by the gauge. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "center.renderer"
            }
          }
        },
        "color": {
          "description": "The color of the gauge. Only applies when thresholds are not defined. The default value varies based on theme.",
          "type": "string",
          "displayName": "Color",
          "format": "color",
          "help": "color"
        },
        "indicatorSize": {
          "description": "Defines the ratio of relative thickness of the indicator to the plot area.",
          "type": "number",
          "displayName": "Indicator Size",
          "value": 1,
          "minimum": 0,
          "help": "indicatorSize"
        },
        "innerRadius": {
          "description": "Specifies the inner radius of a gauge with circular orientation, defined by the distance from the center of the gauge to the innermost edge of the indicator and plot area. Valid values are a percent or ratio from 0 to 1.",
          "type": "number",
          "displayName": "Inner Radius",
          "value": 0.7,
          "maximum": 1,
          "minimum": 0,
          "help": "innerRadius"
        },
        "label": {
          "description": "An object defining the label.",
          "type": "object",
          "displayName": "Label",
          "help": "label",
          "properties": {
            "position": {
              "description": "Specifes the label position for horizontal and vertical gauges. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Position",
              "value": "auto",
              "help": "label.position",
              "enumValues": [
                "auto",
                "center",
                "start"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "center": {
                  "displayName": "Center"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "style": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object",
              "displayName": "Style",
              "value": {},
              "help": "label.style"
            },
            "text": {
              "description": "The text for the label.",
              "type": "string",
              "displayName": "Text",
              "value": "",
              "translatable": true,
              "help": "label.text"
            }
          }
        },
        "max": {
          "description": "The maximum value of the gauge.",
          "type": "number",
          "displayName": "Max",
          "value": 100,
          "help": "max"
        },
        "metricLabel": {
          "description": "An object defining the value label.",
          "type": "object",
          "displayName": "Metric Label",
          "help": "metricLabel",
          "properties": {
            "converter": {
              "description": "The converter used to format the labels. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "value": null,
              "help": "metricLabel.converter"
            },
            "position": {
              "description": "Specifes the metric label position for horizontal and vertical gauges. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Position",
              "value": "auto",
              "help": "metricLabel.position",
              "enumValues": [
                "auto",
                "center",
                "insideIndicatorEdge",
                "outsideIndicatorEdge",
                "outsidePlotArea",
                "withLabel"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "center": {
                  "displayName": "Center"
                },
                "insideIndicatorEdge": {
                  "displayName": "Inside Indicator Edge"
                },
                "outsideIndicatorEdge": {
                  "displayName": "Outside Indicator Edge"
                },
                "outsidePlotArea": {
                  "displayName": "Outside Plot Area"
                },
                "withLabel": {
                  "displayName": "With Label"
                }
              }
            },
            "rendered": {
              "description": "Defines if the label is rendered. If set to auto, the label is rendered if the orientation is circular.",
              "type": "string",
              "displayName": "Rendered",
              "value": "auto",
              "help": "metricLabel.rendered",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "scaling": {
              "description": "The scaling behavior of the labels. When using a converter, scaling should be set to none, as the formatted result may not be compatible with the scaling suffixes.",
              "type": "string",
              "displayName": "Scaling",
              "value": "auto",
              "help": "metricLabel.scaling",
              "enumValues": [
                "auto",
                "billion",
                "million",
                "none",
                "quadrillion",
                "thousand",
                "trillion"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "billion": {
                  "displayName": "Billion"
                },
                "million": {
                  "displayName": "Million"
                },
                "none": {
                  "displayName": "None"
                },
                "quadrillion": {
                  "displayName": "Quadrillion"
                },
                "thousand": {
                  "displayName": "Thousand"
                },
                "trillion": {
                  "displayName": "Trillion"
                }
              }
            },
            "style": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object",
              "displayName": "Style",
              "value": {},
              "help": "metricLabel.style"
            },
            "text": {
              "description": "The text for the label. If specified, text will overwrite the numeric value that is displayed by default. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Text",
              "value": "",
              "translatable": true,
              "help": "metricLabel.text"
            },
            "textType": {
              "description": "Defines whether the label is a number or a percentage of the total value.",
              "type": "string",
              "displayName": "Text Type",
              "value": "number",
              "help": "metricLabel.textType",
              "enumValues": [
                "number",
                "percent"
              ],
              "propertyEditorValues": {
                "number": {
                  "displayName": "Number"
                },
                "percent": {
                  "displayName": "Percent"
                }
              }
            }
          }
        },
        "min": {
          "description": "The minimum value of the gauge.",
          "type": "number",
          "displayName": "Min",
          "value": 0,
          "help": "min"
        },
        "orientation": {
          "description": "Defines the type of status meter to be rendered.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "orientation",
          "enumValues": [
            "circular",
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "circular": {
              "displayName": "Circular"
            },
            "horizontal": {
              "displayName": "Horizontal"
            },
            "vertical": {
              "displayName": "Vertical"
            }
          }
        },
        "plotArea": {
          "description": "Plot Area for Status Meter Guage",
          "type": "object",
          "displayName": "Plot Area",
          "help": "plotArea",
          "properties": {
            "borderColor": {
              "description": "The border color of the plot area.",
              "type": "string",
              "displayName": "Border Color",
              "format": "color",
              "help": "plotArea.borderColor"
            },
            "borderRadius": {
              "description": "Specifies the border radius of the plot area shape. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Border Radius",
              "value": "auto",
              "help": "plotArea.borderRadius"
            },
            "color": {
              "description": "The color of the plot area. Only applies when useThresholdFillColor is off.",
              "type": "string",
              "displayName": "Color",
              "format": "color",
              "help": "plotArea.color"
            },
            "rendered": {
              "description": "Specifies whether to render the plot area. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Rendered",
              "value": "auto",
              "help": "plotArea.rendered",
              "enumValues": [
                "auto",
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "svgClassName": {
              "description": "The CSS style class to apply to the plot area. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Svg Class Name",
              "value": "",
              "help": "plotArea.svgClassName"
            },
            "svgStyle": {
              "description": "The inline style to apply to the plot area. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "plotArea.svgStyle"
            }
          }
        },
        "readonly": {
          "description": "Defines whether the value of the gauge can be changed by the end user.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "referenceLines": {
          "description": "An array of objects specifying the reference lines for the gauge.",
          "type": "Array<Object>",
          "displayName": "Reference Lines",
          "value": [],
          "help": "referenceLines",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "color": {
                  "description": "The color of the reference line.",
                  "type": "string"
                },
                "value": {
                  "description": "The value of the reference line.",
                  "type": "number"
                },
                "lineWidth": {
                  "description": "The width of the reference line.",
                  "type": "number",
                  "value": 2
                },
                "lineStyle": {
                  "description": "The line style of the reference line.",
                  "type": "string",
                  "value": "solid",
                  "enumValues": [
                    "dashed",
                    "dotted",
                    "solid"
                  ]
                }
              }
            }
          }
        },
        "startAngle": {
          "description": "Specifies the start angle of a gauge with circular orientation. Value should be provided in degrees.",
          "type": "number",
          "displayName": "Start Angle",
          "value": 90,
          "maximum": 360,
          "minimum": 0,
          "units": "degrees",
          "help": "startAngle"
        },
        "step": {
          "description": "Specifies the increment by which values can be changed by the end user. See the Help documentation for more information.",
          "type": "number|null",
          "displayName": "Step",
          "exclusiveMinimum": "0",
          "help": "step"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the gauge indicator. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the gauge indicator. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        },
        "thresholdDisplay": {
          "description": "Controls whether the current threshold is displayed on the indicator, in the plotArea, or if all the thresholds are displayed in the plot area.",
          "type": "string",
          "displayName": "Threshold Display",
          "value": "onIndicator",
          "help": "thresholdDisplay",
          "enumValues": [
            "all",
            "currentOnly",
            "onIndicator"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "currentOnly": {
              "displayName": "Current Only"
            },
            "onIndicator": {
              "displayName": "On Indicator"
            }
          }
        },
        "thresholds": {
          "description": "An array of objects specifying the gauge thresholds.",
          "type": "Array<Object>",
          "displayName": "Thresholds",
          "value": [],
          "help": "thresholds",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The border color of the threshold.",
                  "type": "string"
                },
                "color": {
                  "description": "The color of the threshold.",
                  "type": "string"
                },
                "max": {
                  "description": "The upper bound of the threshold. This value is ignored for the final threshold, which uses the maximum value of the gauge.",
                  "type": "number"
                },
                "shortDesc": {
                  "description": "Specific description for the threshold and overwrites the shortDesc specified on gauge. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip for a gauge. The function takes a context argument, provided by the gauge. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "transientValue": {
          "description": "Read-only property used for retrieving the transient value from the component. See the Help documentation for more information.",
          "type": "number|null",
          "displayName": "Transient Value",
          "writeback": true,
          "readOnly": true,
          "help": "transientValue"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            }
          }
        },
        "value": {
          "description": "The metric value.",
          "type": "number|null",
          "displayName": "Value",
          "writeback": true,
          "help": "value"
        },
        "visualEffects": {
          "description": "Defines whether visual effects such as overlays are applied to the gauge.",
          "type": "string",
          "displayName": "Visual Effects",
          "value": "auto",
          "help": "visualEffects",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "getMetricLabel": {
          "description": "Returns the gauge's formatted metric label.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getMetricLabel",
          "return": "string"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "centerTemplate": {
          "description": "The centerTemplate slot is used to specify custom center content for a circular status meter gauge. This slot takes precedence over the center.renderer property if specified. See the Help documentation for more information.",
          "help": "centerTemplate",
          "data": {
            "componentElement": {
              "description": "The status meter gauge HTML element.",
              "type": "Element"
            },
            "innerBounds": {
              "description": "Object containing (x, y, width, height) of the rectangle inscribed in the center area. The inner bounds are useful for inserting content that is guaranteed to fit within the center area. If the angleExtent isn't 360 then we will provide the clipped square.",
              "type": "oj.ojStatusMeterGauge.Bounds",
              "properties": {
                "x": {
                  "description": "The x position of the bounding rectangle.",
                  "type": "number"
                },
                "y": {
                  "description": "The y position of the bounding rectangle.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the bounding rectangle.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the bounding rectangle.",
                  "type": "number"
                }
              }
            },
            "metricLabel": {
              "description": "The computed metric label.",
              "type": "string"
            },
            "outerBounds": {
              "description": "Object containing (x, y, width, height) of the rectangle circumscribing the center area. The outer bounds are useful for creating background for the entire center area when used with a CSS border-radius. If the angleExtent isn't 360 then we will provide the clipped square.",
              "type": "oj.ojStatusMeterGauge.Bounds",
              "properties": {
                "x": {
                  "description": "The x position of the bounding rectangle.",
                  "type": "number"
                },
                "y": {
                  "description": "The y position of the bounding rectangle.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the bounding rectangle.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the bounding rectangle.",
                  "type": "number"
                }
              }
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "color": {
              "description": "The indicator color of the gauge.",
              "type": "string"
            },
            "componentElement": {
              "description": "The status meter gauge HTML element.",
              "type": "Element"
            },
            "label": {
              "description": "The computed metric label.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "oj-sunburst": {
      "name": "oj-sunburst",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Sunburst",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojsunburst"
        }
      },
      "description": "A sunburst is an interactive data visualization in which hierarchical data is represented in concentric rings.  Each ring segment is proportionally sized relative to the other segments at a given level.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojSunburst.html",
      "properties": {
        "animationDuration": {
          "description": "Specifies the animation duration in milliseconds. For data change animations with multiple stages, the value specifies the duration of each stage.",
          "type": "number",
          "displayName": "Animation Duration",
          "units": "milliseconds",
          "help": "animationDuration"
        },
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationUpdateColor": {
          "description": "Specifies the color displayed during a data change animation when a node is updated.",
          "type": "string",
          "displayName": "Animation Update Color",
          "value": "",
          "format": "color",
          "help": "animationUpdateColor"
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the nodeTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "colorLabel": {
          "description": "Specifies the label displayed in the legend describing the color metric of the sunburst.",
          "type": "string",
          "displayName": "Color Label",
          "value": "",
          "help": "colorLabel"
        },
        "data": {
          "description": "Specifies the DataProvider for the sunburst. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "displayLevels": {
          "description": "The number of levels of nodes to display. By default all nodes are displayed.",
          "type": "number",
          "displayName": "Display Levels",
          "value": 1.7976931348623157e+308,
          "help": "displayLevels"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled. Drillable nodes will show a pointer cursor on hover and fire ojBeforeDrill and ojDrill events on click (double click if selection is enabled). See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "off",
          "help": "drilling",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set containing the ids of sunburst nodes that should be expanded on initial render. See the Help documentation for more information.",
          "type": "KeySet",
          "displayName": "Expanded",
          "value": "new AllKeySetImpl()",
          "writeback": true,
          "help": "expanded"
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Nodes with any category matching an item in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Nodes matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over the nodes.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "hoverBehaviorDelay": {
          "description": "Specifies initial hover delay in milliseconds for highlighting nodes.",
          "type": "number",
          "displayName": "Hover Behavior Delay",
          "value": 200,
          "units": "milliseconds",
          "help": "hoverBehaviorDelay"
        },
        "nodeDefaults": {
          "description": "An object defining default properties for the nodes. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Node Defaults",
          "help": "nodeDefaults",
          "properties": {
            "borderColor": {
              "description": "The default border color of the nodes.",
              "type": "string",
              "displayName": "Border Color",
              "format": "color",
              "help": "nodeDefaults.borderColor"
            },
            "borderWidth": {
              "description": "The default border width of the nodes.",
              "type": "number",
              "displayName": "Border Width",
              "value": 1,
              "units": "pixels",
              "help": "nodeDefaults.borderWidth"
            },
            "hoverColor": {
              "description": "The color of the node hover feedback.",
              "type": "string",
              "displayName": "Hover Color",
              "format": "color",
              "help": "nodeDefaults.hoverColor"
            },
            "labelDisplay": {
              "description": "The label display behavior for the nodes. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Label Display",
              "value": "auto",
              "help": "nodeDefaults.labelDisplay",
              "enumValues": [
                "auto",
                "horizontal",
                "off",
                "rotated"
              ],
              "propertyEditorValues": {
                "auto": {
                  "displayName": "Auto"
                },
                "horizontal": {
                  "displayName": "Horizontal"
                },
                "off": {
                  "displayName": "Off"
                },
                "rotated": {
                  "displayName": "Rotated"
                }
              }
            },
            "labelHalign": {
              "description": "The horizontal alignment for labels displayed within the node. Only applies to rotated text.",
              "type": "string",
              "displayName": "Label Halign",
              "value": "center",
              "help": "nodeDefaults.labelHalign",
              "enumValues": [
                "center",
                "inner",
                "outer"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "inner": {
                  "displayName": "Inner"
                },
                "outer": {
                  "displayName": "Outer"
                }
              }
            },
            "labelMinLength": {
              "description": "The minimum number of visible characters needed to render a truncated label. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Label Min Length",
              "value": 1,
              "help": "nodeDefaults.labelMinLength"
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the label.",
              "type": "object",
              "displayName": "Label Style",
              "help": "nodeDefaults.labelStyle"
            },
            "selectedInnerColor": {
              "description": "The inner color of the node selection feedback.",
              "type": "string",
              "displayName": "Selected Inner Color",
              "format": "color",
              "help": "nodeDefaults.selectedInnerColor"
            },
            "selectedOuterColor": {
              "description": "The outer color of the node selection feedback.",
              "type": "string",
              "displayName": "Selected Outer Color",
              "format": "color",
              "help": "nodeDefaults.selectedOuterColor"
            },
            "showDisclosure": {
              "description": "Specifies whether to display the expand/collapse button on hover.",
              "type": "string",
              "displayName": "Show Disclosure",
              "value": "off",
              "help": "nodeDefaults.showDisclosure",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "nodes": {
          "description": "An array of objects defining the data for the nodes. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Nodes",
          "value": null,
          "help": "nodes",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The border color of the node.",
                  "type": "string"
                },
                "borderWidth": {
                  "description": "The border width of the node.",
                  "type": "number"
                },
                "categories": {
                  "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend and other visualization elements. The categories array of each node is required to be a superset of the categories array of its parent node. If not specified, the ids of the node and its ancestors will be used.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The fill color of the node.",
                  "type": "string"
                },
                "drilling": {
                  "description": "Specifies whether drilling is enabled for the node. Drillable nodes will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all nodes at once, use the drilling attribute in the top level.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "id": {
                  "description": "The id of the node. For the DataProvider case, the key for the node will be used as the id.",
                  "type": "any"
                },
                "label": {
                  "description": "The label for this node.",
                  "type": "string"
                },
                "labelDisplay": {
                  "description": "The label display behavior for the nodes. More labels are generally displayed when using rotation, with the trade off of readability. When auto is used, rotated or horizontal labels will be used based on the client browser and platform.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "horizontal",
                    "off",
                    "rotated"
                  ]
                },
                "labelHalign": {
                  "description": "The horizontal alignment for labels displayed within the node. Only applies to rotated text.",
                  "type": "string",
                  "value": "center",
                  "enumValues": [
                    "center",
                    "inner",
                    "outer"
                  ]
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the label.",
                  "type": "object"
                },
                "nodes": {
                  "description": "An array of objects with properties for the child nodes.",
                  "type": "Array<Object>"
                },
                "pattern": {
                  "description": "The pattern used to fill the node.",
                  "type": "string",
                  "value": "none",
                  "enumValues": [
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "none",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ]
                },
                "radius": {
                  "description": "The radius of the node relative to the other nodes.",
                  "type": "number"
                },
                "selectable": {
                  "description": "Specifies whether or not the node will be selectable.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "shortDesc": {
                  "description": "The description of this node. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string"
                },
                "showDisclosure": {
                  "description": "Specifies whether to display the expand/collapse button on hover for a specific node. If the button is clicked, the expanded attribute is updated with the new array of node ids.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute.",
                  "type": "object"
                },
                "value": {
                  "description": "The value of the node, which determines the relative size of the node.",
                  "type": "number"
                }
              }
            }
          }
        },
        "rootNode": {
          "description": "The id of the root node. When specified, only the root node and children of the root will be displayed.",
          "type": "any",
          "displayName": "Root Node",
          "value": "\"\"",
          "help": "rootNode"
        },
        "rootNodeContent": {
          "description": "An object defining custom root node content for the sunburst.",
          "type": "object",
          "displayName": "Root Node Content",
          "help": "rootNodeContent",
          "properties": {
            "renderer": {
              "description": "A function that returns custom root node content. The function takes a context argument, provided by the sunburst. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "rootNodeContent.renderer"
            }
          }
        },
        "rotation": {
          "description": "Specifies whether client side rotation is enabled.",
          "type": "string",
          "displayName": "Rotation",
          "value": "on",
          "help": "rotation",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "selection": {
          "description": "An array containing the ids of the initially selected nodes.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "multiple",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "displayName": "Multiple"
            },
            "none": {
              "displayName": "None"
            },
            "single": {
              "displayName": "Single"
            }
          }
        },
        "sizeLabel": {
          "description": "Specifies the label used in the legend describing the size metric of the sunburst.",
          "type": "string",
          "displayName": "Size Label",
          "value": "",
          "help": "sizeLabel"
        },
        "sorting": {
          "description": "Specifies whether the nodes are sorted by size. Nodes with the same parent are sorted in order of descending size.",
          "type": "string",
          "displayName": "Sorting",
          "value": "off",
          "help": "sorting",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "startAngle": {
          "description": "Specifies the starting angle of the sunburst. Valid values are numbers between 0 and 360.",
          "type": "number",
          "displayName": "Start Angle",
          "value": 90,
          "writeback": true,
          "maximum": 360,
          "minimum": 0,
          "units": "degrees",
          "help": "startAngle"
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the sunburst. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelColor": {
              "description": "Used for the color label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelColor"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "labelSize": {
              "description": "Used for the size label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSize"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            },
            "tooltipCollapse": {
              "description": "Used for the collapse tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipCollapse"
            },
            "tooltipExpand": {
              "description": "Used for the expand tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipExpand"
            }
          }
        }
      },
      "methods": {
        "getNode": {
          "description": "Returns information for automation testing verification of a specified node.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getNode",
          "params": [
            {
              "name": "subIdPath",
              "description": "The array of indices in the subId for the desired node",
              "type": "Array"
            }
          ],
          "return": "object|null"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojRotateInput": {
          "description": "Triggered during user rotation of the sunburst.",
          "help": "rotateInput",
          "detail": {
            "value": {
              "description": "the start angle of the sunburst, in degrees",
              "type": "number"
            }
          }
        },
        "ojBeforeDrill": {
          "description": "Triggered immediately before any node in the sunburst is drilled into.",
          "help": "beforeDrill",
          "detail": {
            "id": {
              "description": "the id of the drilled node",
              "type": "any"
            },
            "data": {
              "description": "the data object of the drilled node",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the drilled node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojDrill": {
          "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "drill",
          "detail": {
            "id": {
              "description": "the id of the drilled node",
              "type": "any"
            },
            "data": {
              "description": "the data object of the drilled node",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the drilled node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojBeforeExpand": {
          "description": "Triggered immediately before any node in the sunburst is expanded.",
          "help": "beforeExpand",
          "detail": {
            "id": {
              "description": "the id of the node to expand",
              "type": "any"
            },
            "data": {
              "description": "the data object of the node to expand",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the node to expand. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered when a node has been expanded.",
          "help": "expand",
          "detail": {
            "id": {
              "description": "the id of the expanded node",
              "type": "any"
            },
            "data": {
              "description": "the data object of the expanded node",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the expanded node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojBeforeCollapse": {
          "description": "Triggered immediately before any container node in the sunburst is collapsed.",
          "help": "beforeCollapse",
          "detail": {
            "id": {
              "description": "the id of the node to collapse",
              "type": "any"
            },
            "data": {
              "description": "the data object of the node to collapse",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the node to collapse. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered when a node has been collapsed.",
          "help": "collapse",
          "detail": {
            "id": {
              "description": "the id of the collapsed node",
              "type": "any"
            },
            "data": {
              "description": "the data object of the collapsed node",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the collapsed node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "nodeTemplate": {
          "description": "The nodeTemplate slot is used to specify the template for creating nodes of the sunburst. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "nodeTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-sunburst> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the node",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current node",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data objects of the outermost to innermost parents of the node",
              "type": "Array"
            },
            "parentKey": {
              "description": "The key of the parent node",
              "type": "any"
            }
          }
        },
        "rootNodeContentTemplate": {
          "description": "The rootNodeContentTemplate slot is used to specify custom root node content for a sunburst. See the Help documentation for more information.",
          "help": "rootNodeContentTemplate",
          "data": {
            "outerBounds": {
              "description": "Object containing information on the rectangle circumscribing the root node area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the rectangle circumscribing the root node area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the rectangle circumscribing the root node area.",
                  "type": "number"
                }
              }
            },
            "innerBounds": {
              "description": "Object containing information on the rectangle inscribed in the root node area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the rectangle inscribed in the root node area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the rectangle inscribed in the root node area.",
                  "type": "number"
                }
              }
            },
            "id": {
              "description": "The id of the root node.",
              "type": "any"
            },
            "data": {
              "description": "The data object of the root node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the root node. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "componentElement": {
              "description": "The sunburst element.",
              "type": "Element"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered node.",
              "type": "any"
            },
            "label": {
              "description": "The label of the hovered node.",
              "type": "string"
            },
            "value": {
              "description": "The value of the hovered node.",
              "type": "number"
            },
            "radius": {
              "description": "The radius of the hovered node.",
              "type": "number"
            },
            "color": {
              "description": "The color of the hovered node.",
              "type": "string"
            },
            "data": {
              "description": "The data object of the hovered node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the hovered node. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "componentElement": {
              "description": "The sunburst element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "oj-sunburst-node": {
      "name": "oj-sunburst-node",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Sunburst Node",
      "type": "core",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojsunburst"
        }
      },
      "description": "ojSunburstNode",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojSunburstNode.html",
      "properties": {
        "borderColor": {
          "description": "The border color of the node.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "borderColor"
        },
        "borderWidth": {
          "description": "The border width of the node.",
          "type": "number",
          "displayName": "Border Width",
          "units": "pixels",
          "help": "borderWidth"
        },
        "categories": {
          "description": "An optional array of category strings corresponding to this data item. See the Help documentation for more information.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "categories"
        },
        "color": {
          "description": "The fill color of the node.",
          "type": "string",
          "displayName": "Color",
          "value": "#000000",
          "format": "color",
          "help": "color"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled for the node. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "label": {
          "description": "The label for this node.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "label"
        },
        "labelDisplay": {
          "description": "The label display behavior for the nodes. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Label Display",
          "help": "labelDisplay",
          "enumValues": [
            "auto",
            "horizontal",
            "off",
            "rotated"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "horizontal": {
              "displayName": "Horizontal"
            },
            "off": {
              "displayName": "Off"
            },
            "rotated": {
              "displayName": "Rotated"
            }
          }
        },
        "labelHalign": {
          "description": "The horizontal alignment for labels displayed within the node. Only applies to rotated text.",
          "type": "string",
          "displayName": "Label Halign",
          "help": "labelHalign",
          "enumValues": [
            "center",
            "inner",
            "outer"
          ],
          "propertyEditorValues": {
            "center": {
              "displayName": "Center"
            },
            "inner": {
              "displayName": "Inner"
            },
            "outer": {
              "displayName": "Outer"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the label.",
          "type": "object",
          "displayName": "Label Style",
          "help": "labelStyle"
        },
        "pattern": {
          "description": "The pattern used to fill the node.",
          "type": "string",
          "displayName": "Pattern",
          "value": "none",
          "help": "pattern",
          "enumValues": [
            "largeChecker",
            "largeCrosshatch",
            "largeDiagonalLeft",
            "largeDiagonalRight",
            "largeDiamond",
            "largeTriangle",
            "none",
            "smallChecker",
            "smallCrosshatch",
            "smallDiagonalLeft",
            "smallDiagonalRight",
            "smallDiamond",
            "smallTriangle"
          ],
          "propertyEditorValues": {
            "largeChecker": {
              "displayName": "Large Checker"
            },
            "largeCrosshatch": {
              "displayName": "Large Crosshatch"
            },
            "largeDiagonalLeft": {
              "displayName": "Large Diagonal Left"
            },
            "largeDiagonalRight": {
              "displayName": "Large Diagonal Right"
            },
            "largeDiamond": {
              "displayName": "Large Diamond"
            },
            "largeTriangle": {
              "displayName": "Large Triangle"
            },
            "none": {
              "displayName": "None"
            },
            "smallChecker": {
              "displayName": "Small Checker"
            },
            "smallCrosshatch": {
              "displayName": "Small Crosshatch"
            },
            "smallDiagonalLeft": {
              "displayName": "Small Diagonal Left"
            },
            "smallDiagonalRight": {
              "displayName": "Small Diagonal Right"
            },
            "smallDiamond": {
              "displayName": "Small Diamond"
            },
            "smallTriangle": {
              "displayName": "Small Triangle"
            }
          }
        },
        "radius": {
          "description": "The radius of the node relative to the other nodes.",
          "type": "number",
          "displayName": "Radius",
          "help": "radius"
        },
        "selectable": {
          "description": "Specifies whether the node will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The description of this node. This is used for accessibility and also for customizing the tooltip text.",
          "type": "string",
          "displayName": "Short Desc",
          "value": "",
          "help": "shortDesc"
        },
        "showDisclosure": {
          "description": "Specifies whether to display the expand/collapse button on hover.",
          "type": "string",
          "displayName": "Show Disclosure",
          "value": "inherit",
          "help": "showDisclosure",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the node. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the node. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        },
        "value": {
          "description": "The value of the node, which determines the relative size of the node.",
          "type": "number",
          "displayName": "Value",
          "help": "value"
        }
      }
    },
    "oj-swipe-actions": {
      "name": "oj-swipe-actions",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Swipe Actions",
      "type": "core",
      "since": "5.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojswipeactions"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-swipeactions-container"
          ],
          "description": "Designed for use with item in oj-list-view that contains the oj-swipe-actions element, specifically this will remove the padding around the content of the item so that the swipe actions can take the full height. Is applied to the root of each item in oj-list-view containing the oj-swipe-actions element."
        },
        {
          "styleGroup": [
            "oj-swipeactions-neutral"
          ],
          "description": "Designed for use with an action item that shows more available actions that users can perform. Is applied to the \"oj-option\" element that represents the action item."
        },
        {
          "styleGroup": [
            "oj-swipeactions-attention"
          ],
          "description": "Designed for use with an action item that tags the associated item in oj-list-view. Is applied to the \"oj-option\" element that represents the action item."
        },
        {
          "styleGroup": [
            "oj-swipeactions-danger"
          ],
          "description": "Designed for use with an action item that performs an explicit action like deleting the associated item in oj-list-view. Is applied to the \"oj-option\" element that represents the action item."
        },
        {
          "styleGroup": [
            "oj-swipeactions-default"
          ],
          "description": "Designed for use with an action item that should get all the space when user swipes pass the threshold distance. This is usually the last item within the template. Is applied to the \"oj-option\" element that represents the default action item."
        }
      ],
      "description": "A swipe actions component adds swipe-to-reveal functionality to elements such as items in ListView.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojSwipeActions.html",
      "properties": {
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "ariaHideActionsDescription": {
              "description": "Label assigned to an anchor tag used for hidding start/end swipe actions using keyboard or accessibility agents such as VoiceOver.",
              "type": "string",
              "help": "translations.ariaHideActionsDescription"
            },
            "ariaShowEndActionsDescription": {
              "description": "Label assigned to an anchor tag used for showing end swipe actions using keyboard or accessibility agents such as VoiceOver.",
              "type": "string",
              "help": "translations.ariaShowEndActionsDescription"
            },
            "ariaShowStartActionsDescription": {
              "description": "Label assigned to an anchor tag used for showing start swipe actions using keyboard or accessibility agents such as VoiceOver.",
              "type": "string",
              "help": "translations.ariaShowStartActionsDescription"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Re-initialize the swipe actions.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAction": {
          "description": "Triggered when an action item is selected or when the default action is triggered.",
          "help": "action"
        }
      },
      "slots": {
        "": {
          "description": "When using SwipeActions within ListView, any content for the item in ListView should be added as child element in SwipeActions.",
          "displayName": "default",
          "help": "Default"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "end": {
          "description": "The end slot is used to specify the action bar options that appear when user swipes from end to start on its container. See the Help documentation for more information.",
          "help": "end"
        },
        "start": {
          "description": "The start slot is used to specify the action bar options that appear when user swipes from start to end on its container. See the Help documentation for more information.",
          "help": "start"
        }
      }
    },
    "oj-switch": {
      "name": "oj-switch",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Switch",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojswitch"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-switch"
          ],
          "description": "Top level switch class."
        },
        {
          "styleGroup": [
            "oj-focus-highlight"
          ],
          "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control. The \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load. The application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are: \"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value. \"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism. \"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result. To change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
        }
      ],
      "description": "A switch toggles between two mutually exclusive states — on and off.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojSwitch.html",
      "properties": {
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations"
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "value": {
          "description": "The boolean state of the switch component.",
          "type": "boolean",
          "displayName": "Value",
          "value": false,
          "writeback": true,
          "help": "value"
        }
      },
      "methods": {
        "refresh": {
          "description": "Called when the DOM underneath the component changes, requiring a re-render of the component.",
          "help": "refresh",
          "return": "void"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-switcher": {
      "name": "oj-switcher",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Switcher",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojswitcher"
        }
      },
      "description": "A switcher dynamically decides which child element should be made visible.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojSwitcher.html",
      "properties": {
        "value": {
          "description": "Specifies the value for this switcher.",
          "type": "string",
          "displayName": "Value",
          "value": "",
          "help": "value"
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a [property]Changed event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the visual state of the component.",
          "help": "refresh",
          "return": "void"
        }
      }
    },
    "oj-tab-bar": {
      "name": "oj-tab-bar",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Tab Bar",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojnavigationlist"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-tabbar-stack-icon-label"
          ],
          "description": "Displays horizontal Tab Bar with icon and label stacked. Applicable only when \"edge\" is \"top\"."
        },
        {
          "styleGroup": [
            "oj-tabbar-category-divider"
          ],
          "description": "Use this class to add horizontal divider line between two categories of items."
        },
        {
          "styleGroup": [
            "oj-tabbar-item-icon"
          ],
          "description": "Use this class to add icon to list item."
        },
        {
          "styleGroup": [
            "oj-tabbar-item-title"
          ],
          "description": "When arbitrary content is placed inside item's content area, it's title text can be marked using this style class. This helps component in identifying the Item's label."
        },
        {
          "styleGroup": [
            "oj-tabbar-item-text-wrap"
          ],
          "description": "Use this class to wrap item label text. Note: On IE11, this is not supported when \"overflow\" attribute is set to \"popup\"."
        },
        {
          "styleGroup": [
            "oj-tabbar-item-dividers"
          ],
          "description": "Use this class to show dividers between horizontal tab bar items."
        },
        {
          "styleGroup": [
            "oj-sm-condense"
          ],
          "description": "Use this class to condense horizontal tab bar items on small screens and larger."
        },
        {
          "styleGroup": [
            "oj-md-condense"
          ],
          "description": "Use this class to condense horizontal tab bar items on medium screens and larger."
        },
        {
          "styleGroup": [
            "oj-lg-condense"
          ],
          "description": "Use this class to condense horizontal tab bar items on large screens and larger."
        },
        {
          "styleGroup": [
            "oj-xl-condense"
          ],
          "description": "Use this class to condense horizontal tab bar items on extra large screens and larger."
        },
        {
          "styleGroup": [
            "oj-tabbar-nofollow-link"
          ],
          "description": "Use this class to prevent automatic navigation to the url specified on \"&lt;a \" tag's \"href\" attribute. In this case, navigation can be handled programmatically by using \"selectionChanged\" event. This is useful to execute some custom tasks before browser triggers navigation."
        },
        {
          "styleGroup": [
            "oj-removable"
          ],
          "description": "Use this class to make an item removable."
        },
        {
          "styleGroup": [
            "oj-tabbar-hide-remove-icon"
          ],
          "description": "Use this class to hide the remove icon. In this case, Item can be removed using context menu."
        },
        {
          "styleGroup": [
            "oj-focus-highlight"
          ],
          "description": "Under normal circumstances this class is applied automatically. It is documented here for the rare cases that an app developer needs per-instance control. The \"oj-focus-highlight\" class applies focus styling that may not be desirable when the focus results from pointer interaction (touch or mouse), but which is needed for accessibility when the focus occurs by a non-pointer mechanism, for example keyboard or initial page load. The application-level behavior for this component is controlled in the theme by the \"$focusHighlightPolicy\" SASS variable; however, note that this same variable controls the focus highlight policy of many components and patterns. The values for the variable are: \"nonPointer\": \"oj-focus-highlight\" is applied only when focus is not the result of pointer interaction. Most themes default to this value. \"all\": \"oj-focus-highlight\" is applied regardless of the focus mechanism. \"none\": \"oj-focus-highlight\" is never applied. This behavior is not accessible, and is intended for use when the application wishes to use its own event listener to precisely control when the class is applied (see below). The application must ensure the accessibility of the result. To change the behavior on a per-instance basis, the application can set the SASS variable as desired and then use event listeners to toggle this class as needed."
        }
      ],
      "description": "A tab bar allows navigation between different content sections.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTabBar.html",
      "properties": {
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "Specifies the alias for the current item when referenced inside the item template.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "currentItem": {
          "description": "Specifies the key of the item that should have keyboard focus. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Current Item",
          "value": null,
          "writeback": true,
          "help": "currentItem"
        },
        "data": {
          "description": "Specifies the data provider for the Tab Bar. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "display": {
          "description": "Specifies what needs to be displayed. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Display",
          "value": "all",
          "help": "display",
          "enumValues": [
            "all",
            "icons"
          ],
          "propertyEditorValues": {
            "all": {
              "description": "Display both the label and icons.",
              "displayName": "All"
            },
            "icons": {
              "description": "Display only the icons.",
              "displayName": "Icons"
            }
          }
        },
        "edge": {
          "description": "Specifies the edge position of the Tab Bar.",
          "type": "string",
          "displayName": "Edge",
          "value": "start",
          "help": "edge",
          "enumValues": [
            "bottom",
            "end",
            "start",
            "top"
          ],
          "propertyEditorValues": {
            "bottom": {
              "description": "This renders list items horizontally. Generally used when tab bar placed on bottom of content section.",
              "displayName": "Bottom"
            },
            "end": {
              "description": "This renders list items vertically. Generally used when tab bar placed on right/end of content section.",
              "displayName": "End"
            },
            "start": {
              "description": "This renders list items vertically. Generally used when tab bar placed on left/start of content section.",
              "displayName": "Start"
            },
            "top": {
              "description": "This renders list items horizontally. Generally used when tab bar placed on top of content section.",
              "displayName": "Top"
            }
          }
        },
        "item": {
          "description": "Customize the functionality of each tab on Tab Bar.",
          "type": "object",
          "displayName": "Item",
          "help": "item",
          "properties": {
            "renderer": {
              "description": "Specifies the renderer for the tab item. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null,
              "help": "item.renderer"
            },
            "selectable": {
              "description": "Specifies whether the tab can be selected. See the Help documentation for more information.",
              "type": "function|boolean",
              "displayName": "Selectable",
              "value": true,
              "help": "item.selectable"
            }
          }
        },
        "overflow": {
          "description": "Specifies overflow behaviour for the Tab Bar.",
          "type": "string",
          "displayName": "Overflow",
          "value": "hidden",
          "help": "overflow",
          "enumValues": [
            "hidden",
            "popup"
          ],
          "propertyEditorValues": {
            "hidden": {
              "description": "overflow is clipped, and the rest of the content will be invisible.",
              "displayName": "Hidden"
            },
            "popup": {
              "description": "popup menu will be shown with overflowed items. NOTE: Setting overflow to popup can trigger browser reflow, so only set it when it is actually required.",
              "displayName": "Popup"
            }
          }
        },
        "reorderable": {
          "description": "Specifies whether tabs can be reordered.",
          "type": "string",
          "displayName": "Reorderable",
          "value": "disabled",
          "help": "reorderable",
          "enumValues": [
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "disabled": {
              "description": "Disables reordering of items in tabbar.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Enables reordering of items in tabbar.",
              "displayName": "Enabled"
            }
          }
        },
        "selection": {
          "description": "Specifies the key of the selected item. See the Help documentation for more information.",
          "type": "any",
          "displayName": "Selection",
          "value": null,
          "writeback": true,
          "help": "selection"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "accessibleReorderAfterItem": {
              "description": "Provides properties to customize the screen reader text when the tentative drop target is after a certain item.",
              "type": "string",
              "help": "translations.accessibleReorderAfterItem"
            },
            "accessibleReorderBeforeItem": {
              "description": "Provides properties to customize the screen reader text when the tentative drop target is before a certain item.",
              "type": "string",
              "help": "translations.accessibleReorderBeforeItem"
            },
            "accessibleReorderTouchInstructionText": {
              "description": "Provides properties to customize the screen reader touch instructional text for reordering items.",
              "type": "string",
              "help": "translations.accessibleReorderTouchInstructionText"
            },
            "labelCut": {
              "description": "Provides properties to customize the context menu cut label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCut"
            },
            "labelPasteAfter": {
              "description": "Provides properties to customize the context menu paste after label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelPasteAfter"
            },
            "labelPasteBefore": {
              "description": "Provides properties to customize the context menu paste before label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelPasteBefore"
            },
            "labelRemove": {
              "description": "Provides properties to customize the context menu remove label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelRemove"
            },
            "msgFetchingData": {
              "description": "Provides properties to customize the message text used by Tab Bar when waiting for data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgFetchingData"
            },
            "msgNoData": {
              "description": "Provides properties to customize the message text used by Tab Bar when there are no items. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgNoData"
            },
            "overflowItemLabel": {
              "description": "Label for overflow menu button. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.overflowItemLabel"
            },
            "removeCueText": {
              "description": "Text cue for the removable tab, used as the aria-label for the close icon.",
              "type": "string",
              "help": "translations.removeCueText"
            },
            "selectedLabel": {
              "description": "Provides text to read to screen reader when an item is selected. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.selectedLabel"
            }
          }
        },
        "truncation": {
          "description": "Specifies whether truncation needs to be applied.",
          "type": "string",
          "displayName": "Truncation",
          "value": "none",
          "help": "truncation",
          "enumValues": [
            "none",
            "progressive"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "tabs always take up the space needed by the title texts.",
              "displayName": "None"
            },
            "progressive": {
              "description": "If not enough space is available to display all of the tabs, then the width of each tab title is restricted just enough to allow all tabs to fit. All tab titles that are truncated are displayed with ellipses. However the width of each tab title will not be truncated below $tabBarTruncatedLabelMinWidth.",
              "displayName": "Progressive"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the visual state of the Tab Bar.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Event handler for when the default animation of a particular action is about to start.",
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "the action that starts the animation. See animation section for a list of actions.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            },
            "endCallback": {
              "description": "if the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Event handler for when the default animation of a particular action has ended.",
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "the action that started the animation. See animation section for a list of actions.",
              "type": "string"
            },
            "element": {
              "description": "the target of animation.",
              "type": "Element"
            }
          }
        },
        "ojBeforeSelect": {
          "description": "Event handler for when before the selection is changed.",
          "cancelable": true,
          "help": "beforeSelect",
          "detail": {
            "key": {
              "description": "Selected list item Key.",
              "type": "any"
            },
            "item": {
              "description": "Selected list item.",
              "type": "Element"
            }
          }
        },
        "ojBeforeCurrentItem": {
          "description": "Event handler for when before the current item is changed.",
          "cancelable": true,
          "help": "beforeCurrentItem",
          "detail": {
            "previousKey": {
              "description": "the Key of the previous item",
              "type": "any"
            },
            "previousItem": {
              "description": "the previous item",
              "type": "Element"
            },
            "key": {
              "description": "the Key of the new current item",
              "type": "any"
            },
            "item": {
              "description": "the new current item",
              "type": "Element"
            }
          }
        },
        "ojBeforeDeselect": {
          "description": "Event handler for when before tab is deselected.",
          "cancelable": true,
          "help": "beforeDeselect",
          "detail": {
            "fromKey": {
              "description": "the Key of the tab item being navigated from",
              "type": "any"
            },
            "fromItem": {
              "description": "the tab item being navigated from",
              "type": "Element"
            },
            "toKey": {
              "description": "the Key of the tab item being navigated to",
              "type": "any"
            },
            "toItem": {
              "description": "the tab item being navigated to",
              "type": "Element"
            }
          }
        },
        "ojDeselect": {
          "description": "Event handler for when a tab is deselected.",
          "help": "deselect",
          "detail": {
            "fromKey": {
              "description": "the Key of the tab item being navigated from",
              "type": "any"
            },
            "fromItem": {
              "description": "the tab item being navigated from",
              "type": "Element"
            },
            "toKey": {
              "description": "the Key of the tab item being navigated to",
              "type": "any"
            },
            "toItem": {
              "description": "the tab item being navigated to",
              "type": "Element"
            }
          }
        },
        "ojBeforeRemove": {
          "description": "Event handler for when a tab is about to be removed.",
          "cancelable": true,
          "help": "beforeRemove",
          "detail": {
            "item": {
              "description": "Item being removed",
              "type": "Element"
            },
            "key": {
              "description": "Key of the item being removed",
              "type": "any"
            }
          }
        },
        "ojRemove": {
          "description": "Event handler for when a tab is removed.",
          "help": "remove",
          "detail": {
            "item": {
              "description": "Item removed",
              "type": "Element"
            },
            "key": {
              "description": "Key of the item removed",
              "type": "any"
            }
          }
        },
        "ojReorder": {
          "description": "Event handler for when a tab is reordered.",
          "help": "reorder",
          "detail": {
            "item": {
              "description": "Item to be moved",
              "type": "Element"
            },
            "position": {
              "description": "the drop position relative to the reference item. Possible values are \"before\" and \"after\".",
              "type": "'before'|'after'"
            },
            "reference": {
              "description": "the item where the moved items are drop on.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the list. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-navigation-list> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current item being rendered",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent item",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item being rendered",
              "type": "any"
            }
          }
        }
      }
    },
    "oj-table": {
      "name": "oj-table",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Table",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtable"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-table-data-cell-no-padding"
          ],
          "description": "Used to style a table cell so that it has no padding. An app developer would likely use this in the case of editable tables when an editable cell content does not need the default cell padding. The class is applied as follows: The class must be applied to the table cell."
        },
        {
          "styleGroup": [
            "oj-table-data-cell-padding"
          ],
          "description": "Used to style a table cell so that it has the default padding. An app developer would likely use this in the case of editable tables when an editable cell content needs to maintain default cell padding. The class is applied as follows: The class must be applied to the table cell."
        },
        {
          "styleGroup": [
            "oj-table-hide-vertical-scrollbar"
          ],
          "description": "Used to explicitly hide the vertical scrollbar when the table body is scrollable. The class is applied as follows: The class must be applied to the oj-table custom element."
        }
      ],
      "description": "A table displays data items in a tabular format with highly interactive features.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTable.html",
      "properties": {
        "accessibility": {
          "description": "Accessibility attributes.",
          "type": "object|null",
          "displayName": "Accessibility",
          "help": "accessibility",
          "properties": {
            "rowHeader": {
              "description": "Specifies the column id to be used as the row header by screen readers. See the Help documentation for more information.",
              "type": "string",
              "displayName": "Row Header",
              "help": "accessibility.rowHeader"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to the content of the cell template.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "columns": {
          "description": "An array of column definitions. See the Help documentation for more information.",
          "type": "Array<Object>|null",
          "displayName": "Columns",
          "value": null,
          "writeback": true,
          "help": "columns",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "className": {
                  "description": "The CSS class to apply to the column cells.",
                  "type": "string|null",
                  "displayName": "Class Name",
                  "value": null,
                  "help": "columns[].className"
                },
                "field": {
                  "description": "The data field that this column refers to.",
                  "type": "string|null",
                  "displayName": "Field",
                  "value": null,
                  "help": "columns[].field"
                },
                "footerClassName": {
                  "description": "The CSS class to apply to the footer cell.",
                  "type": "string|null",
                  "displayName": "Footer Class Name",
                  "value": null,
                  "help": "columns[].footerClassName"
                },
                "footerRenderer": {
                  "description": "A function that renders the content of the footer cell. The function takes a context argument, provided by the table. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Footer Renderer",
                  "value": null,
                  "help": "columns[].footerRenderer"
                },
                "footerStyle": {
                  "description": "The CSS styling to apply to the footer cell.",
                  "type": "string|null",
                  "displayName": "Footer Style",
                  "value": null,
                  "help": "columns[].footerStyle"
                },
                "footerTemplate": {
                  "description": "The slot name used to specify the template for rendering the footer cell. See the Help documentation for more information.",
                  "type": "string|null",
                  "displayName": "Footer Template",
                  "value": null,
                  "help": "columns[].footerTemplate",
                  "extension": {
                    "vbdt": {
                      "slotData": {
                        "componentElement": {
                          "description": "The <oj-table> custom element.",
                          "type": "Element"
                        }
                      }
                    }
                  }
                },
                "headerClassName": {
                  "description": "The CSS class to apply to the column header text.",
                  "type": "string|null",
                  "displayName": "Header Class Name",
                  "value": null,
                  "help": "columns[].headerClassName"
                },
                "headerRenderer": {
                  "description": "A function that renders the content of the header. The function takes a context argument, provided by the table. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Header Renderer",
                  "value": null,
                  "help": "columns[].headerRenderer"
                },
                "headerStyle": {
                  "description": "The CSS styling to apply to the column header text.",
                  "type": "string|null",
                  "displayName": "Header Style",
                  "value": null,
                  "help": "columns[].headerStyle"
                },
                "headerTemplate": {
                  "description": "The slot name used to specify the template for rendering the header cell. See the Help documentation for more information.",
                  "type": "string|null",
                  "displayName": "Header Template",
                  "value": null,
                  "help": "columns[].headerTemplate",
                  "extension": {
                    "vbdt": {
                      "slotData": {
                        "componentElement": {
                          "description": "The <oj-table> custom element",
                          "type": "Element"
                        },
                        "data": {
                          "description": "The data object for the current header",
                          "type": "object"
                        }
                      }
                    }
                  }
                },
                "headerText": {
                  "description": "The text to display in the column header.",
                  "type": "string|null",
                  "displayName": "Header Text",
                  "value": null,
                  "translatable": true,
                  "help": "columns[].headerText"
                },
                "id": {
                  "description": "The identifier for the column.",
                  "type": "string|null",
                  "displayName": "Id",
                  "value": null,
                  "help": "columns[].id"
                },
                "renderer": {
                  "description": "A function that renders the content of the cell. The function takes a context argument, provided by the table. See the Help documentation for more information.",
                  "type": "function|null",
                  "displayName": "Renderer",
                  "value": null,
                  "help": "columns[].renderer"
                },
                "resizable": {
                  "description": "Enable or disable width resizing along the column end headers.",
                  "type": "string",
                  "displayName": "Resizable",
                  "value": "disabled",
                  "help": "columns[].resizable",
                  "enumValues": [
                    "disabled",
                    "enabled"
                  ],
                  "propertyEditorValues": {
                    "disabled": {
                      "displayName": "Disabled"
                    },
                    "enabled": {
                      "displayName": "Enabled"
                    }
                  }
                },
                "sortProperty": {
                  "description": "Specifies the row attribute used for sorting when a sort is invoked on this column. See the Help documentation for more information.",
                  "type": "string|null",
                  "displayName": "Sort Property",
                  "value": null,
                  "help": "columns[].sortProperty"
                },
                "sortable": {
                  "description": "Specifies whether a column is sortable. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Sortable",
                  "value": "auto",
                  "help": "columns[].sortable",
                  "enumValues": [
                    "auto",
                    "disabled",
                    "enabled"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "description": "Column will be sortable if the underlying model supports sorting.",
                      "displayName": "Auto"
                    },
                    "disabled": {
                      "description": "Disabled.",
                      "displayName": "Disabled"
                    },
                    "enabled": {
                      "description": "Enabled.",
                      "displayName": "Enabled"
                    }
                  }
                },
                "style": {
                  "description": "The CSS styling to apply to the column cells.",
                  "type": "string|null",
                  "displayName": "Style",
                  "value": null,
                  "help": "columns[].style"
                },
                "template": {
                  "description": "The slot name used to specify the template for rendering the cell. See the Help documentation for more information.",
                  "type": "string|null",
                  "displayName": "Template",
                  "value": null,
                  "help": "columns[].template",
                  "extension": {
                    "vbdt": {
                      "slotData": {
                        "componentElement": {
                          "description": "The <oj-table> custom element",
                          "type": "Element"
                        },
                        "data": {
                          "description": "The data for the current cell being rendered",
                          "type": "object"
                        },
                        "row": {
                          "description": "The data for the row contained the current cell being rendered",
                          "type": "object"
                        },
                        "index": {
                          "description": "The zero-based index of the current row being rendered",
                          "type": "number"
                        },
                        "columnIndex": {
                          "description": "The zero-based index of the current column being rendered.",
                          "type": "number"
                        },
                        "key": {
                          "description": "The key of the current cell being rendered.",
                          "type": "any"
                        },
                        "mode": {
                          "description": "The mode of the row containing the cell. It can be \"edit\" or \"navigation\".",
                          "type": "string"
                        }
                      }
                    }
                  }
                },
                "width": {
                  "description": "The width of the column in pixels.",
                  "type": "number|null",
                  "displayName": "Width",
                  "value": null,
                  "units": "pixels",
                  "help": "columns[].width"
                }
              }
            }
          }
        },
        "columnsDefault": {
          "description": "Default values to apply to all column objects.",
          "type": "object",
          "displayName": "Columns Default",
          "help": "columnsDefault",
          "properties": {
            "className": {
              "description": "The default CSS class for column cells.",
              "type": "string|null",
              "displayName": "Class Name",
              "value": null,
              "help": "columnsDefault.className"
            },
            "field": {
              "description": "The default data field for the column.",
              "type": "string|null",
              "displayName": "Field",
              "value": null,
              "help": "columnsDefault.field"
            },
            "footerClassName": {
              "description": "The default CSS class to apply to the footer cell.",
              "type": "string|null",
              "displayName": "Footer Class Name",
              "value": null,
              "help": "columnsDefault.footerClassName"
            },
            "footerRenderer": {
              "description": "A function that renders the content of the footer cell. The function takes a context argument, provided by the table. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Footer Renderer",
              "value": null,
              "help": "columnsDefault.footerRenderer"
            },
            "footerStyle": {
              "description": "The default CSS styling to apply to the footer cell.",
              "type": "string|null",
              "displayName": "Footer Style",
              "value": null,
              "help": "columnsDefault.footerStyle"
            },
            "footerTemplate": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0"
                }
              ],
              "description": "The slot name used to specify the template for rendering the footer cell. See the Help documentation for more information.",
              "type": "string|null",
              "displayName": "Footer Template",
              "value": null,
              "help": "columnsDefault.footerTemplate",
              "extension": {
                "vbdt": {
                  "slotData": {
                    "componentElement": {
                      "description": "The <oj-table> custom element.",
                      "type": "Element"
                    }
                  }
                }
              }
            },
            "headerClassName": {
              "description": "The default CSS class to apply to the column header.",
              "type": "string|null",
              "displayName": "Header Class Name",
              "value": null,
              "help": "columnsDefault.headerClassName"
            },
            "headerRenderer": {
              "description": "A function that renders the content of the header. The function takes a context argument, provided by the table. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Header Renderer",
              "value": null,
              "help": "columnsDefault.headerRenderer"
            },
            "headerStyle": {
              "description": "The default CSS styling to apply to the column header.",
              "type": "string|null",
              "displayName": "Header Style",
              "value": null,
              "help": "columnsDefault.headerStyle"
            },
            "headerTemplate": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0"
                }
              ],
              "description": "The slot name used to specify the template for rendering the header cell. See the Help documentation for more information.",
              "type": "string|null",
              "displayName": "Header Template",
              "value": null,
              "help": "columnsDefault.headerTemplate",
              "extension": {
                "vbdt": {
                  "slotData": {
                    "componentElement": {
                      "description": "The <oj-table> custom element",
                      "type": "Element"
                    },
                    "data": {
                      "description": "The data object for the current header",
                      "type": "object"
                    }
                  }
                }
              }
            },
            "headerText": {
              "description": "The default text to display in the column header.",
              "type": "string|null",
              "displayName": "Header Text",
              "value": null,
              "translatable": true,
              "help": "columnsDefault.headerText"
            },
            "renderer": {
              "description": "A function that renders the content of the cell. The function takes a context argument, provided by the table. See the Help documentation for more information.",
              "type": "function|null",
              "displayName": "Renderer",
              "value": null,
              "help": "columnsDefault.renderer"
            },
            "resizable": {
              "description": "Enable or disable width resizing along the column end headers.",
              "type": "string|null",
              "displayName": "Resizable",
              "value": "disabled",
              "help": "columnsDefault.resizable",
              "enumValues": [
                "disabled",
                "enabled"
              ],
              "propertyEditorValues": {
                "disabled": {
                  "displayName": "Disabled"
                },
                "enabled": {
                  "displayName": "Enabled"
                }
              }
            },
            "sortProperty": {
              "description": "Specifies the row attribute used for sorting when a sort is invoked on this column. See the Help documentation for more information.",
              "type": "string|null",
              "displayName": "Sort Property",
              "value": null,
              "help": "columnsDefault.sortProperty"
            },
            "sortable": {
              "description": "Specifies whether a column is sortable. See the Help documentation for more information.",
              "type": "string|null",
              "displayName": "Sortable",
              "value": "auto",
              "help": "columnsDefault.sortable",
              "enumValues": [
                "auto",
                "disabled",
                "enabled"
              ],
              "propertyEditorValues": {
                "auto": {
                  "description": "Column will be sortable if the underlying model supports sorting.",
                  "displayName": "Auto"
                },
                "disabled": {
                  "description": "Disabled.",
                  "displayName": "Disabled"
                },
                "enabled": {
                  "description": "Enabled.",
                  "displayName": "Enabled"
                }
              }
            },
            "style": {
              "description": "The default CSS styling to apply to the column cells.",
              "type": "string|null",
              "displayName": "Style",
              "value": null,
              "help": "columnsDefault.style"
            },
            "template": {
              "status": [
                {
                  "type": "deprecated",
                  "since": "7.0.0"
                }
              ],
              "description": "The slot name used to specify the template for rendering the cell. See the Help documentation for more information.",
              "type": "string|null",
              "displayName": "Template",
              "value": null,
              "help": "columnsDefault.template",
              "extension": {
                "vbdt": {
                  "slotData": {
                    "componentElement": {
                      "description": "The <oj-table> custom element",
                      "type": "Element"
                    },
                    "data": {
                      "description": "The data for the current cell being rendered",
                      "type": "object"
                    },
                    "row": {
                      "description": "The data for the row contained the current cell being rendered",
                      "type": "object"
                    },
                    "index": {
                      "description": "The zero-based index of the current row being rendered",
                      "type": "number"
                    },
                    "columnIndex": {
                      "description": "The zero-based index of the current column being rendered.",
                      "type": "number"
                    },
                    "key": {
                      "description": "The key of the current cell being rendered.",
                      "type": "any"
                    },
                    "mode": {
                      "description": "The mode of the row containing the cell. It can be \"edit\" or \"navigation\".",
                      "type": "string"
                    }
                  }
                }
              }
            },
            "width": {
              "description": "The default width of the column in pixels.",
              "type": "number|null",
              "displayName": "Width",
              "value": null,
              "units": "pixels",
              "help": "columnsDefault.width"
            }
          }
        },
        "currentRow": {
          "description": "Specifies the row that currently has keyboard focus. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Current Row",
          "value": null,
          "writeback": true,
          "help": "currentRow"
        },
        "data": {
          "description": "Specifies the data for the table. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "display": {
          "description": "Specifies whether to display this table in list or grid mode. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Display",
          "value": "list",
          "help": "display",
          "enumValues": [
            "grid",
            "list"
          ],
          "propertyEditorValues": {
            "grid": {
              "description": "Display table in grid mode. This is a more compact look than list mode.",
              "displayName": "Grid"
            },
            "list": {
              "description": "Display table in list mode.",
              "displayName": "List"
            }
          }
        },
        "dnd": {
          "description": "Specifies drag and drop features. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Dnd",
          "help": "dnd",
          "properties": {
            "drag": {
              "description": "An object that describes drag functionlity.",
              "type": "object",
              "displayName": "Drag",
              "value": null,
              "help": "dnd.drag",
              "properties": {
                "rows": {
                  "description": "An object that describes drag functionlity for a selected set of rows. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Rows",
                  "help": "dnd.drag.rows",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed. For example, if selected rows of employee data are being dragged, dataTypes could be \"application/employees+json\". Drop targets can examine the data types and decide whether to accept the data. A text input may only accept \"text\" data type, while a chart for displaying employee data may be configured to accept the \"application/employees+json\" type. For each type in the array, dataTransfer.setData will be called with the specified type and the JSON version of the selected rows data as the value. The selected rows data is an array of objects, with each object representing one selected row in the format returned by TableDataSource.get(). This property is required unless the application calls setData itself in a dragStart callback function.",
                      "type": "string|Array<string>"
                    },
                    "dragStart": {
                      "description": "A callback function that receives the \"dragstart\" event and context information as its arguments. function(event, context) Parameters: event: The DOM event object context: ojTable.DragRowContext object with the following properties: rows: An array of objects, with each object representing the data of one selected row in the structure below: dataThe raw row data indexThe index for the row keyThe key value for the row This function can set its own data and drag image as needed. If dataTypes is specified, event.dataTransfer is already populated with the default data when this function is invoked. If dataTypes is not specified, this function must call event.dataTransfer.setData to set the data or else the drag operation will be cancelled. In either case, the drag image is set to an image of the selected rows visible on the table.",
                      "type": "function"
                    },
                    "drag": {
                      "description": "A callback function that receives the \"drag\" event as its argument. function(event) Parameters: event: The DOM event object",
                      "type": "function"
                    },
                    "dragEnd": {
                      "description": "A callback function that receives the \"dragend\" event as its argument. function(event) Parameters: event: The DOM event object",
                      "type": "function"
                    }
                  }
                }
              }
            },
            "drop": {
              "description": "An object that describes drop functionality.",
              "type": "object",
              "displayName": "Drop",
              "value": null,
              "help": "dnd.drop",
              "properties": {
                "columns": {
                  "description": "An object that describes drop functionlity for a selected set of columns. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Columns",
                  "help": "dnd.drop.columns",
                  "properties": {
                    "dataTypes": {
                      "description": "A data type or an array of data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>"
                    },
                    "dragEnter": {
                      "description": "A callback function that receives the \"dragenter\" event and context information as its arguments. function(event, context) This function should call event.preventDefault() to indicate the dragged data can be accepted. Calling event.preventDefault() is required by HTML5 Drag and Drop to indicate acceptance of data. If dataTypes is specified, it will be matched against the drag data types to determine if the data is acceptable. If there is a match, JET will call event.preventDefault() to indicate that the data can be accepted.",
                      "type": "function"
                    },
                    "dragOver": {
                      "description": "A callback function that receives the \"dragover\" event and context information as its arguments. function(event, context) Similar to dragEnter, this function should call event.preventDefault() to indicate the dragged data can be accepted. If dataTypes is specified, it will be matched against the drag data types to determine if the data is acceptable.",
                      "type": "function"
                    },
                    "dragLeave": {
                      "description": "A callback function that receives the \"dragleave\" event and context information as its arguments. function(event, context)",
                      "type": "function"
                    },
                    "drop": {
                      "description": "A required callback function that receives the \"drop\" event and context information as its arguments. function(event, context) This function should call event.preventDefault() to indicate the dragged data is accepted.",
                      "type": "function"
                    }
                  }
                },
                "rows": {
                  "description": "An object that describes drop functionlity for a selected set of rows. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Rows",
                  "help": "dnd.drop.rows",
                  "properties": {
                    "dataTypes": {
                      "description": "A data type or an array of data types this element can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>"
                    },
                    "dragEnter": {
                      "description": "A callback function that receives the \"dragenter\" event and context information as its arguments. function(event, context) This function should call event.preventDefault() to indicate the dragged data can be accepted. Calling event.preventDefault() is required by HTML5 Drag and Drop to indicate acceptance of data. If dataTypes is specified, it will be matched against the drag data types to determine if the data is acceptable. If there is a match, JET will call event.preventDefault() to indicate that the data can be accepted.",
                      "type": "function"
                    },
                    "dragOver": {
                      "description": "A callback function that receives the \"dragover\" event and context information as its arguments. function(event, context) Similar to dragEnter, this function should call event.preventDefault() to indicate the dragged data can be accepted. If dataTypes is specified, it will be matched against the drag data types to determine if the data is acceptable.",
                      "type": "function"
                    },
                    "dragLeave": {
                      "description": "A callback function that receives the \"dragleave\" event and context information as its arguments. function(event, context)",
                      "type": "function"
                    },
                    "drop": {
                      "description": "A required callback function that receives the \"drop\" event and context information as its arguments. function(event, context) This function should call event.preventDefault() to indicate the dragged data is accepted. If the application needs to look at the data for the row being dropped on, it can use the getDataForVisibleRow method.",
                      "type": "function"
                    }
                  }
                }
              }
            },
            "reorder": {
              "description": "An object that describes reorder functionlity.",
              "type": "object",
              "displayName": "Reorder",
              "help": "dnd.reorder",
              "properties": {
                "columns": {
                  "description": "An object that describes reorder functionlity for a selected column. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Columns",
                  "value": "disabled",
                  "help": "dnd.reorder.columns",
                  "enumValues": [
                    "disabled",
                    "enabled"
                  ],
                  "propertyEditorValues": {
                    "disabled": {
                      "description": "Disable column reordering",
                      "displayName": "Disabled"
                    },
                    "enabled": {
                      "description": "Enable column reordering",
                      "displayName": "Enabled"
                    }
                  }
                }
              }
            }
          }
        },
        "editMode": {
          "description": "Specifies if the table is read-only or editable. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Edit Mode",
          "value": "none",
          "help": "editMode",
          "enumValues": [
            "none",
            "rowEdit"
          ],
          "propertyEditorValues": {
            "none": {
              "description": "The table is read-only and is a single Tab stop.",
              "displayName": "None"
            },
            "rowEdit": {
              "description": "The table has single row at a time editability and the cells within the editable row are tabbable.",
              "displayName": "Row Edit"
            }
          }
        },
        "editRow": {
          "description": "Specifies the row that is currently being edited. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Edit Row",
          "value": "{'rowKey': null, rowIndex': -1}",
          "writeback": true,
          "help": "editRow"
        },
        "firstSelectedRow": {
          "description": "Read-only property used for retrieving the key and data of the first selected row. See the Help documentation for more information.",
          "type": "object",
          "displayName": "First Selected Row",
          "value": {
            "key": null,
            "data": null
          },
          "writeback": true,
          "readOnly": true,
          "help": "firstSelectedRow"
        },
        "horizontalGridVisible": {
          "description": "Specifies the visibility of the horizontal gridlines. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Horizontal Grid Visible",
          "value": "auto",
          "help": "horizontalGridVisible",
          "enumValues": [
            "auto",
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Determined by display attribute.",
              "displayName": "Auto"
            },
            "disabled": {
              "description": "Disabled.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Enabled.",
              "displayName": "Enabled"
            }
          }
        },
        "rowRenderer": {
          "description": "A function that returns row content. The function takes a context argument, provided by the table. See the Help documentation for more information.",
          "type": "function|null",
          "displayName": "Row Renderer",
          "value": null,
          "help": "rowRenderer"
        },
        "scrollPolicy": {
          "description": "Specifies how data are fetched as user scrolls down the table.",
          "type": "string",
          "displayName": "Scroll Policy",
          "value": "auto",
          "help": "scrollPolicy",
          "enumValues": [
            "auto",
            "loadAll",
            "loadMoreOnScroll"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Determined by element. The default is to have the same behavior as \"loadMoreOnScroll\" except when legacy TableDataSource is used, in which case the behavior is the same as \"loadAll\".",
              "displayName": "Auto"
            },
            "loadAll": {
              "description": "Fetch and render all data.",
              "displayName": "Load All"
            },
            "loadMoreOnScroll": {
              "description": "Additional data are fetched when the user scrolls to the bottom of the table. Not compatible when used with Paging Control \"loadMore\" mode.",
              "displayName": "Load More On Scroll"
            }
          }
        },
        "scrollPolicyOptions": {
          "description": "Specifies fetch options for scrolling behaviors that trigger data fetches.",
          "type": "object|null",
          "displayName": "Scroll Policy Options",
          "help": "scrollPolicyOptions",
          "properties": {
            "fetchSize": {
              "description": "The number of data rows to fetch in each block.",
              "type": "number",
              "displayName": "Fetch Size",
              "value": 25,
              "minimum": 1,
              "help": "scrollPolicyOptions.fetchSize"
            },
            "maxCount": {
              "description": "The maximum number of rows to display before fetching more data rows will be stopped.",
              "type": "number",
              "displayName": "Max Count",
              "value": 500,
              "minimum": 0,
              "help": "scrollPolicyOptions.maxCount"
            }
          }
        },
        "scrollPosition": {
          "description": "Specifies the scroll position of the table. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Scroll Position",
          "value": {
            "x": 0,
            "y": 0
          },
          "writeback": true,
          "help": "scrollPosition",
          "properties": {
            "x": {
              "description": "the horizontal position in pixels",
              "type": "number"
            },
            "y": {
              "description": "the vertical position in pixels",
              "type": "number"
            },
            "columnIndex": {
              "description": "the zero-based index of the cell at the origin of the table",
              "type": "number"
            },
            "rowIndex": {
              "description": "the zero-based index of the cell at the origin of the table. If scrollPolicy is set to 'loadMoreOnScroll and the row index is greater than maxCount set in scrollPolicyOptions, then it will scroll and fetch until the end of the table is reached and there are no more rows to fetch.",
              "type": "number"
            },
            "columnKey": {
              "description": "the key of the column. This corresponds to the identifier of the column specified in columns. If the column does not exists then the value is ignored.",
              "type": "any"
            },
            "rowKey": {
              "description": "the key of the row. If DataProvider is used for data and the key does not exists in the DataProvider, then the value is ignored. If DataProvider is not used then Table will fetch and scroll until the item is found or the end of the table is reached and there's no more items to fetch.",
              "type": "any"
            },
            "offsetX": {
              "description": "the horizontal offset in pixels relative to the column identified by columnKey/columnIndex.",
              "type": "number"
            },
            "offsetY": {
              "description": "the vertical offset in pixels relative to the row identified by rowKey/rowIndex.",
              "type": "number"
            }
          }
        },
        "selected": {
          "description": "Specifies the current selected rows and/or columns in the table. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Selected",
          "value": "{row: new KeySetImpl(), column: new KeySetImpl()};",
          "writeback": true,
          "help": "selected",
          "properties": {
            "column": {
              "description": "Specifies the current selected columns in the table.",
              "type": "KeySet",
              "displayName": "Column",
              "value": "new oj.KeySetImpl();",
              "writeback": true,
              "help": "selected.column"
            },
            "row": {
              "description": "Specifies the current selected rows in the table.",
              "type": "KeySet",
              "displayName": "Row",
              "value": "new oj.KeySetImpl();",
              "writeback": true,
              "help": "selected.row"
            }
          }
        },
        "selection": {
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "Use selected attribute instead."
            }
          ],
          "description": "Specifies the current selections in the table. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the row and column selection modes.",
          "type": "Object<string, string>|null",
          "displayName": "Selection Mode",
          "value": null,
          "help": "selectionMode",
          "properties": {
            "column": {
              "description": "Specifies the selection mode for columns. By default, column selection is disabled.",
              "type": "string",
              "displayName": "Column",
              "help": "selectionMode.column",
              "enumValues": [
                "multiple",
                "none",
                "single"
              ],
              "propertyEditorValues": {
                "multiple": {
                  "description": "Allow multiple selections",
                  "displayName": "Multiple"
                },
                "none": {
                  "description": "No column selection",
                  "displayName": "None"
                },
                "single": {
                  "description": "Allow single selection",
                  "displayName": "Single"
                }
              }
            },
            "row": {
              "description": "Specifies the selection mode for rows. By default, row selection is disabled.",
              "type": "string",
              "displayName": "Row",
              "help": "selectionMode.row",
              "enumValues": [
                "multiple",
                "none",
                "single"
              ],
              "propertyEditorValues": {
                "multiple": {
                  "description": "Allow multiple selections",
                  "displayName": "Multiple"
                },
                "none": {
                  "description": "No row selection",
                  "displayName": "None"
                },
                "single": {
                  "description": "Allow single selection",
                  "displayName": "Single"
                }
              }
            }
          }
        },
        "selectionRequired": {
          "description": "Specifies whether one row will always be selected.",
          "type": "boolean",
          "displayName": "Selection Required",
          "value": false,
          "help": "selectionRequired"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "labelAccSelectionAffordanceBottom": {
              "description": "Label for the bottom selection affordance on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccSelectionAffordanceBottom"
            },
            "labelAccSelectionAffordanceTop": {
              "description": "Label for the top selection affordance on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAccSelectionAffordanceTop"
            },
            "labelDisableNonContiguousSelection": {
              "description": "Provides properties to customize the context menu label for exiting non-contigous selection. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDisableNonContiguousSelection"
            },
            "labelEditRow": {
              "description": "Edit row label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelEditRow"
            },
            "labelEnableNonContiguousSelection": {
              "description": "Provides properties to customize the context menu label for entering non-contigous selection. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelEnableNonContiguousSelection"
            },
            "labelResize": {
              "description": "Provides properties to customize the context menu label for column resize. See the translations option for usage examples.",
              "type": "string",
              "help": "translations.labelResize"
            },
            "labelResizePopupSpinner": {
              "description": "Provides properties to customize the resize popup spinner label. See the translations option for usage examples.",
              "type": "string",
              "help": "translations.labelResizePopupSpinner"
            },
            "labelResizePopupSubmit": {
              "description": "Provides properties to customize the resize popup submit button. See the translations option for usage examples.",
              "type": "string",
              "help": "translations.labelResizePopupSubmit"
            },
            "labelSelectAndEditRow": {
              "description": "Select and Edit row label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSelectAndEditRow"
            },
            "labelSelectColum": {
              "description": "Select column label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSelectColum"
            },
            "labelSelectRow": {
              "description": "Select row label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSelectRow"
            },
            "labelSort": {
              "description": "Context menu label for sort. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSort"
            },
            "labelSortAsc": {
              "description": "Context menu label for sort ascending. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSortAsc"
            },
            "labelSortDsc": {
              "description": "Context menu label for sort descending. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSortDsc"
            },
            "msgColumnResizeWidthValidation": {
              "description": "Column resize input width validation See the translations option for usage examples.",
              "type": "string",
              "help": "translations.msgColumnResizeWidthValidation"
            },
            "msgFetchingData": {
              "description": "Fetching data message. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgFetchingData"
            },
            "msgInitializing": {
              "description": "Table initializing message. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgInitializing"
            },
            "msgNoData": {
              "description": "No data to display message. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgNoData"
            },
            "msgScrollPolicyMaxCountDetail": {
              "description": "Warning message detail that maxCount has been reached for scrollPolicy=loadMoreOnScroll See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgScrollPolicyMaxCountDetail"
            },
            "msgScrollPolicyMaxCountSummary": {
              "description": "Warning message summary that maxCount has been reached for scrollPolicy=loadMoreOnScroll See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgScrollPolicyMaxCountSummary"
            },
            "msgStatusSortAscending": {
              "description": "Sort ascending status notification for accessibility See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgStatusSortAscending"
            },
            "msgStatusSortDescending": {
              "description": "Sort descending status notification for accessibility See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.msgStatusSortDescending"
            }
          }
        },
        "verticalGridVisible": {
          "description": "Specifies the visibility of the vertical gridlines. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Vertical Grid Visible",
          "value": "auto",
          "help": "verticalGridVisible",
          "enumValues": [
            "auto",
            "disabled",
            "enabled"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Determined by display attribute.",
              "displayName": "Auto"
            },
            "disabled": {
              "description": "Disabled.",
              "displayName": "Disabled"
            },
            "enabled": {
              "description": "Enabled.",
              "displayName": "Enabled"
            }
          }
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "getDataForVisibleRow": {
          "description": "Return the row data for a rendered row in the table.",
          "help": "getDataForVisibleRow",
          "params": [
            {
              "name": "rowIndex",
              "description": "row index",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refresh the table.",
          "help": "refresh",
          "return": "void"
        },
        "refreshRow": {
          "description": "Refresh a row in the table.",
          "help": "refreshRow",
          "params": [
            {
              "name": "rowIdx",
              "description": "Index of the row to refresh.",
              "type": "number"
            }
          ],
          "return": "Promise<boolean>"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "the action that starts the animation. See animation section for a list of actions.",
              "type": "\"add\"|\"remove\"|\"update\""
            },
            "element": {
              "description": "the target of animation. For row animations this will be the cell contents wrapped in a div.",
              "type": "Element"
            },
            "endCallback": {
              "description": "if the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "the action that started the animation. See animation section for a list of actions.",
              "type": "\"add\"|\"remove\"|\"update\""
            },
            "element": {
              "description": "the target of animation. For row animations this will be the cell contents wrapped in a div.",
              "type": "Element"
            }
          }
        },
        "ojBeforeCurrentRow": {
          "description": "Triggered before the current row is changed.",
          "bubbles": true,
          "cancelable": true,
          "help": "beforeCurrentRow",
          "detail": {
            "currentRow": {
              "description": "the new current row",
              "type": "object"
            },
            "previousCurrentRow": {
              "description": "the previous current row",
              "type": "object"
            }
          }
        },
        "ojBeforeRowEdit": {
          "description": "Triggered before the table is going to enter edit mode.",
          "bubbles": true,
          "cancelable": true,
          "help": "beforeRowEdit",
          "detail": {
            "rowContext": {
              "description": "the rowContext of the row that editing is going to be performed on.",
              "type": "object"
            }
          }
        },
        "ojBeforeRowEditEnd": {
          "description": "Triggered before the table is going to exit edit mode. See the Help documentation for more information.",
          "bubbles": true,
          "cancelable": true,
          "help": "beforeRowEditEnd",
          "detail": {
            "rowContext": {
              "description": "the rowContext of the row that editing is going to be performed on.",
              "type": "object"
            },
            "cancelEdit": {
              "description": "true if the edit should be negated based on actions (i.e. escape key).",
              "type": "object"
            }
          }
        },
        "ojSort": {
          "description": "Triggered when a sort is performed on the table.",
          "bubbles": true,
          "cancelable": true,
          "help": "sort",
          "detail": {
            "header": {
              "description": "the key of the header which was sorted on",
              "type": "Element"
            },
            "direction": {
              "description": "the direction of the sort",
              "type": "'ascending'|'descending'"
            }
          }
        }
      },
      "slots": {
        "bottom": {
          "description": "Named slot for the Table's bottom panel where applications can add content such as a paging control.",
          "help": "bottom"
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-tag-cloud": {
      "name": "oj-tag-cloud",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Tag Cloud",
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtagcloud"
        }
      },
      "description": "A tag cloud is an interactive data visualization of textual data, where the importance of each tagged word or phrase is represented by font size or color.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTagCloud.html",
      "properties": {
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the itemTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "data": {
          "description": "Specifies the DataProvider for the tag cloud. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "hiddenCategories": {
          "description": "An array of category strings used for category filtering. Data items with a category in hiddenCategories will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over data items.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "items": {
          "description": "An array of objects defining the data items for the tag cloud items. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Items",
          "value": null,
          "help": "items",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "categories": {
                  "description": "An array of category strings corresponding to the tag cloud items. This allows highlighting and filtering of items.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The color of the text. Will be overridden by any color defined in the style option. The default value comes from the CSS and varies based on theme.",
                  "type": "string"
                },
                "id": {
                  "description": "The item id should be set by the application if the DataProvider is not being used. The row key will be used as id in the DataProvider case.",
                  "type": "any"
                },
                "label": {
                  "description": "The text of the item.",
                  "type": "string"
                },
                "shortDesc": {
                  "description": "The description of the item. This is used for customizing the tooltip text.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of the item text.",
                  "type": "object"
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of the item text.",
                  "type": "string"
                },
                "url": {
                  "description": "The url this item references.",
                  "type": "string"
                },
                "value": {
                  "description": "The value of this item which will be used to scale its font-size within the tag cloud.",
                  "type": "number"
                }
              }
            }
          }
        },
        "layout": {
          "description": "The layout to use for tag display.",
          "type": "string",
          "displayName": "Layout",
          "value": "rectangular",
          "help": "layout",
          "enumValues": [
            "cloud",
            "rectangular"
          ],
          "propertyEditorValues": {
            "cloud": {
              "displayName": "Cloud"
            },
            "rectangular": {
              "displayName": "Rectangular"
            }
          }
        },
        "selection": {
          "description": "An array containing the ids of the initially selected data items.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "displayName": "Multiple"
            },
            "none": {
              "displayName": "None"
            },
            "single": {
              "displayName": "Single"
            }
          }
        },
        "styleDefaults": {
          "description": "An object defining the style defaults for this tag cloud.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "styleDefaults",
          "properties": {
            "animationDuration": {
              "description": "The duration of the animations in milliseconds.",
              "type": "number",
              "displayName": "Animation Duration",
              "units": "milliseconds",
              "help": "styleDefaults.animationDuration"
            },
            "hoverBehaviorDelay": {
              "description": "Specifies initial hover delay in milliseconds for highlighting data items.",
              "type": "number",
              "displayName": "Hover Behavior Delay",
              "value": 200,
              "units": "milliseconds",
              "help": "styleDefaults.hoverBehaviorDelay"
            },
            "svgStyle": {
              "description": "The CSS style object defining the style of the items.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "styleDefaults.svgStyle"
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the tag cloud. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            }
          }
        }
      },
      "methods": {
        "getItem": {
          "description": "Returns information for automation testing verification of a specified item.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getItem",
          "params": [
            {
              "name": "index",
              "description": "The index.",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getItemCount": {
          "description": "Returns the number of items in the tag cloud data.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getItemCount",
          "return": "number"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the tag cloud. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-tag-cloud> custom element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current item.",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current item.",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item.",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "color": {
              "description": "The color of the hovered item.",
              "type": "string"
            },
            "componentElement": {
              "description": "The tag cloud element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered item.",
              "type": "any"
            },
            "label": {
              "description": "The data label of the hovered item.",
              "type": "string"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "value": {
              "description": "The value of the hovered item.",
              "type": "number"
            }
          }
        }
      }
    },
    "oj-tag-cloud-item": {
      "name": "oj-tag-cloud-item",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Tag Cloud Item",
      "type": "core",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtagcloud"
        }
      },
      "description": "ojTagCloudItem",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTagCloudItem.html",
      "properties": {
        "categories": {
          "description": "An array of category strings corresponding to the tag cloud items. This allows highlighting and filtering of items.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "categories"
        },
        "color": {
          "description": "The color of the text. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Color",
          "value": "",
          "format": "color",
          "help": "color"
        },
        "label": {
          "description": "The text of the item.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "translatable": true,
          "help": "label"
        },
        "shortDesc": {
          "description": "The description of the item. This is used for customizing the tooltip text.",
          "type": "string",
          "displayName": "Short Desc",
          "value": "",
          "help": "shortDesc"
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the item text.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the item text.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        },
        "url": {
          "description": "The url this item references.",
          "type": "string",
          "displayName": "Url",
          "value": "",
          "help": "url"
        },
        "value": {
          "description": "The value of this item is used to scale its font size within the tag cloud.",
          "type": "number|null",
          "displayName": "Value",
          "value": null,
          "help": "value"
        }
      }
    },
    "oj-text-area": {
      "name": "oj-text-area",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Text Area",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojinputtext"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-form-control-full-width"
          ],
          "description": "Changes the max-width to 100% so that form components will occupy all the available horizontal space"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-right"
          ],
          "description": "Aligns the text to the right regardless of the reading direction. This is normally used for right aligning numbers"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-start"
          ],
          "description": "Aligns the text to the left in ltr and to the right in rtl"
        },
        {
          "styleGroup": [
            "oj-form-control-text-align-end"
          ],
          "description": "Aligns the text to the right in ltr and to the left in rtl"
        }
      ],
      "description": "A text area allows the user to enter a multi-line text value.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTextArea.html",
      "properties": {
        "asyncValidators": {
          "description": "Specifies a list of asynchronous validators used by the component when performing validation. Use async-validators when you need to perform some validation work on the server. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Async Validators",
          "value": [],
          "help": "asyncValidators"
        },
        "autocomplete": {
          "description": "Specifies a component's autocomplete state. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Autocomplete",
          "value": "on",
          "help": "autocomplete"
        },
        "autofocus": {
          "description": "Specifies whether the component will get input focus when the page is loaded. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Autofocus",
          "value": false,
          "help": "autofocus"
        },
        "converter": {
          "description": "An object that converts the value. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Converter",
          "value": null,
          "help": "converter",
          "properties": {
            "type": {
              "description": "the converter type registered with the oj.ConverterFactory. Supported types are 'number' and 'datetime'. See ConverterFactory for details. E.g., converter='{\"type\": \"number\"}'",
              "type": "string"
            },
            "options": {
              "description": "optional Object literal of options that the converter expects. See IntlNumberConverter for options supported by the number converter. See IntlDateTimeConverter for options supported by the date time converter. E.g., converter='{\"type\": \"number\", \"options\": {\"style\": \"decimal\"}}'",
              "type": "object"
            }
          }
        },
        "describedBy": {
          "description": "Specifies a relationship between this component and another element.",
          "type": "string",
          "displayName": "Described By",
          "help": "describedBy"
        },
        "disabled": {
          "description": "Specifies whether the component is disabled. The default is false.",
          "type": "boolean",
          "displayName": "Disabled",
          "value": false,
          "help": "disabled"
        },
        "displayOptions": {
          "description": "Display options for the form field's messages, converter and validator hints, and help instruction text.",
          "type": "object",
          "displayName": "Display Options",
          "help": "displayOptions",
          "properties": {
            "converterHint": {
              "description": "Display options for auxilliary converter hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Converter Hint",
              "value": [
                "placeholder",
                "notewindow"
              ],
              "help": "displayOptions.converterHint"
            },
            "helpInstruction": {
              "description": "Display options for auxilliary help instruction text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Help Instruction",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.helpInstruction"
            },
            "messages": {
              "description": "Display options for auxilliary message text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Messages",
              "value": [
                "inline"
              ],
              "help": "displayOptions.messages"
            },
            "validatorHint": {
              "description": "Display options for auxilliary validator hint text that determines where it should be displayed in relation to the component.",
              "type": "Array<string>|string",
              "displayName": "Validator Hint",
              "value": [
                "notewindow"
              ],
              "help": "displayOptions.validatorHint"
            }
          }
        },
        "help": {
          "description": "Form component help information.",
          "type": "object",
          "displayName": "Help",
          "help": "help",
          "properties": {
            "instruction": {
              "description": "Represents advisory information for the component, such as would be appropriate for a tooltip.",
              "type": "string",
              "displayName": "Instruction",
              "value": "",
              "translatable": true,
              "help": "help.instruction"
            }
          }
        },
        "helpHints": {
          "description": "Represents hints for an oj-form-layout element to render help information on the label of the editable component.",
          "type": "object",
          "displayName": "Help Hints",
          "translatable": true,
          "help": "helpHints",
          "properties": {
            "definition": {
              "description": "Hint for help definition text associated with the label.",
              "type": "string",
              "displayName": "Definition",
              "value": "",
              "help": "helpHints.definition"
            },
            "source": {
              "description": "Hint for help source URL associated with the label.",
              "type": "string",
              "displayName": "Source",
              "value": "",
              "help": "helpHints.source"
            }
          }
        },
        "labelHint": {
          "description": "Represents a hint for oj-form-layout element to render a label on the editable component.",
          "type": "string",
          "displayName": "Label Hint",
          "value": "",
          "translatable": true,
          "help": "labelHint"
        },
        "labelledBy": {
          "description": "The oj-label sets the labelledBy property programmatically on the form component. See the Help documentation for more information.",
          "type": "string|null",
          "displayName": "Labelled By",
          "value": null,
          "help": "labelledBy"
        },
        "messagesCustom": {
          "description": "A list of messages added by an application to the component. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Messages Custom",
          "value": [],
          "writeback": true,
          "help": "messagesCustom"
        },
        "name": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.0.0",
              "description": "JET does not use form submit, so this is not needed."
            }
          ],
          "description": "Specifies the name of the component.",
          "type": "string",
          "displayName": "Name",
          "value": "",
          "help": "name"
        },
        "placeholder": {
          "description": "The placeholder text to set on the element.",
          "type": "string",
          "displayName": "Placeholder",
          "help": "placeholder"
        },
        "rawValue": {
          "description": "Read-only property used for retrieving the current value from the input field in string form. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Raw Value",
          "writeback": true,
          "readOnly": true,
          "help": "rawValue"
        },
        "readonly": {
          "description": "Specifies whether the component is read-only. A read-only element cannot be modified, but user interaction is allowed. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Readonly",
          "value": false,
          "help": "readonly"
        },
        "required": {
          "description": "Specifies whether the component is required or optional. See the Help documentation for more information.",
          "type": "boolean",
          "displayName": "Required",
          "value": false,
          "help": "required"
        },
        "resizeBehavior": {
          "description": "Specifies the resize behavior, based upon native browser support. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Resize Behavior",
          "value": "none",
          "help": "resizeBehavior",
          "enumValues": [
            "both",
            "horizontal",
            "none",
            "vertical"
          ],
          "propertyEditorValues": {
            "both": {
              "description": "The textarea will be interactively resizable horizontally and vertically.",
              "displayName": "Both"
            },
            "horizontal": {
              "description": "The textarea will be resizable in the horizontal direction only.",
              "displayName": "Horizontal"
            },
            "none": {
              "description": "The textarea will not be interactively resizable.",
              "displayName": "None"
            },
            "vertical": {
              "description": "The textarea will be resizable in the vertical direction only.",
              "displayName": "Vertical"
            }
          }
        },
        "rows": {
          "description": "Specifies the visible number of lines in the text area.",
          "type": "number",
          "displayName": "Rows",
          "help": "rows"
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "regexp": {
              "description": "Provides properties to customize the message text used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
              "type": "object",
              "help": "translations.regexp",
              "properties": {
                "messageDetail": {
                  "description": "Provides properties to customize the error message detail used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageDetail"
                },
                "messageSummary": {
                  "description": "Provides properties to customize the error message summary used by the implicit regexp validator associated to the InputText and TextArea components. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.regexp.messageSummary"
                }
              }
            },
            "required": {
              "description": "Provides properties to customize the summary, detail and hint text used by the implicit required validator associated to any editable component that supports the required option. See the translations attribute and required option for usage examples.",
              "type": "object",
              "help": "translations.required",
              "properties": {
                "hint": {
                  "description": "Hint text used by required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.hint"
                },
                "messageDetail": {
                  "description": "Message text that describes the details of the required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageDetail"
                },
                "messageSummary": {
                  "description": "Message text for summarizing a required validation error. See the translations attribute for usage examples.",
                  "type": "string",
                  "help": "translations.required.messageSummary"
                }
              }
            }
          }
        },
        "valid": {
          "description": "The validity state of the component",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is set at the start of the convert/validate process.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        },
        "validators": {
          "description": "Specifies a list of synchronous validators for performing validation by the element. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Validators",
          "value": [],
          "help": "validators",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "type": {
                  "description": "the validator type that has a ValidatorFactory that can be retrieved using the Validation module. For a list of supported validators refer to ValidatorFactory. E.g., {validators: [{type: 'regExp'}]}",
                  "type": "string"
                },
                "options": {
                  "description": "optional Object literal of options that the validator expects. E.g., {validators: [{type: 'regExp', options: {pattern: '[a-zA-Z0-9]{3,}'}}]}",
                  "type": "object"
                }
              }
            }
          }
        },
        "value": {
          "description": "The value of the component.",
          "type": "any",
          "displayName": "Value",
          "value": null,
          "writeback": true,
          "help": "value"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "validate": {
          "description": "Validates the component's display value using all converters and validators registered on the component. If there are no validation errors. then the value is updated. See the Help documentation for more information.",
          "help": "validate",
          "return": "Promise<string>"
        },
        "reset": {
          "description": "Resets the component by clearing all messages and messages attributes, and updates the component's display value using the attribute value.",
          "help": "reset",
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them.",
          "help": "showMessages",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateStart": {
          "description": "Triggered when a default animation is about to start, such as when the component is being opened/closed or a child item is being added/removed.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and any custom animation has ended.",
              "type": "function"
            }
          }
        },
        "ojAnimateEnd": {
          "description": "Triggered when a default animation has ended.",
          "bubbles": true,
          "cancelable": true,
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that triggers the animation. Supported values are: \"inline-open\" - when an inline message container opens or increases in size \"inline-close\" - when an inline message container closes or decreases in size \"notewindow-open\" - when a note window opens \"notewindow-close\" - when a note window closes ",
              "type": "string"
            },
            "element": {
              "description": "The element being animated.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-thematic-map": {
      "name": "oj-thematic-map",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Thematic Map",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojthematicmap"
        }
      },
      "description": "A thematic map is an interactive data visualization that displays data corresponding to geographic locations or regions.\r             Applications are required to supply a mapProvider for a valid thematic map.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojThematicMap.html",
      "properties": {
        "animationDuration": {
          "description": "The duration of the animations in milliseconds. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Animation Duration",
          "units": "milliseconds",
          "help": "animationDuration"
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "areaData": {
          "description": "Specifies the DataProvider for the areas of the thematic map. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Area Data",
          "value": null,
          "help": "areaData"
        },
        "areas": {
          "description": "An array of objects that define area data layers. Also accepts a Promise for deferred data rendering. See the Help documentation for more information.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Areas",
          "value": null,
          "help": "areas",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "categories": {
                  "description": "An array of category strings corresponding to this area. This allows highlighting and filtering of areas.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The area color.",
                  "type": "string"
                },
                "id": {
                  "description": "The identifier for this area. The id should be set by the application if the oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                  "type": "any"
                },
                "label": {
                  "description": "Text used for the area's label.",
                  "type": "string"
                },
                "labelStyle": {
                  "description": "The CSS style defining the label style for this area.",
                  "type": "object"
                },
                "location": {
                  "description": "An identifier corresponding to a Feature provided in the mapProvider geo object that this area is associated with.",
                  "type": "string"
                },
                "opacity": {
                  "description": "The area opacity.",
                  "type": "number"
                },
                "selectable": {
                  "description": "Specifies whether or not the area will be selectable.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "shortDesc": {
                  "description": "The text that displays in the area's tooltip.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of the area.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of the area.",
                  "type": "object"
                }
              }
            }
          }
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the areaTemplate, markerTemplate, or linkTemplate slots.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "focusRenderer": {
          "description": "An optional callback function to update the data item in response to changes in keyboard focus state. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.",
          "type": "function|null",
          "displayName": "Focus Renderer",
          "value": null,
          "help": "focusRenderer"
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Data items matching categories in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Data items matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over data items.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "hoverRenderer": {
          "description": "An optional callback function to update the node in response to changes in hover state. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.",
          "type": "function|null",
          "displayName": "Hover Renderer",
          "value": null,
          "help": "hoverRenderer"
        },
        "initialZooming": {
          "description": "Specifies whether the map will zoom to fit the data objects on initial render.",
          "type": "string",
          "displayName": "Initial Zooming",
          "value": "none",
          "help": "initialZooming",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "isolatedItem": {
          "description": "The id for the isolated area of this area data layer. If set, only the isolated area will be displayed.",
          "type": "any",
          "displayName": "Isolated Item",
          "value": null,
          "help": "isolatedItem"
        },
        "labelDisplay": {
          "description": "Specifies how labels for this layer should be displayed.",
          "type": "string",
          "displayName": "Label Display",
          "value": "off",
          "help": "labelDisplay",
          "enumValues": [
            "auto",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "auto": {
              "description": "Renders the label if it fits within the area bounds.",
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "labelType": {
          "description": "Specifies which type of map labels to display.",
          "type": "string",
          "displayName": "Label Type",
          "value": "short",
          "help": "labelType",
          "enumValues": [
            "long",
            "short"
          ],
          "propertyEditorValues": {
            "long": {
              "displayName": "Long"
            },
            "short": {
              "displayName": "Short"
            }
          }
        },
        "linkData": {
          "description": "Specifies the DataProvider for the links of the thematic map. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Link Data",
          "value": null,
          "help": "linkData"
        },
        "links": {
          "description": "An array of objects that define the map links. Also accepts a Promise for deferred data rendering. See the Help documentation for more information.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Links",
          "value": null,
          "help": "links",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "categories": {
                  "description": "An array of category strings corresponding to this link. This allows highlighting and filtering of links.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The link color.",
                  "type": "string"
                },
                "endLocation": {
                  "description": "An object used to determine the end point of the link.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The marker or area id to be used as the end point.",
                      "type": "any"
                    },
                    "location": {
                      "description": "An identifier corresponding to a Feature provided in the mapProvider geo object to be used as the end point.",
                      "type": "string"
                    },
                    "x": {
                      "description": "The x coordinate which can represent latitude of the end point.",
                      "type": "number"
                    },
                    "y": {
                      "description": "The y coordinate which can represent longitude of the end point.",
                      "type": "number"
                    }
                  }
                },
                "id": {
                  "description": "The identifier for this link. The id should be set by the application if the oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                  "type": "any"
                },
                "selectable": {
                  "description": "Specifies whether or not the link will be selectable.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "shortDesc": {
                  "description": "The text that displays in the links's tooltip.",
                  "type": "string"
                },
                "startLocation": {
                  "description": "An object used to determine the start point of the link.",
                  "type": "object",
                  "properties": {
                    "id": {
                      "description": "The marker or area id to be used as the start point.",
                      "type": "any"
                    },
                    "location": {
                      "description": "An identifier corresponding to a Feature provided in the mapProvider geo object to be used as the start point.",
                      "type": "string"
                    },
                    "x": {
                      "description": "The x coordinate which can represent latitude of the start point.",
                      "type": "number"
                    },
                    "y": {
                      "description": "The y coordinate which can represent longitude of the start point.",
                      "type": "number"
                    }
                  }
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of the link.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of the link.",
                  "type": "object"
                },
                "width": {
                  "description": "The link width in pixels.",
                  "type": "number"
                }
              }
            }
          }
        },
        "mapProvider": {
          "description": "An object defining a custom map.",
          "type": "object",
          "displayName": "Map Provider",
          "help": "mapProvider",
          "properties": {
            "geo": {
              "description": "An object defining a custom area's coordinates and \"properties\" object. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Geo",
              "value": {},
              "help": "mapProvider.geo"
            },
            "propertiesKeys": {
              "description": "An object specifying \"properties\" object keys to use for custom area id and label mappings.",
              "type": "object",
              "displayName": "Properties Keys",
              "help": "mapProvider.propertiesKeys",
              "properties": {
                "id": {
                  "description": "The required name of the \"properties\" key to use as the location id that will map a data item to a map area.",
                  "type": "string",
                  "displayName": "Id",
                  "value": "",
                  "help": "mapProvider.propertiesKeys.id"
                },
                "longLabel": {
                  "description": "The optional name of the \"properties\" key to use for rendering area labels when labelType is set to \"long\".",
                  "type": "string",
                  "displayName": "Long Label",
                  "value": "",
                  "help": "mapProvider.propertiesKeys.longLabel"
                },
                "shortLabel": {
                  "description": "The optional name of the \"properties\" key to use for rendering area labels when labelType is set to \"short\".",
                  "type": "string",
                  "displayName": "Short Label",
                  "value": "",
                  "help": "mapProvider.propertiesKeys.shortLabel"
                }
              }
            }
          }
        },
        "markerData": {
          "description": "Specifies the DataProvider for the markers of the thematic map. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Marker Data",
          "value": null,
          "help": "markerData"
        },
        "markerZoomBehavior": {
          "description": "Specifies marker behavior on zoom.",
          "type": "string",
          "displayName": "Marker Zoom Behavior",
          "value": "fixed",
          "help": "markerZoomBehavior",
          "enumValues": [
            "fixed",
            "zoom"
          ],
          "propertyEditorValues": {
            "fixed": {
              "displayName": "Fixed"
            },
            "zoom": {
              "displayName": "Zoom"
            }
          }
        },
        "markers": {
          "description": "An array of objects that define marker data layers. Also accepts a Promise for deferred data rendering. See the Help documentation for more information.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Markers",
          "value": null,
          "help": "markers",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "borderColor": {
                  "description": "The marker border color.",
                  "type": "string"
                },
                "borderStyle": {
                  "description": "The marker border style.",
                  "type": "string",
                  "value": "solid",
                  "enumValues": [
                    "none",
                    "solid"
                  ]
                },
                "borderWidth": {
                  "description": "The marker border width in pixels.",
                  "type": "number"
                },
                "categories": {
                  "description": "An array of category strings corresponding to this marker. This allows highlighting and filtering of markers.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The marker color.",
                  "type": "string"
                },
                "height": {
                  "description": "The pixel height for this marker. Note that this attribute will be ignored if a value is provided to calculate marker sizes.",
                  "type": "number"
                },
                "id": {
                  "description": "The identifier for this marker. The id should be set by the application if the oj.DataProvider is not being used. The row key will be used as id in the oj.DataProvider case.",
                  "type": "any"
                },
                "label": {
                  "description": "Text used for the marker's label.",
                  "type": "string"
                },
                "labelPosition": {
                  "description": "Determines the label position relative to the marker.",
                  "type": "string",
                  "value": "center",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ]
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the marker.",
                  "type": "object"
                },
                "location": {
                  "description": "An identifier corresponding to a Feature provided in the mapProvider geo object that this marker is associated with.",
                  "type": "string"
                },
                "opacity": {
                  "description": "The marker opacity.",
                  "type": "number"
                },
                "rotation": {
                  "description": "The angle to rotate the marker in clockwise degrees around the marker center.",
                  "type": "number"
                },
                "selectable": {
                  "description": "Specifies whether or not the marker will be selectable.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "shape": {
                  "description": "Specifies the shape of a marker. Can take the name of a built-in shape or the svg path commands for a custom shape.",
                  "type": "string",
                  "value": "circle",
                  "propertyEditorValues": {
                    "circle": {
                      "displayName": "Circle"
                    },
                    "diamond": {
                      "displayName": "Diamond"
                    },
                    "ellipse": {
                      "displayName": "Ellipse"
                    },
                    "human": {
                      "displayName": "Human"
                    },
                    "plus": {
                      "displayName": "Plus"
                    },
                    "rectangle": {
                      "displayName": "Rectangle"
                    },
                    "square": {
                      "displayName": "Square"
                    },
                    "star": {
                      "displayName": "Star"
                    },
                    "triangleDown": {
                      "displayName": "Triangle Down"
                    },
                    "triangleUp": {
                      "displayName": "Triangle Up"
                    }
                  }
                },
                "shortDesc": {
                  "description": "The text that displays in the area's tooltip.",
                  "type": "string"
                },
                "source": {
                  "description": "Specifies an URI specifying the location of the image resource to use for the marker instead of a built-in shape. The shape attribute is ignored if the source image is defined.",
                  "type": "string"
                },
                "sourceHover": {
                  "description": "An optional URI specifying the location of the hover image resource. If not defined, the source image will be used.",
                  "type": "string"
                },
                "sourceHoverSelected": {
                  "description": "An optional URI specifying the location of the selected image resource on hover. If not defined, the sourceSelected image will be used. If sourceSelected is not defined, then the source image will be used.",
                  "type": "string"
                },
                "sourceSelected": {
                  "description": "An optional URI specifying the location of the selected image. If not defined, the source image will be used.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class defining the style of the marker.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The CSS style object defining the style of the marker.",
                  "type": "object"
                },
                "value": {
                  "description": "A data value used to calculate the marker dimensions based on the range of all the data values and the element size. Markers with negative or zero data values will not be rendered. If specified, this value takes precedence over the width and height attributes.",
                  "type": "number"
                },
                "width": {
                  "description": "The pixel width for this marker. Note that this attribute will be ignored if a value is provided to calculate marker.",
                  "type": "number"
                },
                "x": {
                  "description": "The x coordinate of the marker transformed using the map projection, which can be null if location is set instead.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate of the marker transformed using the map projection, which can be null if location is set instead.",
                  "type": "number"
                }
              }
            }
          }
        },
        "maxZoom": {
          "description": "Specifies the maximum zoom level for this element. Must be greater than or equal to 1.0. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Max Zoom",
          "value": 6,
          "minimum": 1,
          "help": "maxZoom"
        },
        "panning": {
          "description": "Specifies whether element panning is allowed.",
          "type": "string",
          "displayName": "Panning",
          "value": "none",
          "help": "panning",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "renderer": {
          "description": "An optional callback function to stamp custom SVG elements for a data layer. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.",
          "type": "function|null",
          "displayName": "Renderer",
          "value": null,
          "help": "renderer"
        },
        "selection": {
          "description": "An array of strings containing the ids of the selected data items.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "displayName": "Multiple"
            },
            "none": {
              "displayName": "None"
            },
            "single": {
              "displayName": "Single"
            }
          }
        },
        "selectionRenderer": {
          "description": "An optional callback function to update the data item in response to changes in selection state. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.",
          "type": "function|null",
          "displayName": "Selection Renderer",
          "value": null,
          "help": "selectionRenderer"
        },
        "styleDefaults": {
          "description": "An object defining the style defaults for this thematic map. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "styleDefaults",
          "properties": {
            "areaSvgStyle": {
              "description": "The CSS style object defining the style of the area layer areas.",
              "type": "object",
              "displayName": "Area Svg Style",
              "value": {},
              "help": "styleDefaults.areaSvgStyle"
            },
            "dataAreaDefaults": {
              "description": "An object defining the default styles for data areas.",
              "type": "object",
              "displayName": "Data Area Defaults",
              "value": {},
              "help": "styleDefaults.dataAreaDefaults",
              "properties": {
                "borderColor": {
                  "description": "The area stroke color for the area data layer.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "styleDefaults.dataAreaDefaults.borderColor"
                },
                "hoverColor": {
                  "description": "The hover data area border color.",
                  "type": "string",
                  "displayName": "Hover Color",
                  "format": "color",
                  "help": "styleDefaults.dataAreaDefaults.hoverColor"
                },
                "selectedInnerColor": {
                  "description": "The inner selected data area border color.",
                  "type": "string",
                  "displayName": "Selected Inner Color",
                  "format": "color",
                  "help": "styleDefaults.dataAreaDefaults.selectedInnerColor"
                },
                "selectedOuterColor": {
                  "description": "The outer selected data area border color.",
                  "type": "string",
                  "displayName": "Selected Outer Color",
                  "format": "color",
                  "help": "styleDefaults.dataAreaDefaults.selectedOuterColor"
                }
              }
            },
            "dataMarkerDefaults": {
              "description": "An object defining the default styles for data markers.",
              "type": "object",
              "displayName": "Data Marker Defaults",
              "help": "styleDefaults.dataMarkerDefaults",
              "properties": {
                "borderColor": {
                  "description": "The border color.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "styleDefaults.dataMarkerDefaults.borderColor"
                },
                "borderStyle": {
                  "description": "The border style.",
                  "type": "string",
                  "displayName": "Border Style",
                  "value": "solid",
                  "help": "styleDefaults.dataMarkerDefaults.borderStyle",
                  "enumValues": [
                    "none",
                    "solid"
                  ],
                  "propertyEditorValues": {
                    "none": {
                      "displayName": "None"
                    },
                    "solid": {
                      "displayName": "Solid"
                    }
                  }
                },
                "borderWidth": {
                  "description": "The border width in pixels.",
                  "type": "number",
                  "displayName": "Border Width",
                  "value": 0.5,
                  "units": "pixels",
                  "help": "styleDefaults.dataMarkerDefaults.borderWidth"
                },
                "color": {
                  "description": "The fill color of a marker.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "styleDefaults.dataMarkerDefaults.color"
                },
                "height": {
                  "description": "The default marker pixel height.",
                  "type": "number",
                  "displayName": "Height",
                  "value": 8,
                  "units": "pixels",
                  "help": "styleDefaults.dataMarkerDefaults.height"
                },
                "labelStyle": {
                  "description": "The CSS style object for a marker label.",
                  "type": "object",
                  "displayName": "Label Style",
                  "value": {},
                  "help": "styleDefaults.dataMarkerDefaults.labelStyle"
                },
                "opacity": {
                  "description": "The default marker opacity.",
                  "type": "number",
                  "displayName": "Opacity",
                  "value": 1,
                  "maximum": 1,
                  "minimum": 0,
                  "help": "styleDefaults.dataMarkerDefaults.opacity"
                },
                "shape": {
                  "description": "The default marker shape. Can take the name of a built-in shape or the svg path commands for a custom shape.",
                  "type": "string",
                  "displayName": "Shape",
                  "value": "circle",
                  "help": "styleDefaults.dataMarkerDefaults.shape"
                },
                "width": {
                  "description": "The default marker pixel width.",
                  "type": "number",
                  "displayName": "Width",
                  "value": 8,
                  "units": "pixels",
                  "help": "styleDefaults.dataMarkerDefaults.width"
                }
              }
            },
            "hoverBehaviorDelay": {
              "description": "Specifies initial hover delay in milliseconds for highlighting data items.",
              "type": "number",
              "displayName": "Hover Behavior Delay",
              "value": 200,
              "units": "milliseconds",
              "help": "styleDefaults.hoverBehaviorDelay"
            },
            "labelStyle": {
              "description": "The CSS style object for the area layer labels.",
              "type": "object",
              "displayName": "Label Style",
              "value": {},
              "help": "styleDefaults.labelStyle"
            },
            "linkDefaults": {
              "description": "An object defining the default styles for data links.",
              "type": "object",
              "displayName": "Link Defaults",
              "help": "styleDefaults.linkDefaults",
              "properties": {
                "color": {
                  "description": "The stroke color for links.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "styleDefaults.linkDefaults.color"
                },
                "width": {
                  "description": "The stroke width for links in pixels.",
                  "type": "number",
                  "displayName": "Width",
                  "value": 2,
                  "units": "pixels",
                  "help": "styleDefaults.linkDefaults.width"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the thematic map. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "tooltipDisplay": {
          "description": "Specifies the tooltip behavior of the thematic map.",
          "type": "string",
          "displayName": "Tooltip Display",
          "value": "auto",
          "help": "tooltipDisplay",
          "enumValues": [
            "auto",
            "labelAndShortDesc",
            "none",
            "shortDesc"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "labelAndShortDesc": {
              "displayName": "Label And Short Desc"
            },
            "none": {
              "displayName": "None"
            },
            "shortDesc": {
              "displayName": "Short Desc"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "areasRegion": {
              "description": "Used to describe the areas map layer for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.areasRegion"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "linksRegion": {
              "description": "Used to describe the links map layer for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.linksRegion"
            },
            "markersRegion": {
              "description": "Used to describe the markers map layer for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.markersRegion"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            }
          }
        },
        "zooming": {
          "description": "Specifies whether element zooming is allowed.",
          "type": "string",
          "displayName": "Zooming",
          "value": "none",
          "help": "zooming",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        }
      },
      "methods": {
        "getArea": {
          "description": "Returns an object for automation testing verification of the specified area.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getArea",
          "params": [
            {
              "name": "index",
              "description": "The index of the area in the areas Array.",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getMarker": {
          "description": "Returns an object for automation testing verification of the specified marker.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getMarker",
          "params": [
            {
              "name": "index",
              "description": "The index of the marker in the markers Array.",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getLink": {
          "description": "Returns an object for automation testing verification of the specified link.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getLink",
          "params": [
            {
              "name": "index",
              "description": "The index of the link in the links Array.",
              "type": "number"
            }
          ],
          "return": "object|null"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "areaTemplate": {
          "description": "The areaTemplate slot is used to specify the template for creating areas of the thematic map. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "areaTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-thematic-map> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current area",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent area",
              "type": "number"
            },
            "key": {
              "description": "The key of the current area",
              "type": "any"
            }
          }
        },
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "linkTemplate": {
          "description": "The linkTemplate slot is used to specify the template for creating links of the thematic map. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "linkTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-thematic-map> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current link",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent link",
              "type": "number"
            },
            "key": {
              "description": "The key of the current link",
              "type": "any"
            }
          }
        },
        "markerContentTemplate": {
          "description": "The markerContentTemplate slot is used to specify custom marker content. This slot takes precedence over the renderer/focusRenderer/hoverRenderer/selectionRenderer properties if specified. When the template is executed, the component's binding context is extended with the following properties: $current - an object that contains information for the current marker. (See [oj.ojThematicMap.RendererContext]ojThematicMap.RendererContext for a list of properties available on $current) Additionally, add data-oj-default-focus, data-oj-default-hover and/or data-oj-default-selection attributes to the template to also render the default focus, hover and/or selection effect for the data item.",
          "help": "markerContentTemplate",
          "data": {
            "color": {
              "description": "The color of the data item.",
              "type": "string"
            },
            "componentElement": {
              "description": "The thematic map element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the rendered item.",
              "type": "object"
            },
            "id": {
              "description": "The id of the data item.",
              "type": "any"
            },
            "itemData": {
              "description": "The row data object for the rendered item. This will only be set if an oj.DataProvider is being used.",
              "type": "object|null"
            },
            "label": {
              "description": "The label of the data item.",
              "type": "string"
            },
            "location": {
              "description": "The location of the data item which can be null if x/y are set instead.",
              "type": "string|null"
            },
            "parentElement": {
              "description": "An element that is part of a displayed subtree on the DOM. Modifications of the parentElement are not supported.",
              "type": "Element"
            },
            "previousState": {
              "description": "An object that reflects the previous state of the data item.",
              "type": "object",
              "properties": {
                "hovered": {
                  "description": "True if the data item was previously hovered.",
                  "type": "boolean"
                },
                "selected": {
                  "description": "True if the data item was previously selected.",
                  "type": "boolean"
                },
                "focused": {
                  "description": "True if the data item was previously selected.",
                  "type": "boolean"
                }
              }
            },
            "renderDefaultFocus": {
              "description": "Function for rendering default focus effect for the data item",
              "type": "function"
            },
            "renderDefaultHover": {
              "description": "Function for rendering default hover effect for the data item",
              "type": "function"
            },
            "renderDefaultSelection": {
              "description": "Function for rendering default selection effect for the data item",
              "type": "function"
            },
            "root": {
              "description": "Null on initial rendering or the current data item SVG element.",
              "type": "Element|null"
            },
            "state": {
              "description": "An object that reflects the current state of the data item.",
              "type": "object",
              "properties": {
                "hovered": {
                  "description": "True if the data item is currently hovered.",
                  "type": "boolean"
                },
                "selected": {
                  "description": "True if the data item is currently selected.",
                  "type": "boolean"
                },
                "focused": {
                  "description": "True if the data item is currently selected.",
                  "type": "boolean"
                }
              }
            },
            "x": {
              "description": "The x coordinate of the data item which can be null if location is set instead.",
              "type": "number|null"
            },
            "y": {
              "description": "The y coordinate of the data item which can be null if location is set instead.",
              "type": "number|null"
            }
          }
        },
        "markerTemplate": {
          "description": "The markerTemplate slot is used to specify the template for creating markers of the thematic map. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "markerTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-thematic-map> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current marker",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent marker",
              "type": "number"
            },
            "key": {
              "description": "The key of the current marker",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "color": {
              "description": "The color of the hovered item or null if the hovered item if not associated with any data.",
              "type": "string|null"
            },
            "componentElement": {
              "description": "The thematic map element.",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the hovered item or null if the hovered item is not associated with any data.",
              "type": "object|null"
            },
            "id": {
              "description": "The id of the hovered item or null if the hovered item if not associated with any data.",
              "type": "any|null"
            },
            "itemData": {
              "description": "The row data object for the hovered item. This will only be set if an oj.DataProvider is being used.",
              "type": "object|null"
            },
            "label": {
              "description": "The data label of the hovered item or null if the hovered item if not associated with any data.",
              "type": "string|null"
            },
            "location": {
              "description": "The location id of the hovered item which can be null if x/y are set instead.",
              "type": "string|null"
            },
            "locationName": {
              "description": "The location name of the hovered item if location id is set.",
              "type": "string|null"
            },
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "tooltip": {
              "description": "The default tooltip string constructed by the element if any.",
              "type": "string"
            },
            "x": {
              "description": "The x coordinate of the hovered item which can be null if location is set instead.",
              "type": "number"
            },
            "y": {
              "description": "The y coordinate of the hovered item which can be null if location is set instead.",
              "type": "number"
            }
          }
        }
      }
    },
    "oj-thematic-map-area": {
      "name": "oj-thematic-map-area",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Thematic Map Area",
      "type": "core",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojthematicmap"
        }
      },
      "description": "ojThematicMapArea",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojThematicMapArea.html",
      "properties": {
        "categories": {
          "description": "An array of category strings corresponding to this area. This allows highlighting and filtering of areas. By default, the label is used as the area category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "categories"
        },
        "color": {
          "description": "The area color.",
          "type": "string",
          "displayName": "Color",
          "value": null,
          "format": "color",
          "help": "color"
        },
        "label": {
          "description": "Text used for the area's label.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "label"
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the area label.",
          "type": "object",
          "displayName": "Label Style",
          "value": null,
          "help": "labelStyle"
        },
        "location": {
          "description": "An identifier corresponding to a mapProvider \"Feature\" geo object that this area is associated with.",
          "type": "string",
          "displayName": "Location",
          "value": "",
          "help": "location"
        },
        "opacity": {
          "description": "The area opacity.",
          "type": "number",
          "displayName": "Opacity",
          "value": 1,
          "maximum": 1,
          "minimum": 0,
          "help": "opacity"
        },
        "selectable": {
          "description": "Specifies whether or not the area will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The text that displays in the area's tooltip.",
          "type": "string",
          "displayName": "Short Desc",
          "value": "",
          "help": "shortDesc"
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the area.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the area.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        }
      }
    },
    "oj-thematic-map-link": {
      "name": "oj-thematic-map-link",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Thematic Map Link",
      "type": "core",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojthematicmap"
        }
      },
      "description": "ojThematicMapLink",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojThematicMapLink.html",
      "properties": {
        "categories": {
          "description": "An array of category strings corresponding to this link. This allows highlighting and filtering of links. By default, the label is used as the link category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "categories"
        },
        "color": {
          "description": "The link color.",
          "type": "string",
          "displayName": "Color",
          "value": "",
          "format": "color",
          "help": "color"
        },
        "endLocation": {
          "description": "An object used to determine the end point of the link.",
          "type": "object",
          "displayName": "End Location",
          "value": {},
          "help": "endLocation",
          "properties": {
            "id": {
              "description": "The marker or area id to be used as the end point.",
              "type": "any",
              "displayName": "Id",
              "help": "endLocation.id"
            },
            "location": {
              "description": "An identifier corresponding to a mapProvider \"Feature\" geo object to be used as the end point.",
              "type": "string",
              "displayName": "Location",
              "help": "endLocation.location"
            },
            "x": {
              "description": "The x coordinate which can represent latitude of the end point.",
              "type": "number",
              "displayName": "X",
              "help": "endLocation.x"
            },
            "y": {
              "description": "The y coordinate which can represent latitude of the end point.",
              "type": "number",
              "displayName": "Y",
              "help": "endLocation.y"
            }
          }
        },
        "selectable": {
          "description": "Specifies whether or not the link will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The text that displays in the link's tooltip.",
          "type": "string",
          "displayName": "Short Desc",
          "value": "",
          "help": "shortDesc"
        },
        "startLocation": {
          "description": "An object used to determine the start point of the link.",
          "type": "object",
          "displayName": "Start Location",
          "value": {},
          "help": "startLocation",
          "properties": {
            "id": {
              "description": "The marker or area id to be used as the start point.",
              "type": "any",
              "displayName": "Id",
              "help": "startLocation.id"
            },
            "location": {
              "description": "An identifier corresponding to a mapProvider \"Feature\" geo object to be used as the start point.",
              "type": "string",
              "displayName": "Location",
              "help": "startLocation.location"
            },
            "x": {
              "description": "The x coordinate which can represent latitude of the start point.",
              "type": "number",
              "displayName": "X",
              "help": "startLocation.x"
            },
            "y": {
              "description": "The y coordinate which can represent latitude of the start point.",
              "type": "number",
              "displayName": "Y",
              "help": "startLocation.y"
            }
          }
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the link.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the link.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        },
        "width": {
          "description": "The link width in pixels.",
          "type": "number",
          "displayName": "Width",
          "value": 2,
          "units": "pixels",
          "help": "width"
        }
      }
    },
    "oj-thematic-map-marker": {
      "name": "oj-thematic-map-marker",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Thematic Map Marker",
      "type": "core",
      "since": "5.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojthematicmap"
        }
      },
      "description": "ojThematicMapMarker",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojThematicMapMarker.html",
      "properties": {
        "borderColor": {
          "description": "The marker border color.",
          "type": "string",
          "displayName": "Border Color",
          "format": "color",
          "help": "borderColor"
        },
        "borderStyle": {
          "description": "The marker border style.",
          "type": "string",
          "displayName": "Border Style",
          "help": "borderStyle",
          "enumValues": [
            "none",
            "solid"
          ],
          "propertyEditorValues": {
            "none": {
              "displayName": "None"
            },
            "solid": {
              "displayName": "Solid"
            }
          }
        },
        "borderWidth": {
          "description": "The marker border width in pixels.",
          "type": "number",
          "displayName": "Border Width",
          "units": "pixels",
          "help": "borderWidth"
        },
        "categories": {
          "description": "An array of category strings corresponding to this marker. This allows highlighting and filtering of markers. By default, the label is used as the marker category.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "categories"
        },
        "color": {
          "description": "The marker color.",
          "type": "string",
          "displayName": "Color",
          "value": null,
          "format": "color",
          "help": "color"
        },
        "height": {
          "description": "The marker height in pixels.",
          "type": "number",
          "displayName": "Height",
          "units": "pixels",
          "help": "height"
        },
        "label": {
          "description": "Text used for the marker's label.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "label"
        },
        "labelPosition": {
          "description": "Determines the label position relative to the marker.",
          "type": "string",
          "displayName": "Label Position",
          "value": "center",
          "help": "labelPosition",
          "enumValues": [
            "bottom",
            "center",
            "top"
          ],
          "propertyEditorValues": {
            "bottom": {
              "displayName": "Bottom"
            },
            "center": {
              "displayName": "Center"
            },
            "top": {
              "displayName": "Top"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the marker label.",
          "type": "object",
          "displayName": "Label Style",
          "value": null,
          "help": "labelStyle"
        },
        "location": {
          "description": "An identifier corresponding to a mapProvider \"Feature\" geo object that this marker is associated with.",
          "type": "string",
          "displayName": "Location",
          "value": "",
          "help": "location"
        },
        "opacity": {
          "description": "The marker opacity.",
          "type": "number",
          "displayName": "Opacity",
          "maximum": 1,
          "minimum": 0,
          "help": "opacity"
        },
        "rotation": {
          "description": "The angle in degrees to rotate the marker clockwise around the marker center.",
          "type": "number",
          "displayName": "Rotation",
          "value": 0,
          "maximum": 360,
          "minimum": 0,
          "units": "degree",
          "help": "rotation"
        },
        "selectable": {
          "description": "Specifies whether or not the marker will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shape": {
          "description": "Specifies the shape of a marker. Can take the name of a built-in shape or the svg path commands for a custom shape.",
          "type": "string",
          "displayName": "Shape",
          "help": "shape"
        },
        "shortDesc": {
          "description": "The text that displays in the marker's tooltip.",
          "type": "string",
          "displayName": "Short Desc",
          "value": "",
          "help": "shortDesc"
        },
        "source": {
          "description": "Specifies a URI for the location of the image resource to use for the marker instead of a built-in shape. The shape attribute is ignored if the source image is defined.",
          "type": "string",
          "displayName": "Source",
          "value": "",
          "help": "source"
        },
        "sourceHover": {
          "description": "An optional URI for the location of the hover image resource. If not defined, the source image will be used.",
          "type": "string",
          "displayName": "Source Hover",
          "value": "",
          "help": "sourceHover"
        },
        "sourceHoverSelected": {
          "description": "An optional URI for the location of the selected image resource on hover. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Source Hover Selected",
          "value": "",
          "help": "sourceHoverSelected"
        },
        "sourceSelected": {
          "description": "An optional URI for the location of the selected image. If not defined, the source image will be used.",
          "type": "string",
          "displayName": "Source Selected",
          "value": "",
          "help": "sourceSelected"
        },
        "svgClassName": {
          "description": "The CSS style class defining the style of the marker.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The CSS style object defining the style of the marker.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        },
        "value": {
          "description": "A data value used to calculate the marker dimensions. See the Help documentation for more information.",
          "type": "number",
          "displayName": "Value",
          "help": "value"
        },
        "width": {
          "description": "The marker width in pixels.",
          "type": "number",
          "displayName": "Width",
          "units": "pixels",
          "help": "width"
        },
        "x": {
          "description": "The x coordinate of the marker transformed using the map projection, which can be null if location is set instead.",
          "type": "number|null",
          "displayName": "X",
          "value": null,
          "help": "x"
        },
        "y": {
          "description": "The y coordinate of the marker transformed using the map projection, which can be null if location is set instead.",
          "type": "number|null",
          "displayName": "Y",
          "value": null,
          "help": "y"
        }
      }
    },
    "oj-time-axis": {
      "name": "oj-time-axis",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Time Axis",
      "type": "core",
      "since": "2.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtimeaxis"
        }
      },
      "description": "A time axis displays a range of dates based on specified start and end dates and a time scale.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTimeAxis.html",
      "properties": {
        "converter": {
          "description": "An object that converts the labels of the time axis for all 'scale' values'. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Converter",
          "value": "{\"default\": null, \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}), \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}), \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}), \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})}",
          "help": "converter",
          "properties": {
            "default": {
              "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "object"
            },
            "seconds": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'seconds' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "object",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'})"
            },
            "minutes": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'minutes' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "object",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'})"
            },
            "hours": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'hours' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "object",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'})"
            },
            "days": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'days' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "object",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'})"
            },
            "weeks": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'weeks' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "object",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'})"
            },
            "months": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'months' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "object",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'})"
            },
            "quarters": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'quarters' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "object",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'})"
            },
            "years": {
              "description": "The converter (an object literal or instance that duck types Converter) used for the 'years' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
              "type": "object",
              "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})"
            }
          }
        },
        "end": {
          "description": "The end time of the time axis. See the Help documentation for more information.",
          "type": "string",
          "displayName": "End",
          "value": "",
          "format": "date-time",
          "help": "end"
        },
        "scale": {
          "description": "The time scale used for the time axis.",
          "type": "string",
          "displayName": "Scale",
          "value": null,
          "help": "scale",
          "enumValues": [
            "days",
            "hours",
            "minutes",
            "months",
            "quarters",
            "seconds",
            "weeks",
            "years"
          ],
          "propertyEditorValues": {
            "days": {
              "displayName": "Days"
            },
            "hours": {
              "displayName": "Hours"
            },
            "minutes": {
              "displayName": "Minutes"
            },
            "months": {
              "displayName": "Months"
            },
            "quarters": {
              "displayName": "Quarters"
            },
            "seconds": {
              "displayName": "Seconds"
            },
            "weeks": {
              "displayName": "Weeks"
            },
            "years": {
              "displayName": "Years"
            }
          }
        },
        "start": {
          "description": "The start time of the time axis. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Start",
          "value": "",
          "format": "date-time",
          "help": "start"
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            }
          }
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-timeline": {
      "name": "oj-timeline",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Timeline",
      "type": "core",
      "since": "1.1.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtimeline"
        }
      },
      "description": "A timeline is an interactive data visualization that displays a series of events in chronological order.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTimeline.html",
      "properties": {
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "data": {
          "description": "Specifies the data provider for the timeline. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "end": {
          "description": "The end time of the timeline. See the Help documentation for more information.",
          "type": "string",
          "displayName": "End",
          "value": "",
          "format": "date-time",
          "help": "end"
        },
        "majorAxis": {
          "description": "An object defining the optional timeline major axis.",
          "type": "object",
          "displayName": "Major Axis",
          "help": "majorAxis",
          "properties": {
            "converter": {
              "description": "An object that converts the labels of the major axis for all 'scale' values'. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "value": "{\"default\": null, \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}), \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}), \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}), \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})}",
              "help": "majorAxis.converter",
              "properties": {
                "default": {
                  "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object"
                },
                "seconds": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'seconds' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'})"
                },
                "minutes": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'minutes' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'})"
                },
                "hours": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'hours' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'})"
                },
                "days": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'days' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'})"
                },
                "weeks": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'weeks' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'})"
                },
                "months": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'months' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'})"
                },
                "quarters": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'quarters' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'})"
                },
                "years": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'years' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})"
                }
              }
            },
            "scale": {
              "description": "Specifies the time scale used for the major axis.",
              "type": "string",
              "displayName": "Scale",
              "value": null,
              "help": "majorAxis.scale",
              "enumValues": [
                "days",
                "hours",
                "minutes",
                "months",
                "quarters",
                "seconds",
                "weeks",
                "years"
              ],
              "propertyEditorValues": {
                "days": {
                  "displayName": "Days"
                },
                "hours": {
                  "displayName": "Hours"
                },
                "minutes": {
                  "displayName": "Minutes"
                },
                "months": {
                  "displayName": "Months"
                },
                "quarters": {
                  "displayName": "Quarters"
                },
                "seconds": {
                  "displayName": "Seconds"
                },
                "weeks": {
                  "displayName": "Weeks"
                },
                "years": {
                  "displayName": "Years"
                }
              }
            },
            "svgStyle": {
              "description": "The CSS style object defining any additional styling of the major axis.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "majorAxis.svgStyle"
            }
          }
        },
        "minorAxis": {
          "description": "An object defining the timeline minor axis.",
          "type": "object",
          "displayName": "Minor Axis",
          "help": "minorAxis",
          "properties": {
            "converter": {
              "description": "An object that converts the labels of the minor axis for all 'scale' values. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Converter",
              "value": "{\"default\": null, \"seconds\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'}), \"minutes\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'}), \"hours\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'}), \"days\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"weeks\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'}), \"months\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"quarters\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'}), \"years\": oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})}",
              "help": "minorAxis.converter",
              "properties": {
                "default": {
                  "description": "The default converter (an object literal or instance that duck types Converter) to use for all 'scale' values that do not otherwise have a converter object provided. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object"
                },
                "seconds": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'seconds' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit', 'second': '2-digit'})"
                },
                "minutes": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'minutes' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric', 'minute': '2-digit'})"
                },
                "hours": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'hours' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'hour': 'numeric'})"
                },
                "days": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'days' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'})"
                },
                "weeks": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'weeks' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'numeric', 'day': '2-digit'})"
                },
                "months": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'months' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'})"
                },
                "quarters": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'quarters' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'month': 'long'})"
                },
                "years": {
                  "description": "The converter (an object literal or instance that duck types Converter) used for the 'years' scale. If not specified, the default converter will be used for this scale. See DateTimeConverterFactory for details on creating built-in datetime converters.",
                  "type": "object",
                  "value": "oj.Validation.converterFactory(oj.ConverterFactory.CONVERTER_TYPE_DATETIME).createConverter({'year': 'numeric'})"
                }
              }
            },
            "scale": {
              "description": "Specifies the time scale used for the minor axis.",
              "type": "string",
              "displayName": "Scale",
              "value": null,
              "help": "minorAxis.scale",
              "enumValues": [
                "days",
                "hours",
                "minutes",
                "months",
                "quarters",
                "seconds",
                "weeks",
                "years"
              ],
              "propertyEditorValues": {
                "days": {
                  "displayName": "Days"
                },
                "hours": {
                  "displayName": "Hours"
                },
                "minutes": {
                  "displayName": "Minutes"
                },
                "months": {
                  "displayName": "Months"
                },
                "quarters": {
                  "displayName": "Quarters"
                },
                "seconds": {
                  "displayName": "Seconds"
                },
                "weeks": {
                  "displayName": "Weeks"
                },
                "years": {
                  "displayName": "Years"
                }
              }
            },
            "svgStyle": {
              "description": "The CSS style object defining any additional styling of the minor axis.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "minorAxis.svgStyle"
            },
            "zoomOrder": {
              "description": "An array of strings containing the names of scales used for zooming. See the Help documentation for more information.",
              "type": "Array<string>",
              "displayName": "Zoom Order",
              "value": null,
              "help": "minorAxis.zoomOrder"
            }
          }
        },
        "orientation": {
          "description": "The orientation of the element.",
          "type": "string",
          "displayName": "Orientation",
          "value": "horizontal",
          "help": "orientation",
          "enumValues": [
            "horizontal",
            "vertical"
          ],
          "propertyEditorValues": {
            "horizontal": {
              "displayName": "Horizontal"
            },
            "vertical": {
              "displayName": "Vertical"
            }
          }
        },
        "overview": {
          "description": "An object defining the optional timeline overview.",
          "type": "object",
          "displayName": "Overview",
          "help": "overview",
          "properties": {
            "rendered": {
              "description": "Specifies whether the overview scrollbar is rendered.",
              "type": "string",
              "displayName": "Rendered",
              "value": "off",
              "help": "overview.rendered",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "svgStyle": {
              "description": "The CSS style object defining any additional styling of the overview.",
              "type": "object",
              "displayName": "Svg Style",
              "value": {},
              "help": "overview.svgStyle"
            }
          }
        },
        "referenceObjects": {
          "description": "The array of reference objects associated with the timeline. Currently only the first reference object in the array is supported. See the Help documentation for more information.",
          "type": "Array<Object>",
          "displayName": "Reference Objects",
          "value": [],
          "help": "referenceObjects",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "value": {
                  "description": "The time value of this reference object. If not specified, no reference object will be shown. See Date and Time Formats for more details on the required string formats.",
                  "type": "string"
                }
              }
            }
          }
        },
        "selection": {
          "description": "An array of strings containing the ids of the initially selected items.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "displayName": "Multiple"
            },
            "none": {
              "displayName": "None"
            },
            "single": {
              "displayName": "Single"
            }
          }
        },
        "series": {
          "description": "An array of objects defining each timeline series. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise",
          "displayName": "Series",
          "value": null,
          "help": "series",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "The identifier for the timeline series.",
                  "type": "string"
                },
                "items": {
                  "description": "An array of items. If not specified, no data will be shown in this series.",
                  "type": "Array<Object>",
                  "properties": {
                    "id": {
                      "description": "The identifier for the timeline item. This must be unique across all items in the timeline, and is required in order for the timeline to properly render.",
                      "type": "any"
                    },
                    "title": {
                      "description": "The title text displayed on the timeline item. If not specified, no title will be shown.",
                      "type": "string"
                    },
                    "description": {
                      "description": "The description text displayed on the timeline item. If not specified, no description will be shown.",
                      "type": "string",
                      "value": ""
                    },
                    "durationFillColor": {
                      "description": "The color applied to the duration bar of the timeline item. If not specified, this will be determined by the color ramp of the series.",
                      "type": "string",
                      "value": null
                    },
                    "end": {
                      "description": "The end time of this timeline item. If not specified, no duration bar will be shown. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "shortDesc": {
                      "description": "The description of the item. This is used for accessibility and for customizing the tooltip text.",
                      "type": "string",
                      "value": null
                    },
                    "start": {
                      "description": "The start time of this timeline item. See the Help documentation for more information.",
                      "type": "string",
                      "value": "",
                      "format": "date-time"
                    },
                    "svgStyle": {
                      "description": "The CSS style defining any additional styling of the item. If not specified, no additional styling will be applied.",
                      "type": "object"
                    },
                    "thumbnail": {
                      "description": "An optional URI specifying the location of an image resource to be displayed on the item. See the Help documentation for more information.",
                      "type": "string",
                      "value": ""
                    }
                  }
                },
                "emptyText": {
                  "description": "The text of an empty timeline series.",
                  "type": "string"
                },
                "itemLayout": {
                  "description": "The direction in which items are laid out when in a horizontal orientation. This attribute is ignored when in a vertical orientation.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "bottomToTop",
                    "topToBottom"
                  ]
                },
                "label": {
                  "description": "The label displayed on the timeline series. In not specified, no label will be shown.",
                  "type": "string",
                  "value": ""
                },
                "svgStyle": {
                  "description": "The CSS style object defining any additional styling of the series. If not specified, no additional styling will be applied.",
                  "type": "object",
                  "value": {}
                }
              }
            }
          }
        },
        "start": {
          "description": "The start time of the timeline. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Start",
          "value": "",
          "format": "date-time",
          "help": "start"
        },
        "styleDefaults": {
          "description": "An object defining the default styling for this timeline.",
          "type": "object",
          "displayName": "Style Defaults",
          "help": "styleDefaults",
          "properties": {
            "animationDuration": {
              "description": "The duration of the animations in milliseconds.",
              "type": "number",
              "displayName": "Animation Duration",
              "units": "milliseconds",
              "help": "styleDefaults.animationDuration"
            },
            "borderColor": {
              "description": "The border color of the timeline.",
              "type": "string",
              "displayName": "Border Color",
              "format": "color",
              "help": "styleDefaults.borderColor"
            },
            "item": {
              "description": "An object defining the default styling for this timeline's items.",
              "type": "object",
              "displayName": "Item",
              "value": {},
              "help": "styleDefaults.item",
              "properties": {
                "backgroundColor": {
                  "description": "The background color of the timeline items.",
                  "type": "string",
                  "displayName": "Background Color",
                  "format": "color",
                  "help": "styleDefaults.item.backgroundColor"
                },
                "borderColor": {
                  "description": "The border color of the timeline items.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "styleDefaults.item.borderColor"
                },
                "descriptionStyle": {
                  "description": "The CSS style object defining the style of the timeline item description text.",
                  "type": "object",
                  "displayName": "Description Style",
                  "help": "styleDefaults.item.descriptionStyle"
                },
                "hoverBackgroundColor": {
                  "description": "The background color of the highlighted timeline items.",
                  "type": "string",
                  "displayName": "Hover Background Color",
                  "format": "color",
                  "help": "styleDefaults.item.hoverBackgroundColor"
                },
                "hoverBorderColor": {
                  "description": "The border color of the highlighted timeline items.",
                  "type": "string",
                  "displayName": "Hover Border Color",
                  "format": "color",
                  "help": "styleDefaults.item.hoverBorderColor"
                },
                "selectedBackgroundColor": {
                  "description": "The background color of the selected timeline items.",
                  "type": "string",
                  "displayName": "Selected Background Color",
                  "format": "color",
                  "help": "styleDefaults.item.selectedBackgroundColor"
                },
                "selectedBorderColor": {
                  "description": "The border color of the selected timeline items.",
                  "type": "string",
                  "displayName": "Selected Border Color",
                  "format": "color",
                  "help": "styleDefaults.item.selectedBorderColor"
                },
                "titleStyle": {
                  "description": "The CSS style object defining the style of the timeline item title text.",
                  "type": "object",
                  "displayName": "Title Style",
                  "help": "styleDefaults.item.titleStyle"
                }
              }
            },
            "majorAxis": {
              "description": "An object defining the default styling for this timeline's major axis.",
              "type": "object",
              "displayName": "Major Axis",
              "value": {},
              "help": "styleDefaults.majorAxis",
              "properties": {
                "labelStyle": {
                  "description": "The CSS style object defining the style of the major axis label text.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "styleDefaults.majorAxis.labelStyle"
                },
                "separatorColor": {
                  "description": "The color of the major axis separators.",
                  "type": "string",
                  "displayName": "Separator Color",
                  "format": "color",
                  "help": "styleDefaults.majorAxis.separatorColor"
                }
              }
            },
            "minorAxis": {
              "description": "An object defining the default styling for this timeline's minor axis.",
              "type": "object",
              "displayName": "Minor Axis",
              "value": {},
              "help": "styleDefaults.minorAxis",
              "properties": {
                "backgroundColor": {
                  "description": "The background color of the minor axis.",
                  "type": "string",
                  "displayName": "Background Color",
                  "format": "color",
                  "help": "styleDefaults.minorAxis.backgroundColor"
                },
                "borderColor": {
                  "description": "The border color of the minor axis.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "styleDefaults.minorAxis.borderColor"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the minor axis label text.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "styleDefaults.minorAxis.labelStyle"
                },
                "separatorColor": {
                  "description": "The color of the minor axis separators.",
                  "type": "string",
                  "displayName": "Separator Color",
                  "format": "color",
                  "help": "styleDefaults.minorAxis.separatorColor"
                }
              }
            },
            "overview": {
              "description": "An object defining the default styling for this timeline's overview.",
              "type": "object",
              "displayName": "Overview",
              "help": "styleDefaults.overview",
              "properties": {
                "backgroundColor": {
                  "description": "The background color of the timeline overview.",
                  "type": "string",
                  "displayName": "Background Color",
                  "format": "color",
                  "help": "styleDefaults.overview.backgroundColor"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the timeline overview label text.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "styleDefaults.overview.labelStyle"
                },
                "window": {
                  "description": "An object defining the default styling for the timeline overview window.",
                  "type": "object",
                  "displayName": "Window",
                  "value": {},
                  "help": "styleDefaults.overview.window",
                  "properties": {
                    "backgroundColor": {
                      "description": "The background color of the timeline overview window.",
                      "type": "string",
                      "displayName": "Background Color",
                      "format": "color",
                      "help": "styleDefaults.overview.window.backgroundColor"
                    },
                    "borderColor": {
                      "description": "The border color of the timeline overview window.",
                      "type": "string",
                      "displayName": "Border Color",
                      "format": "color",
                      "help": "styleDefaults.overview.window.borderColor"
                    }
                  }
                }
              }
            },
            "referenceObject": {
              "description": "An object defining the default styling for this timeline's reference objects.",
              "type": "object",
              "displayName": "Reference Object",
              "value": {},
              "help": "styleDefaults.referenceObject",
              "properties": {
                "color": {
                  "description": "The color of the reference objects.",
                  "type": "string",
                  "displayName": "Color",
                  "format": "color",
                  "help": "styleDefaults.referenceObject.color"
                }
              }
            },
            "series": {
              "description": "An object defining the default styling for this timeline's series.",
              "type": "object",
              "displayName": "Series",
              "value": {},
              "help": "styleDefaults.series",
              "properties": {
                "backgroundColor": {
                  "description": "The background color of the series.",
                  "type": "string",
                  "displayName": "Background Color",
                  "format": "color",
                  "help": "styleDefaults.series.backgroundColor"
                },
                "colors": {
                  "description": "The array defining the default color ramp for the series items.",
                  "type": "Array<string>",
                  "displayName": "Colors",
                  "help": "styleDefaults.series.colors"
                },
                "emptyTextStyle": {
                  "description": "The CSS style object defining the style of the series empty text.",
                  "type": "object",
                  "displayName": "Empty Text Style",
                  "help": "styleDefaults.series.emptyTextStyle"
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the series label text.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "styleDefaults.series.labelStyle"
                }
              }
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "value": {
            "renderer": null
          },
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip for the timeline. The function takes a context argument, provided by the timeline. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "accessibleItemDesc": {
              "description": "Provides properties to customize the screen reader text describing an item's description text.",
              "type": "string",
              "help": "translations.accessibleItemDesc"
            },
            "accessibleItemEnd": {
              "description": "Provides properties to customize the screen reader text describing an item's end time.",
              "type": "string",
              "help": "translations.accessibleItemEnd"
            },
            "accessibleItemStart": {
              "description": "Provides properties to customize the screen reader text describing an item's start time.",
              "type": "string",
              "help": "translations.accessibleItemStart"
            },
            "accessibleItemTitle": {
              "description": "Provides properties to customize the screen reader text describing an item's title text.",
              "type": "string",
              "help": "translations.accessibleItemTitle"
            },
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelDate": {
              "description": "Used for the default tooltip label for instance item information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDate"
            },
            "labelDescription": {
              "description": "Used for the default tooltip label for item description information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDescription"
            },
            "labelEnd": {
              "description": "Used for the default tooltip label for end time information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelEnd"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "labelSeries": {
              "description": "Used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSeries"
            },
            "labelStart": {
              "description": "Used for the default tooltip label for start time information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelStart"
            },
            "labelTitle": {
              "description": "Used for the default tooltip label for item title information. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelTitle"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            },
            "tooltipZoomIn": {
              "description": "Used for the zoom in tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipZoomIn"
            },
            "tooltipZoomOut": {
              "description": "Used for the zoom out tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipZoomOut"
            }
          }
        },
        "valueFormats": {
          "description": "An object specifying value formatting and tooltip behavior, whose keys generally correspond to item properties.",
          "type": "object",
          "displayName": "Value Formats",
          "help": "valueFormats",
          "properties": {
            "date": {
              "description": "Specifies tooltip behavior for the date value of an instance item.",
              "type": "object",
              "displayName": "Date",
              "help": "valueFormats.date",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.date.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the date value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.date.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the date value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.date.tooltipLabel"
                }
              }
            },
            "description": {
              "description": "Specifies tooltip behavior for the description value.",
              "type": "object",
              "displayName": "Description",
              "help": "valueFormats.description",
              "properties": {
                "tooltipDisplay": {
                  "description": "Specifies whether the description value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "off",
                  "help": "valueFormats.description.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the description value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.description.tooltipLabel"
                }
              }
            },
            "end": {
              "description": "Specifies tooltip behavior for the end value.",
              "type": "object",
              "displayName": "End",
              "help": "valueFormats.end",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.end.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the end value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.end.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the end value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.end.tooltipLabel"
                }
              }
            },
            "series": {
              "description": "Specifies tooltip behavior for the series value.",
              "type": "object",
              "displayName": "Series",
              "help": "valueFormats.series",
              "properties": {
                "tooltipDisplay": {
                  "description": "Specifies whether the series value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "off",
                  "help": "valueFormats.series.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the series value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.series.tooltipLabel"
                }
              }
            },
            "start": {
              "description": "Specifies tooltip behavior for the start value.",
              "type": "object",
              "displayName": "Start",
              "help": "valueFormats.start",
              "properties": {
                "converter": {
                  "description": "The converter used to format the label. See the Help documentation for more information.",
                  "type": "object",
                  "displayName": "Converter",
                  "value": null,
                  "help": "valueFormats.start.converter"
                },
                "tooltipDisplay": {
                  "description": "Specifies whether the start value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "auto",
                  "help": "valueFormats.start.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the start value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.start.tooltipLabel"
                }
              }
            },
            "title": {
              "description": "Specifies tooltip behavior for the title value.",
              "type": "object",
              "displayName": "Title",
              "help": "valueFormats.title",
              "properties": {
                "tooltipDisplay": {
                  "description": "Specifies whether the title value is displayed in the tooltip.",
                  "type": "string",
                  "displayName": "Tooltip Display",
                  "value": "off",
                  "help": "valueFormats.title.tooltipDisplay",
                  "enumValues": [
                    "auto",
                    "off"
                  ],
                  "propertyEditorValues": {
                    "auto": {
                      "displayName": "Auto"
                    },
                    "off": {
                      "displayName": "Off"
                    }
                  }
                },
                "tooltipLabel": {
                  "description": "A string representing the label that is displayed before the title value in the tooltip. See the Help documentation for more information.",
                  "type": "string",
                  "displayName": "Tooltip Label",
                  "translatable": true,
                  "help": "valueFormats.title.tooltipLabel"
                }
              }
            }
          }
        },
        "viewportEnd": {
          "description": "The end time of the timeline's viewport. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Viewport End",
          "value": "",
          "format": "date-time",
          "help": "viewportEnd"
        },
        "viewportStart": {
          "description": "The start time of the timeline's viewport. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Viewport Start",
          "value": "",
          "format": "date-time",
          "help": "viewportStart"
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojViewportChange": {
          "description": "Triggered after the viewport is changed due to a zoom or scroll operation.",
          "bubbles": true,
          "help": "viewportChange",
          "detail": {
            "viewportStart": {
              "description": "the start of the new viewport on a timeline",
              "type": "string"
            },
            "viewportEnd": {
              "description": "the end of the new viewport on a timeline",
              "type": "string"
            },
            "minorAxisScale": {
              "description": "the time scale of the minor axis",
              "type": "string"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for creating each item of the timeline. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-timeline> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object for the current item",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent item",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item",
              "type": "any"
            }
          }
        },
        "seriesTemplate": {
          "description": "The seriesTemplate slot is used to specify the template for generating the series properties of the timeline. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "seriesTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-timeline> custom element",
              "type": "Element"
            },
            "index": {
              "description": "The series index",
              "type": "number"
            },
            "id": {
              "description": "The series id",
              "type": "any"
            },
            "items": {
              "description": "The array of objects which are timeline items that belong to this series. The objects will have the following properties",
              "type": "Array<Object>",
              "extension": {
                "vbdt": {
                  "itemProperties": {
                    "data": {
                      "description": "The data object for the item",
                      "type": "object"
                    },
                    "index": {
                      "description": "The zero-based index of the item",
                      "type": "number"
                    },
                    "key": {
                      "description": "The key of the item",
                      "type": "any"
                    }
                  }
                }
              }
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. This can be used to change the tooltip border or background color.",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the hovered item.",
              "type": "oj.ojTimeline.SeriesItem",
              "properties": {
                "id": {
                  "description": "The identifier for the timeline item. This must be unique across all items in the timeline, and is required in order for the timeline to properly render.",
                  "type": "any"
                },
                "title": {
                  "description": "The title text displayed on the timeline item. If not specified, no title will be shown.",
                  "type": "string"
                },
                "description": {
                  "description": "The description text displayed on the timeline item. If not specified, no description will be shown.",
                  "type": "string",
                  "value": ""
                },
                "durationFillColor": {
                  "description": "The color applied to the duration bar of the timeline item. If not specified, this will be determined by the color ramp of the series.",
                  "type": "string",
                  "value": null
                },
                "end": {
                  "description": "The end time of this timeline item. If not specified, no duration bar will be shown. See the Help documentation for more information.",
                  "type": "string",
                  "value": "",
                  "format": "date-time"
                },
                "shortDesc": {
                  "description": "The description of the item. This is used for accessibility and for customizing the tooltip text.",
                  "type": "string",
                  "value": null
                },
                "start": {
                  "description": "The start time of this timeline item. See the Help documentation for more information.",
                  "type": "string",
                  "value": "",
                  "format": "date-time"
                },
                "svgStyle": {
                  "description": "The CSS style defining any additional styling of the item. If not specified, no additional styling will be applied.",
                  "type": "object"
                },
                "thumbnail": {
                  "description": "An optional URI specifying the location of an image resource to be displayed on the item. See the Help documentation for more information.",
                  "type": "string",
                  "value": ""
                }
              }
            },
            "seriesData": {
              "description": "The data for the series the hovered item belongs to.",
              "type": "oj.ojTimeline.Series",
              "properties": {
                "id": {
                  "description": "The identifier for the timeline series.",
                  "type": "string"
                },
                "items": {
                  "description": "An array of items. If not specified, no data will be shown in this series.",
                  "type": "Array<Object>",
                  "extension": {
                    "vbdt": {
                      "itemProperties": {
                        "id": {
                          "description": "The identifier for the timeline item. This must be unique across all items in the timeline, and is required in order for the timeline to properly render.",
                          "type": "any"
                        },
                        "title": {
                          "description": "The title text displayed on the timeline item. If not specified, no title will be shown.",
                          "type": "string"
                        },
                        "description": {
                          "description": "The description text displayed on the timeline item. If not specified, no description will be shown.",
                          "type": "string",
                          "value": ""
                        },
                        "durationFillColor": {
                          "description": "The color applied to the duration bar of the timeline item. If not specified, this will be determined by the color ramp of the series.",
                          "type": "string",
                          "value": null
                        },
                        "end": {
                          "description": "The end time of this timeline item. If not specified, no duration bar will be shown. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "shortDesc": {
                          "description": "The description of the item. This is used for accessibility and for customizing the tooltip text.",
                          "type": "string",
                          "value": null
                        },
                        "start": {
                          "description": "The start time of this timeline item. See the Help documentation for more information.",
                          "type": "string",
                          "value": "",
                          "format": "date-time"
                        },
                        "svgStyle": {
                          "description": "The CSS style defining any additional styling of the item. If not specified, no additional styling will be applied.",
                          "type": "object"
                        },
                        "thumbnail": {
                          "description": "An optional URI specifying the location of an image resource to be displayed on the item. See the Help documentation for more information.",
                          "type": "string",
                          "value": ""
                        }
                      }
                    }
                  }
                },
                "emptyText": {
                  "description": "The text of an empty timeline series.",
                  "type": "string"
                },
                "itemLayout": {
                  "description": "The direction in which items are laid out when in a horizontal orientation. This attribute is ignored when in a vertical orientation.",
                  "type": "\"auto\"|\"bottomToTop\"|\"topToBottom\"",
                  "value": "\"auto\""
                },
                "label": {
                  "description": "The label displayed on the timeline series. In not specified, no label will be shown.",
                  "type": "string",
                  "value": ""
                },
                "svgStyle": {
                  "description": "The CSS style object defining any additional styling of the series. If not specified, no additional styling will be applied.",
                  "type": "object",
                  "value": {}
                }
              }
            },
            "itemData": {
              "description": "The data provider row data object for the hovered item. This will only be set if an oj.DataProvider for data is being used.",
              "type": "object|null"
            },
            "componentElement": {
              "description": "The timeline element.",
              "type": "Element"
            },
            "color": {
              "description": "The color of the hovered item.",
              "type": "string"
            }
          }
        }
      }
    },
    "oj-timeline-item": {
      "name": "oj-timeline-item",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Timeline Item",
      "type": "core",
      "since": "7.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtimeline"
        }
      },
      "description": "ojTimelineItem",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTimelineItem.html",
      "properties": {
        "description": {
          "description": "The description text displayed on the timeline item. If not specified, no description will be shown.",
          "type": "string",
          "displayName": "Description",
          "value": "",
          "help": "description"
        },
        "durationFillColor": {
          "description": "The color applied to the duration bar of the timeline item. If not specified, this will be determined by the color ramp of the series.",
          "type": "string",
          "displayName": "Duration Fill Color",
          "value": null,
          "help": "durationFillColor"
        },
        "end": {
          "description": "The end time of this timeline item. If not specified, no duration bar will be shown. See the Help documentation for more information.",
          "type": "string",
          "displayName": "End",
          "value": "",
          "format": "date-time",
          "help": "end"
        },
        "label": {
          "description": "The label text displayed on the timeline item. If not specified, no label will be shown.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "label"
        },
        "seriesId": {
          "description": "The id for the series the item belongs to. If no id is specified, the item will be added to the default series.",
          "type": "string",
          "displayName": "Series Id",
          "help": "seriesId"
        },
        "shortDesc": {
          "description": "The description of the item. This is used for accessibility and for customizing the tooltip text.",
          "type": "string",
          "displayName": "Short Desc",
          "value": null,
          "help": "shortDesc"
        },
        "start": {
          "description": "The start time of this timeline item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Start",
          "value": "",
          "format": "date-time",
          "help": "start"
        },
        "svgStyle": {
          "description": "The CSS style defining any additional styling of the item. If not specified, no additional styling will be applied.",
          "type": "object",
          "displayName": "Svg Style",
          "help": "svgStyle"
        },
        "thumbnail": {
          "description": "An optional URI specifying the location of an image resource to be displayed on the item. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Thumbnail",
          "value": "",
          "help": "thumbnail"
        }
      }
    },
    "oj-timeline-series": {
      "name": "oj-timeline-series",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Timeline Series",
      "type": "core",
      "since": "7.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtimeline"
        }
      },
      "description": "ojTimelineSeries",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTimelineSeries.html",
      "properties": {
        "emptyText": {
          "description": "The text of an empty timeline series.",
          "type": "string",
          "displayName": "Empty Text",
          "help": "emptyText"
        },
        "itemLayout": {
          "description": "The direction in which items are laid out when in a horizontal orientation. This attribute is ignored when in a vertical orientation.",
          "type": "string",
          "displayName": "Item Layout",
          "value": "auto",
          "help": "itemLayout",
          "enumValues": [
            "auto",
            "bottomToTop",
            "topToBottom"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "bottomToTop": {
              "displayName": "Bottom To Top"
            },
            "topToBottom": {
              "displayName": "Top To Bottom"
            }
          }
        },
        "label": {
          "description": "The label displayed on the timeline series. In not specified, no label will be shown.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "label"
        },
        "svgStyle": {
          "description": "The CSS style object defining any additional styling of the series. If not specified, no additional styling will be applied.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        }
      }
    },
    "oj-toolbar": {
      "name": "oj-toolbar",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Toolbar",
      "type": "core",
      "since": "0.6.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtoolbar"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-toolbar-separator"
          ],
          "description": "Separators should be placed around any buttonsets in the toolbar, and anywhere else in the toolbar that a separator is desirable. For accessibility, additionally apply \"role\" and \"aria-orientation\" as shown."
        },
        {
          "styleGroup": [
            "oj-toolbar-top-border"
          ],
          "description": "Applies a top border to the toolbar, or to the \"oj-toolbars\" element, in themes not having this border by default."
        },
        {
          "styleGroup": [
            "oj-toolbar-bottom-border"
          ],
          "description": "Applies a bottom border to the toolbar, or to the \"oj-toolbars\" element, in themes not having this border by default."
        },
        {
          "styleGroup": [
            "oj-toolbar-no-chrome"
          ],
          "description": "Removes \"chrome\" (background and border) from the toolbar(s), in themes having this chrome by default."
        },
        {
          "styleGroup": [
            "oj-toolbars"
          ],
          "description": "An outer element representing a multiple toolbar layout. Contains one or more \"oj-toolbar-row\" elements."
        },
        {
          "styleGroup": [
            "oj-toolbar-row"
          ],
          "description": "Each \"oj-toolbar-row\" element is a row containing one or more toolbars. These rows go inside an \"oj-toolbars\" element."
        }
      ],
      "description": "A toolbar displays a strip of control elements such as buttons and menu buttons, often grouped by separators.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojToolbar.html",
      "properties": {
        "chroming": {
          "description": "Indicates in what states the toolbar's buttons and buttonsets has chrome (background and border).",
          "type": "string",
          "displayName": "Chroming",
          "help": "chroming",
          "enumValues": [
            "full",
            "half",
            "outlined"
          ],
          "propertyEditorValues": {
            "full": {
              "description": "In typical themes, full-chrome buttons always have chrome.",
              "displayName": "Full"
            },
            "half": {
              "description": "In typical themes, half-chrome buttons acquire chrome only in their hover, active, and selected states. Half-chroming is recommended for buttons in a toolbar. (This is the toolbar default in most themes.)",
              "displayName": "Half"
            },
            "outlined": {
              "description": "In typical themes, outlined buttons are similar to half-chrome buttons, but have a border in the default state. * @example Initialize the Toolbar with the chroming attribute specified: ",
              "displayName": "Outlined"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations"
        }
      },
      "methods": {
        "refresh": {
          "description": "Refreshes the toolbar.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-train": {
      "name": "oj-train",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Train",
      "type": "core",
      "since": "1.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtrain"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-train-stretch"
          ],
          "description": "Optional class that may be added to the train div which will stretch the train to cover the full width of the container specified."
        }
      ],
      "description": "A train allows a user to navigate between different steps of a process.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTrain.html",
      "properties": {
        "selectedStep": {
          "description": "Specifies the id of the current selected step.",
          "type": "string",
          "displayName": "Selected Step",
          "writeback": true,
          "help": "selectedStep"
        },
        "steps": {
          "description": "The array of step objects.",
          "type": "Array<Object>",
          "displayName": "Steps",
          "required": true,
          "help": "steps",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "id": {
                  "description": "id of the step",
                  "type": "string"
                },
                "label": {
                  "description": "label of the step",
                  "type": "string"
                },
                "disabled": {
                  "description": "indicates whether the step is disabled",
                  "type": "boolean"
                },
                "visited": {
                  "description": "indicates whether the step has been visited",
                  "type": "boolean"
                },
                "messageType": {
                  "description": "the type of message icon displayed on the step",
                  "type": "string",
                  "enumValues": [
                    "error",
                    "fatal",
                    "info",
                    "warning"
                  ]
                }
              }
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations"
        }
      },
      "methods": {
        "getStep": {
          "description": "Returns the specified step.",
          "help": "getStep",
          "params": [
            {
              "name": "id",
              "description": "The id of the step.",
              "type": "string"
            }
          ],
          "return": "object|null"
        },
        "getNextSelectableStep": {
          "description": "Returns the id of the next selectable step based on the current selected step.",
          "help": "getNextSelectableStep",
          "return": "string|null"
        },
        "getPreviousSelectableStep": {
          "description": "Returns the id of the previous selectable step based on the current selected step.",
          "help": "getPreviousSelectableStep",
          "return": "string|null"
        },
        "updateStep": {
          "description": "Update the specified step with a new set of properties.",
          "help": "updateStep",
          "params": [
            {
              "name": "id",
              "description": "The id of the step to update",
              "type": "string"
            },
            {
              "name": "stepProperties",
              "description": "The set of step properties to update. Will overwrite any previously set values.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "refresh": {
          "description": "Refreshes the train.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeDeselect": {
          "description": "Triggered immediately before a step is deselected.",
          "cancelable": true,
          "help": "beforeDeselect",
          "detail": {
            "toStep": {
              "description": "The step that is about to be deselected.",
              "type": "string"
            },
            "fromStep": {
              "description": "The step that is about to be selected.",
              "type": "string"
            }
          }
        },
        "ojDeselect": {
          "description": "Triggered after a step has been deselected.",
          "help": "deselect",
          "detail": {
            "toStep": {
              "description": "The step that is about to be deselected.",
              "type": "string"
            },
            "fromStep": {
              "description": "The step that is about to be selected.",
              "type": "string"
            }
          }
        },
        "ojBeforeSelect": {
          "description": "Triggered immediately before a step is selected.",
          "cancelable": true,
          "help": "beforeSelect",
          "detail": {
            "toStep": {
              "description": "The step that is about to be deselected.",
              "type": "string"
            },
            "fromStep": {
              "description": "The step that is about to be selected.",
              "type": "string"
            }
          }
        },
        "ojSelect": {
          "description": "Triggered after a step has been selected.",
          "help": "select",
          "detail": {
            "toStep": {
              "description": "The step that is about to be deselected.",
              "type": "string"
            },
            "fromStep": {
              "description": "The step that is about to be selected.",
              "type": "string"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        }
      }
    },
    "oj-treemap": {
      "name": "oj-treemap",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Treemap",
      "type": "core",
      "since": "0.7.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtreemap"
        }
      },
      "description": "A tree map is an interactive data visualization in which hierarchical data is represented across two dimensions by the size and color of nested rectangular nodes.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTreemap.html",
      "properties": {
        "animationDuration": {
          "description": "Specifies the animation duration in milliseconds. For data change animations with multiple stages, the value specifies the duration of each stage.",
          "type": "number",
          "displayName": "Animation Duration",
          "units": "milliseconds",
          "help": "animationDuration"
        },
        "animationOnDataChange": {
          "description": "Specifies the animation that is applied on data changes.",
          "type": "string",
          "displayName": "Animation On Data Change",
          "value": "none",
          "help": "animationOnDataChange",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationOnDisplay": {
          "description": "Specifies the animation that is shown on initial display.",
          "type": "string",
          "displayName": "Animation On Display",
          "value": "none",
          "help": "animationOnDisplay",
          "enumValues": [
            "auto",
            "none"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "animationUpdateColor": {
          "description": "Specifies the color displayed during a data change animation when a node is updated.",
          "type": "string",
          "displayName": "Animation Update Color",
          "value": "",
          "format": "color",
          "help": "animationUpdateColor"
        },
        "as": {
          "status": [
            {
              "type": "deprecated",
              "since": "6.2.0",
              "description": "Set the alias directly on the template element using the data-oj-as attribute instead."
            }
          ],
          "description": "An alias for the '$current' context variable passed to slot content for the nodeTemplate slot.",
          "type": "string",
          "displayName": "As",
          "value": "",
          "help": "as"
        },
        "colorLabel": {
          "description": "Specifies the label displayed in the legend describing the color metric of the treemap.",
          "type": "string",
          "displayName": "Color Label",
          "value": "",
          "help": "colorLabel"
        },
        "data": {
          "description": "Specifies the DataProvider for the treemap. See the Help documentation for more information.",
          "type": "object|null",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "displayLevels": {
          "description": "The number of levels of nodes to display. By default all nodes are displayed.",
          "type": "number",
          "displayName": "Display Levels",
          "value": 1.7976931348623157e+308,
          "help": "displayLevels"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled. Drillable nodes will show a pointer cursor on hover and fire ojBeforeDrill and ojDrill events on click (double click if selection is enabled). See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "off",
          "help": "drilling",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "groupGaps": {
          "description": "Specifies whether gaps are displayed between groups. Gaps can be useful for drawing attention to the differences between groups.",
          "type": "string",
          "displayName": "Group Gaps",
          "value": "outer",
          "help": "groupGaps",
          "enumValues": [
            "all",
            "none",
            "outer"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "none": {
              "displayName": "None"
            },
            "outer": {
              "displayName": "Outer"
            }
          }
        },
        "hiddenCategories": {
          "description": "An array of category strings used for filtering. Nodes with any category matching an item in this array will be filtered.",
          "type": "Array<string>",
          "displayName": "Hidden Categories",
          "value": [],
          "writeback": true,
          "help": "hiddenCategories"
        },
        "highlightMatch": {
          "description": "The matching condition for the highlightedCategories property. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Highlight Match",
          "value": "all",
          "help": "highlightMatch",
          "enumValues": [
            "all",
            "any"
          ],
          "propertyEditorValues": {
            "all": {
              "displayName": "All"
            },
            "any": {
              "displayName": "Any"
            }
          }
        },
        "highlightedCategories": {
          "description": "An array of category strings used for highlighting. Nodes matching categories in this array will be highlighted.",
          "type": "Array<string>",
          "displayName": "Highlighted Categories",
          "value": [],
          "writeback": true,
          "help": "highlightedCategories"
        },
        "hoverBehavior": {
          "description": "Defines the behavior applied when hovering over the nodes.",
          "type": "string",
          "displayName": "Hover Behavior",
          "value": "none",
          "help": "hoverBehavior",
          "enumValues": [
            "dim",
            "none"
          ],
          "propertyEditorValues": {
            "dim": {
              "displayName": "Dim"
            },
            "none": {
              "displayName": "None"
            }
          }
        },
        "hoverBehaviorDelay": {
          "description": "Specifies initial hover delay in milliseconds for highlighting nodes.",
          "type": "number",
          "displayName": "Hover Behavior Delay",
          "value": 200,
          "units": "milliseconds",
          "help": "hoverBehaviorDelay"
        },
        "isolatedNode": {
          "description": "The id of the initially isolated node.",
          "type": "any",
          "displayName": "Isolated Node",
          "value": "\"\"",
          "writeback": true,
          "help": "isolatedNode"
        },
        "layout": {
          "description": "Specifies the layout of the treemap. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Layout",
          "value": "squarified",
          "help": "layout",
          "enumValues": [
            "sliceAndDiceHorizontal",
            "sliceAndDiceVertical",
            "squarified"
          ],
          "propertyEditorValues": {
            "sliceAndDiceHorizontal": {
              "displayName": "Slice And Dice Horizontal"
            },
            "sliceAndDiceVertical": {
              "displayName": "Slice And Dice Vertical"
            },
            "squarified": {
              "displayName": "Squarified"
            }
          }
        },
        "nodeContent": {
          "description": "An object defining custom node content for the treemap. Only leaf nodes with no child nodes will have the custom content rendered.",
          "type": "object",
          "displayName": "Node Content",
          "help": "nodeContent",
          "properties": {
            "renderer": {
              "description": "A function that returns custom node content. The function takes a context argument, provided by the treemap. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "nodeContent.renderer"
            }
          }
        },
        "nodeDefaults": {
          "description": "An object defining default properties for the nodes. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Node Defaults",
          "help": "nodeDefaults",
          "properties": {
            "groupLabelDisplay": {
              "description": "The label display behavior for group nodes.",
              "type": "string",
              "displayName": "Group Label Display",
              "value": "header",
              "help": "nodeDefaults.groupLabelDisplay",
              "enumValues": [
                "header",
                "node",
                "off"
              ],
              "propertyEditorValues": {
                "header": {
                  "displayName": "Header"
                },
                "node": {
                  "displayName": "Node"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "header": {
              "description": "An object defining default properties for the node header. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Header",
              "help": "nodeDefaults.header",
              "properties": {
                "backgroundColor": {
                  "description": "The background color of the node headers.",
                  "type": "string",
                  "displayName": "Background Color",
                  "format": "color",
                  "help": "nodeDefaults.header.backgroundColor"
                },
                "borderColor": {
                  "description": "The border color of the node headers.",
                  "type": "string",
                  "displayName": "Border Color",
                  "format": "color",
                  "help": "nodeDefaults.header.borderColor"
                },
                "hoverBackgroundColor": {
                  "description": "The background color of the node hover feedback.",
                  "type": "string",
                  "displayName": "Hover Background Color",
                  "format": "color",
                  "help": "nodeDefaults.header.hoverBackgroundColor"
                },
                "hoverInnerColor": {
                  "description": "The inner color of the node hover feedback.",
                  "type": "string",
                  "displayName": "Hover Inner Color",
                  "format": "color",
                  "help": "nodeDefaults.header.hoverInnerColor"
                },
                "hoverOuterColor": {
                  "description": "The outer color of the node hover feedback.",
                  "type": "string",
                  "displayName": "Hover Outer Color",
                  "format": "color",
                  "help": "nodeDefaults.header.hoverOuterColor"
                },
                "isolate": {
                  "description": "Specifies whether isolate behavior is enabled on the node.",
                  "type": "string",
                  "displayName": "Isolate",
                  "value": "on",
                  "help": "nodeDefaults.header.isolate",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                },
                "labelHalign": {
                  "description": "The horizontal alignment of the header title.",
                  "type": "string",
                  "displayName": "Label Halign",
                  "value": "start",
                  "help": "nodeDefaults.header.labelHalign",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ],
                  "propertyEditorValues": {
                    "center": {
                      "displayName": "Center"
                    },
                    "end": {
                      "displayName": "End"
                    },
                    "start": {
                      "displayName": "Start"
                    }
                  }
                },
                "labelStyle": {
                  "description": "The CSS style string defining the style of the header title.",
                  "type": "object",
                  "displayName": "Label Style",
                  "help": "nodeDefaults.header.labelStyle"
                },
                "selectedBackgroundColor": {
                  "description": "The background color of the node selection feedback.",
                  "type": "string",
                  "displayName": "Selected Background Color",
                  "format": "color",
                  "help": "nodeDefaults.header.selectedBackgroundColor"
                },
                "selectedInnerColor": {
                  "description": "The inner color of the node selection feedback.",
                  "type": "string",
                  "displayName": "Selected Inner Color",
                  "format": "color",
                  "help": "nodeDefaults.header.selectedInnerColor"
                },
                "selectedOuterColor": {
                  "description": "The outer color of the node selection feedback.",
                  "type": "string",
                  "displayName": "Selected Outer Color",
                  "format": "color",
                  "help": "nodeDefaults.header.selectedOuterColor"
                },
                "useNodeColor": {
                  "description": "Specifies whether the node color should be displayed in the header.",
                  "type": "string",
                  "displayName": "Use Node Color",
                  "value": "off",
                  "help": "nodeDefaults.header.useNodeColor",
                  "enumValues": [
                    "off",
                    "on"
                  ],
                  "propertyEditorValues": {
                    "off": {
                      "displayName": "Off"
                    },
                    "on": {
                      "displayName": "On"
                    }
                  }
                }
              }
            },
            "hoverColor": {
              "description": "The color of the node hover feedback.",
              "type": "string",
              "displayName": "Hover Color",
              "format": "color",
              "help": "nodeDefaults.hoverColor"
            },
            "labelDisplay": {
              "description": "The label display behavior for leaf nodes.",
              "type": "string",
              "displayName": "Label Display",
              "value": "node",
              "help": "nodeDefaults.labelDisplay",
              "enumValues": [
                "node",
                "off"
              ],
              "propertyEditorValues": {
                "node": {
                  "displayName": "Node"
                },
                "off": {
                  "displayName": "Off"
                }
              }
            },
            "labelHalign": {
              "description": "The horizontal alignment for labels displayed within the node.",
              "type": "string",
              "displayName": "Label Halign",
              "value": "center",
              "help": "nodeDefaults.labelHalign",
              "enumValues": [
                "center",
                "end",
                "start"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "labelMinLength": {
              "description": "The minimum number of visible characters needed to render a truncated label. See the Help documentation for more information.",
              "type": "number",
              "displayName": "Label Min Length",
              "value": 1,
              "units": "pixels",
              "help": "nodeDefaults.labelMinLength"
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the label. See the Help documentation for more information.",
              "type": "object",
              "displayName": "Label Style",
              "help": "nodeDefaults.labelStyle"
            },
            "labelValign": {
              "description": "The vertical alignment for labels displayed within the node.",
              "type": "string",
              "displayName": "Label Valign",
              "value": "center",
              "help": "nodeDefaults.labelValign",
              "enumValues": [
                "bottom",
                "center",
                "top"
              ],
              "propertyEditorValues": {
                "bottom": {
                  "displayName": "Bottom"
                },
                "center": {
                  "displayName": "Center"
                },
                "top": {
                  "displayName": "Top"
                }
              }
            },
            "selectedInnerColor": {
              "description": "The inner color of the node selection feedback.",
              "type": "string",
              "displayName": "Selected Inner Color",
              "format": "color",
              "help": "nodeDefaults.selectedInnerColor"
            },
            "selectedOuterColor": {
              "description": "The outer color of the node selection feedback.",
              "type": "string",
              "displayName": "Selected Outer Color",
              "format": "color",
              "help": "nodeDefaults.selectedOuterColor"
            }
          }
        },
        "nodeSeparators": {
          "description": "Specifies the visual effect for separating the nodes from each other. This allows for adjacent nodes of the same color to be distinguished.",
          "type": "string",
          "displayName": "Node Separators",
          "value": "gaps",
          "help": "nodeSeparators",
          "enumValues": [
            "bevels",
            "gaps"
          ],
          "propertyEditorValues": {
            "bevels": {
              "displayName": "Bevels"
            },
            "gaps": {
              "displayName": "Gaps"
            }
          }
        },
        "nodes": {
          "description": "An array of objects defining the data for the nodes. Also accepts a Promise for deferred data rendering.",
          "type": "Array<Object>|Promise|null",
          "displayName": "Nodes",
          "value": null,
          "help": "nodes",
          "extension": {
            "vbdt": {
              "itemProperties": {
                "categories": {
                  "description": "An optional array of category strings corresponding to this data item. This enables highlighting and filtering of individual data items through interactions with the legend and other visualization elements. The categories array of each node is required to be a superset of the categories array of its parent node. If not specified, the ids of the node and its ancestors will be used.",
                  "type": "Array<string>"
                },
                "color": {
                  "description": "The fill color of the node.",
                  "type": "string"
                },
                "drilling": {
                  "description": "Specifies whether drilling is enabled for the node. Drillable nodes will show a pointer cursor on hover and fire an ojDrill event on click (double click if selection is enabled). To enable drilling for all nodes at once, use the drilling attribute in the top level.",
                  "type": "string",
                  "value": "inherit",
                  "enumValues": [
                    "inherit",
                    "off",
                    "on"
                  ]
                },
                "groupLabelDisplay": {
                  "description": "The label display behavior for group nodes.",
                  "type": "string"
                },
                "header": {
                  "description": "An object defining the properties for the node header.",
                  "type": "object",
                  "properties": {
                    "isolate": {
                      "description": "Specifies whether isolate behavior is enabled on the node.",
                      "type": "string",
                      "value": "on",
                      "enumValues": [
                        "off",
                        "on"
                      ]
                    },
                    "labelHalign": {
                      "description": "The horizontal alignment of the header title.",
                      "type": "string",
                      "value": "start",
                      "enumValues": [
                        "center",
                        "end",
                        "start"
                      ]
                    },
                    "labelStyle": {
                      "description": "The CSS style object defining the style of the header title.",
                      "type": "object"
                    },
                    "useNodeColor": {
                      "description": "Specifies whether the node color should be displayed in the header.",
                      "type": "string",
                      "value": "off",
                      "enumValues": [
                        "off",
                        "on"
                      ]
                    }
                  }
                },
                "id": {
                  "description": "The id of the node. For the DataProvider case, the key for the node will be used as the id.",
                  "type": "any"
                },
                "label": {
                  "description": "The label for this node.",
                  "type": "string"
                },
                "labelDisplay": {
                  "description": "The label display behavior for leaf nodes.",
                  "type": "string",
                  "value": "node",
                  "enumValues": [
                    "node",
                    "off"
                  ]
                },
                "labelHalign": {
                  "description": "The horizontal alignment for labels displayed within the node.",
                  "type": "string",
                  "value": "center",
                  "enumValues": [
                    "center",
                    "end",
                    "start"
                  ]
                },
                "labelStyle": {
                  "description": "The CSS style object defining the style of the label.",
                  "type": "object"
                },
                "labelValign": {
                  "description": "The vertical alignment for labels displayed within the node.",
                  "type": "string",
                  "value": "center",
                  "enumValues": [
                    "bottom",
                    "center",
                    "top"
                  ]
                },
                "nodes": {
                  "description": "An array of objects with properties for the child nodes.",
                  "type": "Array<Object>"
                },
                "pattern": {
                  "description": "The pattern used to fill the node.",
                  "type": "string",
                  "value": "none",
                  "enumValues": [
                    "largeChecker",
                    "largeCrosshatch",
                    "largeDiagonalLeft",
                    "largeDiagonalRight",
                    "largeDiamond",
                    "largeTriangle",
                    "none",
                    "smallChecker",
                    "smallCrosshatch",
                    "smallDiagonalLeft",
                    "smallDiagonalRight",
                    "smallDiamond",
                    "smallTriangle"
                  ]
                },
                "selectable": {
                  "description": "Specifies whether or not the node will be selectable.",
                  "type": "string",
                  "value": "auto",
                  "enumValues": [
                    "auto",
                    "off"
                  ]
                },
                "shortDesc": {
                  "description": "The description of this node. This is used for accessibility and also for customizing the tooltip text.",
                  "type": "string"
                },
                "svgClassName": {
                  "description": "The CSS style class to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute.",
                  "type": "string"
                },
                "svgStyle": {
                  "description": "The inline style to apply to the node. The style class and inline style will override any other styling specified through the properties. For tooltip interactivity, it's recommended to also pass a representative color to the node color attribute.",
                  "type": "object"
                },
                "value": {
                  "description": "The value of the node, which determines the relative size of the node.",
                  "type": "number"
                }
              }
            }
          }
        },
        "rootNode": {
          "description": "The id of the root node. When specified, only the root node and children of the root will be displayed.",
          "type": "any",
          "displayName": "Root Node",
          "value": "\"\"",
          "help": "rootNode"
        },
        "selection": {
          "description": "An array containing the ids of the initially selected nodes.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "multiple",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "displayName": "Multiple"
            },
            "none": {
              "displayName": "None"
            },
            "single": {
              "displayName": "Single"
            }
          }
        },
        "sizeLabel": {
          "description": "Specifies the label used in the legend describing the size metric of the treemap.",
          "type": "string",
          "displayName": "Size Label",
          "value": "",
          "help": "sizeLabel"
        },
        "sorting": {
          "description": "Specifies whether the nodes are sorted by size. Nodes with the same parent are sorted in order of descending size.",
          "type": "string",
          "displayName": "Sorting",
          "value": "off",
          "help": "sorting",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "tooltip": {
          "description": "An object containing an optional callback function for tooltip customization.",
          "type": "object",
          "displayName": "Tooltip",
          "help": "tooltip",
          "properties": {
            "renderer": {
              "description": "A function that returns a custom tooltip. The function takes a context argument, provided by the treemap. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "tooltip.renderer"
            }
          }
        },
        "touchResponse": {
          "description": "Specifies configuration options for touch and hold delays on mobile devices. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Touch Response",
          "value": "auto",
          "help": "touchResponse",
          "enumValues": [
            "auto",
            "touchStart"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "touchStart": {
              "displayName": "Touch Start"
            }
          }
        },
        "trackResize": {
          "description": "Defines whether the element will automatically render in response to changes in size. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Track Resize",
          "value": "on",
          "help": "trackResize",
          "enumValues": [
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations",
          "properties": {
            "componentName": {
              "description": "Used to describe the data visualization type for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.componentName"
            },
            "labelAndValue": {
              "description": "Used to display a label and its value. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelAndValue"
            },
            "labelClearSelection": {
              "description": "Text shown for clearing multiple selection on touch devices. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelClearSelection"
            },
            "labelColor": {
              "description": "Used for the color label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelColor"
            },
            "labelCountWithTotal": {
              "description": "Used to display a count out of a total. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelCountWithTotal"
            },
            "labelDataVisualization": {
              "description": "Label for data visualizations used for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelDataVisualization"
            },
            "labelInvalidData": {
              "description": "Text shown when the component receives invalid data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelInvalidData"
            },
            "labelNoData": {
              "description": "Text shown when the component receives no data. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelNoData"
            },
            "labelSize": {
              "description": "Used for the size label. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.labelSize"
            },
            "stateCollapsed": {
              "description": "Used to describe the collapsed state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateCollapsed"
            },
            "stateDrillable": {
              "description": "Used to describe a drillable object for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateDrillable"
            },
            "stateExpanded": {
              "description": "Used to describe the expanded state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateExpanded"
            },
            "stateHidden": {
              "description": "Used to describe the hidden state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateHidden"
            },
            "stateIsolated": {
              "description": "Used to describe the isolated state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateIsolated"
            },
            "stateMaximized": {
              "description": "Used to describe the maximized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMaximized"
            },
            "stateMinimized": {
              "description": "Used to describe the minimized state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateMinimized"
            },
            "stateSelected": {
              "description": "Used to describe the selected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateSelected"
            },
            "stateUnselected": {
              "description": "Used to describe the unselected state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateUnselected"
            },
            "stateVisible": {
              "description": "Used to describe the visible state for accessibility. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.stateVisible"
            },
            "tooltipIsolate": {
              "description": "Used for the isolate tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipIsolate"
            },
            "tooltipRestore": {
              "description": "Used for the restore tooltip. See the translations attribute for usage examples.",
              "type": "string",
              "help": "translations.tooltipRestore"
            }
          }
        }
      },
      "methods": {
        "getNode": {
          "description": "Returns information for automation testing verification of a specified node.",
          "status": [
            {
              "type": "deprecated",
              "since": "7.0.0",
              "description": "The use of this function is no longer recommended."
            }
          ],
          "help": "getNode",
          "params": [
            {
              "name": "subIdPath",
              "description": "The array of indices in the subId for the desired node",
              "type": "Array"
            }
          ],
          "return": "object|null"
        },
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojBeforeDrill": {
          "description": "Triggered immediately before any node in the treemap is drilled into.",
          "help": "beforeDrill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "any"
            },
            "data": {
              "description": "the data object of the drilled node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the drilled node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        },
        "ojDrill": {
          "description": "Triggered during a drill gesture (double click if selection is enabled, single click otherwise).",
          "help": "drill",
          "detail": {
            "id": {
              "description": "the id of the drilled object",
              "type": "any"
            },
            "data": {
              "description": "the data object of the drilled node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the drilled node. This will only be set if a DataProvider is being used.",
              "type": "object"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "nodeContentTemplate": {
          "description": "The nodeContentTemplate slot is used to specify custom node content for leaf nodes of a treemap. See the Help documentation for more information.",
          "help": "nodeContentTemplate",
          "data": {
            "bounds": {
              "description": "Object containing information on the node area. The x and y coordinates are relative to the top, left corner of the element.",
              "type": "object",
              "properties": {
                "x": {
                  "description": "The x coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "y": {
                  "description": "The y coordinate relative to the top, left corner of the element.",
                  "type": "number"
                },
                "width": {
                  "description": "The width of the node area.",
                  "type": "number"
                },
                "height": {
                  "description": "The height of the node area.",
                  "type": "number"
                }
              }
            },
            "id": {
              "description": "The id of the node.",
              "type": "any"
            },
            "data": {
              "description": "The data object of the node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the node. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "componentElement": {
              "description": "The treemap element.",
              "type": "Element"
            }
          }
        },
        "nodeTemplate": {
          "description": "The nodeTemplate slot is used to specify the template for creating nodes of the treemap. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "nodeTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-treemap> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data object of the node",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the current node",
              "type": "number"
            },
            "key": {
              "description": "The key of the current node",
              "type": "any"
            },
            "parentData": {
              "description": "An array of data objects of the outermost to innermost parents of the node",
              "type": "Array"
            },
            "parentKey": {
              "description": "The key of the parent node",
              "type": "any"
            }
          }
        },
        "tooltipTemplate": {
          "description": "The tooltipTemplate slot is used to specify custom tooltip content. See the Help documentation for more information.",
          "help": "tooltipTemplate",
          "data": {
            "parentElement": {
              "description": "The tooltip element. The function can directly modify or append content to this element.",
              "type": "Element"
            },
            "id": {
              "description": "The id of the hovered node.",
              "type": "any"
            },
            "label": {
              "description": "The label of the hovered node.",
              "type": "string"
            },
            "value": {
              "description": "The value of the hovered node.",
              "type": "number"
            },
            "color": {
              "description": "The color of the hovered node.",
              "type": "string"
            },
            "data": {
              "description": "The data object of the hovered node.",
              "type": "object"
            },
            "itemData": {
              "description": "The row data object for the hovered node. This will only be set if a DataProvider is being used.",
              "type": "object"
            },
            "componentElement": {
              "description": "The treemap element.",
              "type": "Element"
            }
          }
        }
      }
    },
    "oj-treemap-node": {
      "name": "oj-treemap-node",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Treemap Node",
      "type": "core",
      "since": "6.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtreemap"
        }
      },
      "description": "ojTreemapNode",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTreemapNode.html",
      "properties": {
        "categories": {
          "description": "An optional array of category strings corresponding to this data item. See the Help documentation for more information.",
          "type": "Array<string>",
          "displayName": "Categories",
          "value": [],
          "help": "categories"
        },
        "color": {
          "description": "The fill color of the node.",
          "type": "string",
          "displayName": "Color",
          "value": "#000000",
          "format": "color",
          "help": "color"
        },
        "drilling": {
          "description": "Specifies whether drilling is enabled for the node. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Drilling",
          "value": "inherit",
          "help": "drilling",
          "enumValues": [
            "inherit",
            "off",
            "on"
          ],
          "propertyEditorValues": {
            "inherit": {
              "displayName": "Inherit"
            },
            "off": {
              "displayName": "Off"
            },
            "on": {
              "displayName": "On"
            }
          }
        },
        "groupLabelDisplay": {
          "description": "The label display behavior for group nodes.",
          "type": "string",
          "displayName": "Group Label Display",
          "help": "groupLabelDisplay",
          "enumValues": [
            "header",
            "node",
            "off"
          ],
          "propertyEditorValues": {
            "header": {
              "displayName": "Header"
            },
            "node": {
              "displayName": "Node"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "header": {
          "description": "An object defining the properties for the node header.",
          "type": "object",
          "displayName": "Header",
          "help": "header",
          "properties": {
            "isolate": {
              "description": "Specifies whether isolate behavior is enabled on the node.",
              "type": "string",
              "displayName": "Isolate",
              "help": "header.isolate",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            },
            "labelHalign": {
              "description": "The horizontal alignment of the header title.",
              "type": "string",
              "displayName": "Label Halign",
              "help": "header.labelHalign",
              "enumValues": [
                "center",
                "end",
                "start"
              ],
              "propertyEditorValues": {
                "center": {
                  "displayName": "Center"
                },
                "end": {
                  "displayName": "End"
                },
                "start": {
                  "displayName": "Start"
                }
              }
            },
            "labelStyle": {
              "description": "The CSS style object defining the style of the header title.",
              "type": "object",
              "displayName": "Label Style",
              "help": "header.labelStyle"
            },
            "useNodeColor": {
              "description": "Specifies whether the node color should be displayed in the header.",
              "type": "string",
              "displayName": "Use Node Color",
              "help": "header.useNodeColor",
              "enumValues": [
                "off",
                "on"
              ],
              "propertyEditorValues": {
                "off": {
                  "displayName": "Off"
                },
                "on": {
                  "displayName": "On"
                }
              }
            }
          }
        },
        "label": {
          "description": "The label for this node.",
          "type": "string",
          "displayName": "Label",
          "value": "",
          "help": "label"
        },
        "labelDisplay": {
          "description": "The label display behavior for leaf nodes.",
          "type": "string",
          "displayName": "Label Display",
          "help": "labelDisplay",
          "enumValues": [
            "node",
            "off"
          ],
          "propertyEditorValues": {
            "node": {
              "displayName": "Node"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "labelHalign": {
          "description": "The horizontal alignment for labels displayed within the node.",
          "type": "string",
          "displayName": "Label Halign",
          "help": "labelHalign",
          "enumValues": [
            "center",
            "end",
            "start"
          ],
          "propertyEditorValues": {
            "center": {
              "displayName": "Center"
            },
            "end": {
              "displayName": "End"
            },
            "start": {
              "displayName": "Start"
            }
          }
        },
        "labelStyle": {
          "description": "The CSS style object defining the style of the label. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Label Style",
          "value": {},
          "help": "labelStyle"
        },
        "labelValign": {
          "description": "The vertical alignment for labels displayed within the node.",
          "type": "string",
          "displayName": "Label Valign",
          "help": "labelValign",
          "enumValues": [
            "bottom",
            "center",
            "top"
          ],
          "propertyEditorValues": {
            "bottom": {
              "displayName": "Bottom"
            },
            "center": {
              "displayName": "Center"
            },
            "top": {
              "displayName": "Top"
            }
          }
        },
        "pattern": {
          "description": "The pattern used to fill the node.",
          "type": "string",
          "displayName": "Pattern",
          "value": "none",
          "help": "pattern",
          "enumValues": [
            "largeChecker",
            "largeCrosshatch",
            "largeDiagonalLeft",
            "largeDiagonalRight",
            "largeDiamond",
            "largeTriangle",
            "none",
            "smallChecker",
            "smallCrosshatch",
            "smallDiagonalLeft",
            "smallDiagonalRight",
            "smallDiamond",
            "smallTriangle"
          ],
          "propertyEditorValues": {
            "largeChecker": {
              "displayName": "Large Checker"
            },
            "largeCrosshatch": {
              "displayName": "Large Crosshatch"
            },
            "largeDiagonalLeft": {
              "displayName": "Large Diagonal Left"
            },
            "largeDiagonalRight": {
              "displayName": "Large Diagonal Right"
            },
            "largeDiamond": {
              "displayName": "Large Diamond"
            },
            "largeTriangle": {
              "displayName": "Large Triangle"
            },
            "none": {
              "displayName": "None"
            },
            "smallChecker": {
              "displayName": "Small Checker"
            },
            "smallCrosshatch": {
              "displayName": "Small Crosshatch"
            },
            "smallDiagonalLeft": {
              "displayName": "Small Diagonal Left"
            },
            "smallDiagonalRight": {
              "displayName": "Small Diagonal Right"
            },
            "smallDiamond": {
              "displayName": "Small Diamond"
            },
            "smallTriangle": {
              "displayName": "Small Triangle"
            }
          }
        },
        "selectable": {
          "description": "Specifies whether the node will be selectable.",
          "type": "string",
          "displayName": "Selectable",
          "value": "auto",
          "help": "selectable",
          "enumValues": [
            "auto",
            "off"
          ],
          "propertyEditorValues": {
            "auto": {
              "displayName": "Auto"
            },
            "off": {
              "displayName": "Off"
            }
          }
        },
        "shortDesc": {
          "description": "The description of this node. This is used for accessibility and also for customizing the tooltip text.",
          "type": "string",
          "displayName": "Short Desc",
          "value": "",
          "help": "shortDesc"
        },
        "svgClassName": {
          "description": "The CSS style class to apply to the node. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Svg Class Name",
          "value": "",
          "help": "svgClassName"
        },
        "svgStyle": {
          "description": "The inline style to apply to the node. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Svg Style",
          "value": {},
          "help": "svgStyle"
        },
        "value": {
          "description": "The value of the node, which determines the relative size of the node.",
          "type": "number",
          "displayName": "Value",
          "help": "value"
        }
      }
    },
    "oj-tree-view": {
      "name": "oj-tree-view",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Tree View",
      "type": "core",
      "since": "4.0.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojtreeview"
        }
      },
      "styleClasses": [
        {
          "styleGroup": [
            "oj-treeview-item-text"
          ],
          "description": "Use this class on the span providing the item text in the static markup or the item renderer or template slot."
        },
        {
          "styleGroup": [
            "oj-treeview-item-icon"
          ],
          "description": "Use this class on the span providing the item icon in the static markup or the item renderer or template slot."
        }
      ],
      "description": "A tree view displays hierarchical relationships between items.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojTreeView.html",
      "properties": {
        "currentItem": {
          "description": "Read-only property used for retrieving the key of the item that currently has focus.",
          "type": "any",
          "displayName": "Current Item",
          "writeback": true,
          "readOnly": true,
          "help": "currentItem"
        },
        "data": {
          "description": "Specifies the data for the tree. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Data",
          "value": null,
          "help": "data"
        },
        "dnd": {
          "description": "Customizes the drag and drop functionality. See the Help documentation for more information.",
          "type": "object",
          "displayName": "Dnd",
          "help": "dnd",
          "properties": {
            "drag": {
              "description": "Customizes the drag functionality.",
              "type": "object",
              "displayName": "Drag",
              "value": null,
              "help": "dnd.drag",
              "properties": {
                "items": {
                  "description": "If this object is specified, TreeView will initiate drag operation when the user drags on an item.",
                  "type": "object",
                  "properties": {
                    "dataTypes": {
                      "description": "The MIME types to use for the dragged data in the dataTransfer object. This can be a string if there is only one type, or an array of strings if multiple types are needed. For example, if selected items of employee data are being dragged, dataTypes could be \"application/employees+json\". Drop targets can examine the data types and decide whether to accept the data. A text input may only accept \"text\" data type, while a chart for displaying employee data may be configured to accept the \"application/employees+json\" type. For each type in the array, dataTransfer.setData will be called with the specified type and the JSON version of the selected item data as the value. The selected item data is an array of objects, with each object representing a model object from the underlying data source. For example, if the underlying data is an oj.Collection, then this would be a oj.Model object. Note that when static HTML is used, then the value would be the HTML string of the selected item. This property is required unless the application calls setData itself in a dragStart callback function.",
                      "type": "string|Array<string>"
                    },
                    "dragStart": {
                      "description": "A callback function that receives the \"dragstart\" event and context information as arguments: function(event, context) All of the event payloads listed below can be found under the context argument. items: An array of objects, with each object representing the data of one selected item. This function can set its own data and drag image as needed. If dataTypes is specified, event.dataTransfer is already populated with the default data when this function is invoked. If dataTypes is not specified, this function must call event.dataTransfer.setData to set the data or else the drag operation will be cancelled. In either case, the drag image is set to an image of the dragged items on the TreeView.",
                      "type": "function"
                    },
                    "drag": {
                      "description": "A callback function that receives the \"drag\" event as argument: function(event)",
                      "type": "function"
                    },
                    "dragEnd": {
                      "description": "A callback function that receives the \"dragend\" event as argument: function(event)",
                      "type": "function"
                    }
                  }
                }
              }
            },
            "drop": {
              "description": "Customizes the drop functionality.",
              "type": "object",
              "displayName": "Drop",
              "value": null,
              "help": "dnd.drop",
              "properties": {
                "items": {
                  "description": "An object that specifies callback functions to handle dropping items",
                  "type": "object",
                  "properties": {
                    "dataTypes": {
                      "description": "A data type or an array of data types this component can accept. This property is required unless dragEnter, dragOver, and drop callback functions are specified to handle the corresponding events.",
                      "type": "string|Array<string>"
                    },
                    "dragEnter": {
                      "description": "A callback function that receives the \"dragenter\" event and context information as arguments: function(event, context) All of the event payloads listed below can be found under the context argument. item: The item being entered. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag dataTypes to determine if the data is acceptable. If there is a match, event.preventDefault() will be called to indicate that the data can be accepted.",
                      "type": "function"
                    },
                    "dragOver": {
                      "description": "A callback function that receives the \"dragover\" event and context information as arguments: function(event, context) All of the event payloads listed below can be found under the context argument. item: The item being dragged over. This function should call event.preventDefault() to indicate the dragged data can be accepted. Otherwise, dataTypes will be matched against the drag dataTypes to determine if the data is acceptable. If there is a match, event.preventDefault() will be called to indicate that the data can be accepted.",
                      "type": "function"
                    },
                    "dragLeave": {
                      "description": "A callback function that receives the \"dragleave\" event and context information as arguments: function(event, context) All of the event payloads listed below can be found under the context argument. item: The item that was last entered.",
                      "type": "function"
                    },
                    "drop": {
                      "description": "A required callback function that receives the \"drop\" event and context information as arguments: function(event, context) All of the event payloads listed below can be found under the context argument. item: The item being dropped on. position: The drop position relative to the item being dropped on. Valid values are \"inside\", \"before\", \"after\", and \"first\" (the first child of the item being dropped on). This function should call event.preventDefault() to indicate the dragged data can be accepted. If the application needs to look at the data for the item being dropped on, it can use the getContextByNode method.",
                      "type": "function"
                    }
                  }
                }
              }
            }
          }
        },
        "expanded": {
          "description": "Specifies the key set containing the keys of the items that should be expanded. See the Help documentation for more information.",
          "type": "KeySet",
          "displayName": "Expanded",
          "value": "new ExpandedKeySet()",
          "writeback": true,
          "help": "expanded"
        },
        "item": {
          "description": "Customizes the functionality of each item in the tree.",
          "type": "object",
          "displayName": "Item",
          "help": "item",
          "properties": {
            "focusable": {
              "description": "Specifies whether the item can receive keyboard focus. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Focusable",
              "value": null,
              "help": "item.focusable"
            },
            "renderer": {
              "description": "Specifies the renderer for the item. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Renderer",
              "value": null,
              "help": "item.renderer"
            },
            "selectable": {
              "description": "Specifies whether the item can be selected. See the Help documentation for more information.",
              "type": "function",
              "displayName": "Selectable",
              "value": null,
              "help": "item.selectable"
            }
          }
        },
        "selection": {
          "description": "Specifies the current selections in the tree. An empty array indicates nothing is selected.",
          "type": "Array<any>",
          "displayName": "Selection",
          "value": [],
          "writeback": true,
          "help": "selection"
        },
        "selectionMode": {
          "description": "Specifies the selection mode.",
          "type": "string",
          "displayName": "Selection Mode",
          "value": "none",
          "help": "selectionMode",
          "enumValues": [
            "multiple",
            "none",
            "single"
          ],
          "propertyEditorValues": {
            "multiple": {
              "description": "Multiple items can be selected at the same time.",
              "displayName": "Multiple"
            },
            "none": {
              "description": "Selection is disabled.",
              "displayName": "None"
            },
            "single": {
              "description": "Only one item can be selected at a time.",
              "displayName": "Single"
            }
          }
        },
        "translations": {
          "description": "A collection of translated resources from the translation bundle, or null if this component has no resources.",
          "type": "object|null",
          "displayName": "Translations",
          "value": {},
          "translatable": true,
          "help": "translations"
        }
      },
      "methods": {
        "getContextByNode": {
          "description": "Returns an object with context for the given child DOM node. See the Help documentation for more information.",
          "help": "getContextByNode",
          "params": [
            {
              "name": "node",
              "description": "The child DOM node",
              "type": "Element"
            }
          ],
          "return": "object|null"
        },
        "refresh": {
          "description": "Refreshes the component.",
          "help": "refresh",
          "return": "void"
        },
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves the value of a property or a subproperty.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        }
      },
      "events": {
        "ojAnimateEnd": {
          "description": "Triggered when the default animation of a particular action has ended.",
          "help": "animateEnd",
          "detail": {
            "action": {
              "description": "The action that started the animation. See animation section for a list of actions.",
              "type": "'expand'|'collapse'"
            },
            "element": {
              "description": "The target of animation.",
              "type": "Element"
            }
          }
        },
        "ojAnimateStart": {
          "description": "Triggered when the default animation of a particular action is about to start.",
          "help": "animateStart",
          "detail": {
            "action": {
              "description": "The action that starts the animation. See animation section for a list of actions.",
              "type": "'expand'|'collapse'"
            },
            "element": {
              "description": "The target of animation.",
              "type": "Element"
            },
            "endCallback": {
              "description": "If the event listener calls event.preventDefault() to cancel the default animation, it must call the endCallback function when it finishes its own animation handling and when any custom animation ends.",
              "type": "function"
            }
          }
        },
        "ojBeforeCollapse": {
          "description": "Triggered before an item is collapsed.",
          "cancelable": true,
          "help": "beforeCollapse",
          "detail": {
            "key": {
              "description": "The key of the item to be collapsed.",
              "type": "any"
            },
            "item": {
              "description": "The item to be collapsed.",
              "type": "Element"
            }
          }
        },
        "ojBeforeCurrentItem": {
          "description": "Triggered before the current item is changed.",
          "cancelable": true,
          "help": "beforeCurrentItem",
          "detail": {
            "previousKey": {
              "description": "The key of the previous item.",
              "type": "any"
            },
            "previousItem": {
              "description": "The previous item.",
              "type": "Element"
            },
            "key": {
              "description": "The key of the new current item.",
              "type": "any"
            },
            "item": {
              "description": "The new current item.",
              "type": "Element"
            }
          }
        },
        "ojBeforeExpand": {
          "description": "Triggered before an item is expanded.",
          "cancelable": true,
          "help": "beforeExpand",
          "detail": {
            "key": {
              "description": "The key of the item to be expanded.",
              "type": "any"
            },
            "item": {
              "description": "The item to be expanded.",
              "type": "Element"
            }
          }
        },
        "ojCollapse": {
          "description": "Triggered after an item has been collapsed.",
          "help": "collapse",
          "detail": {
            "key": {
              "description": "The key of the item that was just collapsed.",
              "type": "any"
            },
            "item": {
              "description": "The item that was just collapsed.",
              "type": "Element"
            }
          }
        },
        "ojExpand": {
          "description": "Triggered after an item has been expanded.",
          "help": "expand",
          "detail": {
            "key": {
              "description": "The key of the item that was just expanded.",
              "type": "any"
            },
            "item": {
              "description": "The item that was just expanded.",
              "type": "Element"
            }
          }
        }
      },
      "slots": {
        "contextMenu": {
          "description": "The contextMenu slot is set on the oj-menu instance within this element. It designates the JET Menu to launch as a context menu.",
          "maxItems": 1,
          "help": "contextMenu"
        },
        "itemTemplate": {
          "description": "The itemTemplate slot is used to specify the template for rendering each item in the tree. See the Help documentation for more information.",
          "maxItems": 1,
          "help": "itemTemplate",
          "data": {
            "componentElement": {
              "description": "The <oj-tree-view> custom element",
              "type": "Element"
            },
            "data": {
              "description": "The data for the current item being rendered",
              "type": "object"
            },
            "index": {
              "description": "The zero-based index of the curent item",
              "type": "number"
            },
            "key": {
              "description": "The key of the current item being rendered",
              "type": "any"
            },
            "depth": {
              "description": "The depth of the current item being rendered. The depth of the first level children under the invisible root is 1.",
              "type": "number"
            },
            "leaf": {
              "description": "True if the current item is a leaf node.",
              "type": "boolean"
            },
            "parentkey": {
              "description": "The key of the parent item. The parent key is null for root nodes.",
              "type": "any"
            }
          }
        }
      }
    },
    "oj-validation-group": {
      "name": "oj-validation-group",
      "version": "7.1.0",
      "jetVersion": "7.1.0",
      "displayName": "Validation Group",
      "type": "core",
      "since": "4.2.0",
      "extension": {
        "vbdt": {
          "module": "ojs/ojvalidationgroup"
        }
      },
      "description": "A validation group tracks and summarizes the current validity state of a group of components.",
      "help": "https://docs.oracle.com/en/middleware/developer-tools/jet/7.1/reference-api/oj.ojValidationGroup.html",
      "properties": {
        "valid": {
          "description": "Read-only property used for retrieving the current validity state of the group of components being tracked. See the Help documentation for more information.",
          "type": "string",
          "displayName": "Valid",
          "writeback": true,
          "readOnly": true,
          "help": "valid",
          "enumValues": [
            "invalidHidden",
            "invalidShown",
            "pending",
            "valid"
          ],
          "propertyEditorValues": {
            "invalidHidden": {
              "description": "The component has invalid messages hidden and no invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Hidden"
            },
            "invalidShown": {
              "description": "The component has invalid messages showing. An invalid message is one with severity \"error\" or higher.",
              "displayName": "Invalid Shown"
            },
            "pending": {
              "description": "The component is waiting for the validation state to be determined. The \"pending\" state is never set in this release of JET. It will be set in a future release.",
              "displayName": "Pending"
            },
            "valid": {
              "description": "The component is valid",
              "displayName": "Valid"
            }
          }
        }
      },
      "methods": {
        "setProperty": {
          "description": "Sets a property or a single subproperty for complex properties and notifies the component of the change, triggering a corresponding event.",
          "help": "setProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to set. Supports dot notation for subproperty access.",
              "type": "string"
            },
            {
              "name": "value",
              "description": "The new value to set the property to.",
              "type": "any"
            }
          ],
          "return": "void"
        },
        "getProperty": {
          "description": "Retrieves a value for a property or a single subproperty for complex properties.",
          "help": "getProperty",
          "params": [
            {
              "name": "property",
              "description": "The property name to get. Supports dot notation for subproperty access.",
              "type": "string"
            }
          ],
          "return": "any"
        },
        "setProperties": {
          "description": "Performs a batch set of properties.",
          "help": "setProperties",
          "params": [
            {
              "name": "properties",
              "description": "An object containing the property and value pairs to set.",
              "type": "object"
            }
          ],
          "return": "void"
        },
        "showMessages": {
          "description": "Takes all deferred messages and shows them on each enabled component. An enabled component is one that is not disabled or readonly. As a result, the valid property may be updated; e.g., if the valid state was \"invalidHidden\" before showMessages(), the valid state will become \"invalidShown\" after showMessages(). If there were no deferred messages this method simply returns. ",
          "help": "showMessages",
          "return": "void"
        },
        "focusOn": {
          "description": "Sets the focus on one of the enabled components that is being tracked. See the Help documentation for more information.",
          "help": "focusOn",
          "params": [
            {
              "name": "key",
              "description": "\"@firstInvalidShown\" will focus on first invalidShown enabled component in DOM order, if any. When no parameter is passed in, the method will focus on first enabled component regardless of the valid state, if any. An enabled component is one that is not disabled or readonly.",
              "type": "string"
            }
          ],
          "return": "void"
        }
      },
      "slots": {
        "": {
          "description": "The <oj-validation-group> accepts any DOM elements in its Default slot but only tracks the validity state of any JET custom element descendents that contain the valid property.",
          "displayName": "default",
          "help": "Default"
        }
      }
    }
  }
}