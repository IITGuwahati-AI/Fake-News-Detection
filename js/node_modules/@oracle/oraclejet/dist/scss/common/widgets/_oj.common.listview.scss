// Copyright (c) 2014, 2019, Oracle and/or its affiliates. The Universal Permissive License (UPL), Version 1.0
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
// WARNING: do not directly import this file, instead import the
//          version in your base theme's directory,
//          for example alta/widgets/_oj.alta.listview.scss
// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

@import "../../utilities/oj.utilities";

@if $includeListViewClasses != false {
    @include module-include-once("common.listview") {

        // This is to prevent the flash of unstyled content before the html becomes JET components.
        @if $initialVisibility == hidden {
          oj-list-view:not(.oj-complete) {
            visibility: hidden;
          }
        }

        /* Styling for the listview widget container */
        .oj-listview {
            display: block;
            position: relative;
            border-width: 1px 0;
            border-style: solid;
            box-sizing: border-box;
            @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
              user-select: none;
              border-color: var(--oj-collection-border-color);
              min-height: var(--oj-collection-row-height);
            } @else {
              @include oj-user-select-property (none);
              border-color: $collectionBorderColor;
              // min-height is 1 row to leave space for the no data message.
              min-height: $collectionRowHeight;
            }
        }

        /* styling for the listview root element and group element */
        .oj-listview-element,
        .oj-listview-group {
            padding: 0;
            margin: 0;
            list-style-type: none;
        }

        /* Styling to remove focus ring border on focusable elements */
        .oj-listview:focus,
        .oj-listview-element:focus,
        .oj-listview-expand-icon:focus,
        .oj-listview-expanding-icon:focus,
        .oj-listview-collapse-icon:focus,
        .oj-listview-group-item:focus,
        .oj-listview-item-element:focus,
        .oj-listview-cell-element:focus {
            outline: none;
        }

        /* Styling for the component div container element. */
        .oj-listview-container {
            overflow: auto;
        }

        /* to enable momentum scrolling on touch devices */
        .oj-listview-container-touch {
            overflow-y: scroll;
            -webkit-overflow-scrolling: touch;
            -webkit-tap-highlight-color: rgba(0,0,0,0);
        }

        /* remove border top for the first group to prevent double border */
        .oj-listview-element > .oj-listview-item-element:first-child .oj-listview-group-item {
            border-top: 0;
        }

        /* remove border top for the first group or leaf item to prevent double border */
        .oj-listview-element > .oj-listview-item:first-child,
        ul:not(.oj-listview-card-layout) .oj-listview-group > .oj-listview-item:first-child,
        .oj-listview-element > .oj-listview-item-element:first-child .oj-listview-group-item {
            background-size: 0;
        }

        /* styling on each list item */
        /* note that background image is used for border because we need to ability to position the border.
           using linear-gradient allows us to customize the color of the border */
        .oj-listview-item {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            padding: var(--oj-panel-padding);
            background-image: linear-gradient(var(--oj-collection-cell-border-color), var(--oj-collection-cell-border-color));
            background-position: var(--oj-list-view-item-border-position) 0;
          } @else {
            padding: $panelPadding;
            background-image: linear-gradient($collectionCellBorderColor, $collectionCellBorderColor);
            background-position: $listViewItemBorderPosition 0;
          }
            background-size: 100% 1px;
            background-repeat: no-repeat;
            box-sizing: border-box;
            border-top:1px solid transparent;
        }

        /* set on item before add or remove animation */
        .oj-listview-item-add-remove-transition {
            overflow: hidden;
        }

        /* styling on list item element */
        .oj-listview-item-element {
            line-height: normal;
        }

        /* Styling on list item hover */
        .oj-listview-item.oj-hover {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            background-color: var(--oj-collection-cell-bg-color-hover);
            border-top: 1px solid var(--oj-collection-cell-border-color-hover);
          } @else {
            background-color: $collectionCellBgColorHover;
            border-top: 1px solid $collectionCellBorderColorHover;
          }
            background-size: 0;
        }

        .oj-listview-group-item.oj-hover {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            background-color: var(--oj-collection-cell-bg-color-hover);
          } @else {
            background-color: $collectionCellBgColorHover;
          }
        }

        ul.oj-listview-element:not(.oj-listview-card-layout) .oj-listview-item.oj-hover + li.oj-listview-item {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            border-top: 1px solid var(--oj-collection-cell-border-color-hover);
          } @else {
            border-top: 1px solid $collectionCellBorderColorHover;
          }
            background-size: 0;
        }

        /* Styling on list item selection */
        .oj-listview.oj-focus-ancestor .oj-listview-item.oj-selected {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            background-color: var(--oj-collection-cell-bg-color-selected);
            border-top: 1px solid var(--oj-collection-cell-border-color-selected);
          } @else {
            background-color: $collectionCellBgColorSelected;
            border-top: 1px solid $collectionCellBorderColorSelected;
          }
            background-size: 0;
        }

        .oj-listview.oj-focus-ancestor .oj-listview-group-item.oj-selected {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            background-color: var(--oj-collection-cell-bg-color-selected);
          } @else {
            background-color: $collectionCellBgColorSelected;
          }
        }

        .oj-listview.oj-focus-ancestor ul.oj-listview-element:not(.oj-listview-card-layout) .oj-listview-item.oj-selected + li.oj-listview-item {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            border-top: 1px solid var(--oj-collection-cell-border-color-selected);
          } @else {
            border-top: 1px solid $collectionCellBorderColorSelected;
          }
            background-size: 0;
        }

        /* Styling on list item inactive selection (when the root is not focus) */
        .oj-listview-item.oj-selected {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            background-color: var(--oj-collection-cell-bg-color-selected-inactive);
            border-top: 1px solid var(--oj-collection-cell-border-color-selected-inactive);
          } @else {
            background-color: $collectionCellBgColorSelectedInactive;
            border-top: 1px solid $collectionCellBorderColorSelectedInactive;
          }
            background-size: 0;
        }

        .oj-listview-group-item.oj-selected {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            background-color: var(--oj-collection-cell-bg-color-selected-inactive);
          } @else {
            background-color: $collectionCellBgColorSelectedInactive;
          }
        }

        /* Styling on focused list or group item */
        .oj-listview-item.oj-focus-highlight,
        .oj-listview-group-item.oj-focus-highlight {
            position: relative;
        }

        .oj-listview-item.oj-focus-highlight::after,
        .oj-listview-group-item.oj-focus-highlight::after {
            content: "";
            position: absolute;
            pointer-events: none;
            top: 1px;
            width: calc(100% - 2px);
            height: calc(100% - 2px);
            @include oj-ltr() {
                left: 1px;
            }
            @include oj-rtl() {
                right: 1px;
            }
            @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
              @include oj-browser-focus-outline-approximation-css-vars(var(--oj-text-color-primary));
            } @else {
              @include oj-browser-focus-outline-approximation($primaryTextColor);
            }
        }

        /* Styling on expand/collapse icon when it has focus highlight */
        .oj-listview-expanding-icon.oj-focus-highlight::before,
        .oj-listview-expand-icon.oj-focus-highlight::before,
        .oj-listview-collapse-icon.oj-focus-highlight::before {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            @include oj-browser-focus-outline-approximation-css-vars(var(--oj-text-color-primary));
          } @else {
            @include oj-browser-focus-outline-approximation($primaryTextColor);
          }
        }

        /* Styling on focused list item */
        .oj-listview.oj-focus-ancestor ul.oj-listview-element:not(.oj-listview-card-layout) .oj-listview-item.oj-focus,
        .oj-listview.oj-focus-ancestor ul.oj-listview-element:not(.oj-listview-card-layout) .oj-listview-item.oj-focus + li.oj-listview-item {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            border-top: 1px solid var(--oj-collection-cell-border-color-focus);
          } @else {
            border-top: 1px solid $collectionCellBorderColorFocus;
          }
            background-size: 0;
        }

        /* Styling for the list item elements in selected state when listview is in high contrast mode. */
        .oj-hicontrast .oj-listview-item.oj-selected,
        .oj-hicontrast .oj-listview-group-item.oj-selected {
            border-width: 1px 2px 2px 1px;
            border-style: solid;
            border-color: initial;
        }

        /* Styling for the list item elements in focus state when listview is in high contrast mode. */
        .oj-hicontrast .oj-listview-item.oj-focus-highlight,
        .oj-hicontrast .oj-listview-group-item.oj-focus-highlight {
            outline-width: 2px;
            outline-style: dotted;
            border-width: 0 1px 1px 0;
            border-style: dotted;
        }

        /* Styling addition for group items */
        .oj-listview-group-item {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            font-weight: var(--oj-list-view-header-font-weight);
            color: var(--oj-header-text-color);
            padding: var(--oj-panel-padding);
            border: 0 solid var(--oj-header-border-color);
            border-width: var(--oj-list-view-header-border-width-expanded);
            font-size: var(--oj-list-view-header-font-size);
            background-color: var(--oj-list-view-header-bg-color);
            opacity: var(--oj-list-view-header-opacity);
          } @else {
            font-weight: $listViewHeaderFontWeight;
            color: $headerTextColor;
            padding: $panelPadding;
            border: 0 solid $headerBorderColor;
            border-width: $listViewHeaderBorderWidth;
            font-size: $listViewHeaderFontSize;
            background-color: $headerBgColor;
            opacity: $listViewHeaderOpacity;
          }
            box-sizing: border-box;
            @include oj-rtl() {
                right: 0;
            }
        }

        .oj-listview-item-element.oj-expanded .oj-listview-group-item,
        .oj-listview-item-element.oj-collapsed .oj-listview-group-item {
            padding: 3px 0;
        }

        /* Styling for group items when it has no children or in collapsed state */
        .oj-listview-item-element.oj-collapsed .oj-listview-group-item,
        .oj-listview-group-item.oj-empty {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            border-width: var(--oj-list-view-header-border-width-collapsed);
          } @else {
            border-width: $listViewHeaderBorderWidthCollapsed;
          }
        }

        /* Styling for group item element that has focus */
        .oj-listview-group-item .oj-focus,
        .oj-listview-group-item .oj-selected {
            background-color: transparent;
            background-image: none;
        }

        /* Styling for group item element that is sticky */
        .oj-listview-group-item.oj-sticky {
            position: -webkit-sticky;
            position: sticky;
            top: 0;
            z-index: 1;
        }

        /* Styling for group item element that is pinned when scrolled */
        .oj-listview-group-item.oj-pinned {
            position: absolute;
            z-index: 1;
        }

        /* expand and collapse animation */
        .oj-listview-collapsible-transition {
            overflow: hidden;
        }

        /* Styling on the status text, such as fetching data */
        .oj-listview-status-message {
            position: absolute;
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            padding: var(--oj-panel-padding);
          } @else {
            padding: $panelPadding;
          }
            display: none;
        }

        /* Styling for the empty list text */
        .oj-listview-no-data-message {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            padding: var(--oj-panel-padding);
            background-color: var(--oj-collection-cell-bg-color);
            min-height: var(--oj-font-size);
          } @else {
            padding: $panelPadding;
            background-color: $collectionCellBgColor;
            min-height: $fontSize;
          }
        }

        /* Alignment for the expand and collapse icons */
        .oj-listview-expand-icon,
        .oj-listview-collapse-icon {
            padding: 9px;
        }

        /* Styling for the load icon while expanding */
        .oj-listview-expanding-icon {
            @extend .oj-fwk-icon-load;
            padding-top: 9px;
            padding-bottom: 9px;
            @include oj-rtl() {
                margin-right: 16px;
                margin-left: 9px;
            }
            @include oj-ltr() {
                margin-left: 16px;
                margin-right: 9px;
            }
        }

        /* Styling for group item when card layout is used */
        .oj-listview-card-layout .oj-listview-group {
            display: flex;
            flex-wrap: wrap;
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            margin-bottom: var(--oj-list-view-card-margin-top);
          } @else {
            margin-bottom: oj-shorthand-property-value-top($listViewCardMargin);
          }
        }

        /* Styling for item when card layout is used */
        .oj-listview-card-layout li.oj-listview-item {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            width: var(--oj-list-view-card-width);
            height: var(--oj-list-view-card-height);
            border: 1px solid var(--oj-panel-border-color);
            border-radius: var(--oj-panel-border-radius);
            margin-top: var(--oj-list-view-card-margin-top);
            margin-bottom: var(--oj-list-view-card-margin-bottom);
            @include oj-rtl() {
                margin-right: var(--oj-list-view-card-margin-start);
                margin-left: var(--oj-list-view-card-margin-end);
            }
            @include oj-ltr() {
                margin-left: var(--oj-list-view-card-margin-start);
                margin-right: var(--oj-list-view-card-margin-end);
            }
          } @else {
            width: $listViewCardWidth;
            height: $listViewCardHeight;
            border: 1px solid $panelBorderColor;
            border-radius: $panelBorderRadius;
            margin-top: oj-shorthand-property-value-top($listViewCardMargin);
            margin-bottom: oj-shorthand-property-value-bottom($listViewCardMargin);
            @include oj-rtl() {
                margin-right: oj-shorthand-property-value-left($listViewCardMargin);
                margin-left: oj-shorthand-property-value-right($listViewCardMargin);
            }
            @include oj-ltr() {
                margin-left: oj-shorthand-property-value-left($listViewCardMargin);
                margin-right: oj-shorthand-property-value-right($listViewCardMargin);
            }
          }
            background-size: 0;
            box-sizing: border-box;
        }

        /* Styling for group content when listview is filling the entire width and card layout is used */
        /* for now, first level group header or no group headers only */
        .oj-listview.oj-full-width.oj-listview-card-layout > .oj-listview-element > li > .oj-listview-group,
        .oj-listview.oj-full-width > .oj-listview-card-layout > li > .oj-listview-group {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) { 
            @include oj-rtl() {
                margin-left: var(--oj-list-view-card-margin-start);
                margin-right: var(--oj-list-view-card-margin-end); 
            }
            @include oj-ltr() {
                margin-right: var(--oj-list-view-card-margin-start);
                margin-left: var(--oj-list-view-card-margin-end);
            }
          } @else {
            @include oj-rtl() {
                margin-left: oj-shorthand-property-value-left($listViewCardMargin);
                margin-right: oj-shorthand-property-value-right($listViewCardMargin);
            }
            @include oj-ltr() {
                margin-right: oj-shorthand-property-value-left($listViewCardMargin);
                margin-left: oj-shorthand-property-value-right($listViewCardMargin);
            }
          }
        }

        /* Styling for group header when listview is filling the entire width */
        /* for now, first level group header only */
        .oj-listview.oj-full-width > .oj-listview-element > li > .oj-listview-group-item {
            border-left-style: none;
            border-right-style: none;
        }

        /* Styling for the drill icon */
        .oj-listview-drill-icon {
            width: 16px;
            height: 16px;
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            color: var(--oj-list-view-drill-icon-color);
          } @else {
            color: $listViewDrillIconColor;
          }
        }

        /* Styling for the drill icon when item has focus */
        .oj-listview.oj-focus-ancestor .oj-listview-item.oj-focus .oj-listview-drill-icon {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            color: var(--oj-icon-color-active);
          } @else {
            color: $iconColorActive;
          }
        }

        /* Styling for the drill icon when item is selected */
        .oj-listview.oj-focus-ancestor .oj-listview-item.oj-selected .oj-listview-drill-icon {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            color: var(--oj-icon-color-selected);
          } @else {
            color: $iconColorSelected;
          }
        }

        /* Styling for the drill icon when hover over an item */
        .oj-listview-item.oj-hover .oj-listview-drill-icon {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            color: var(--oj-icon-color-hover);
          } @else {
            color: $iconColorHover;
          }
        }

        /* Styling for the container of the activity indicator for high watermark scrolling */
        .oj-listview-card-layout li.oj-listview-loading-icon-container {
            width: 100%;
            border-style: none;
        }

        /* Styling for the activity indicator for high watermark scrolling */
        .oj-listview-loading-icon {
            display: block;
            width: 40px;
            height: 40px;
            margin: auto;
            @include oj-icon-content(
                $icon: oj-image-url("spinner_full.gif"),
                $lowResProportion: 0.25
            );
        }

        /* Styling for the affordance icon */
        .oj-listview-drag-handle {
            @extend .oj-fwk-icon;
            @extend .oj-fwk-icon-move-handle;
            cursor: move;
        }

        /* Styling for the affordance icon when card layout is used */
        .oj-listview-card-layout .oj-listview-drag-handle {
            @extend .oj-fwk-icon-drag;
            background-image: none;
            width: auto;
            height: auto;
            font-size: 16px;
        }

        /* Styling for the drag image */
        .oj-listview-drag-image {
            background-color: transparent;
            position: absolute;
            top: -10000px;
            border: 1px solid transparent;
        }

        /* Styling for hiding the original item being dragged */
        .oj-listview-drag-item {
            display: none;
        }

        /* Styling item that is draggable (no affordance) */
        .oj-listview-item.oj-draggable {
            cursor: move;
        }

        /* Styling for the item that is being moved using drag */
        .oj-listview-item.oj-drag {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            box-shadow: var(--oj-box-shadow-lg);
            border-top: 1px solid var(--oj-collection-cell-drag-image-border-color);
            border-bottom: 1px solid var(--oj-collection-cell-drag-image-border-color);
          } @else {
            box-shadow: $largeBoxShadow;
            border-top: 1px solid $collectionCellDragImageBorderColor;
            border-bottom: 1px solid $collectionCellDragImageBorderColor;
          }
        }

        /* Styling all drop targets in the list */
        .oj-listview-item.oj-drop {
            box-sizing: border-box;
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            border: 1px solid var(--oj-drop-target-color-2);
            background-color: var(--oj-drop-target-color-1);
          } @else {
            border: 1px solid $dropTarget2Color;
            background-color: $dropTarget1Color;
          }
        }

        /* Styling on empty list as drop targets in the list */
        .oj-listview-empty-text.oj-drop {
          @if (variable-exists(outputOnlyCssVars) and $outputOnlyCssVars == true) {
            background-color: var(--oj-drop-target-color-1);
          } @else {
            background-color: $dropTarget1Color;
          }
        }

        /* Styling for an item that is cut during a context menu cut operation */
        .oj-listview-cut {
            opacity: 0.8;
        }

        $listViewDefaultOptions: ();
        $listViewAnimationDefaults: ();

        @if ($listViewAddAnimation) {
            $listViewAnimationDefaults: map-merge($listViewAnimationDefaults, (add: $listViewAddAnimation));
        }

        @if ($listViewRemoveAnimation) {
            $listViewAnimationDefaults: map-merge($listViewAnimationDefaults, (remove: $listViewRemoveAnimation));
        }

        @if ($listViewUpdateAnimation) {
            $listViewAnimationDefaults: map-merge($listViewAnimationDefaults, (update: $listViewUpdateAnimation));
        }

        @if ($listViewExpandAnimation) {
            $listViewAnimationDefaults: map-merge($listViewAnimationDefaults, (expand: $listViewExpandAnimation));
        }

        @if ($listViewCollapseAnimation) {
            $listViewAnimationDefaults: map-merge($listViewAnimationDefaults, (collapse: $listViewCollapseAnimation));
        }

        @if ($listViewPointerUpAnimation) {
            $listViewAnimationDefaults: map-merge($listViewAnimationDefaults, (pointerUp: $listViewPointerUpAnimation));
        }

        @if ($listViewAnimationDefaults) {
            $listViewDefaultOptions: map-merge($listViewDefaultOptions, (animation: $listViewAnimationDefaults));
        }

        @if ($loadingIndicatorDelayDuration) {
            $listViewDefaultOptions: map-merge($listViewDefaultOptions, (showIndicatorDelay: $loadingIndicatorDelayDuration));
        }

        .oj-listview-option-defaults {
            font-family: oj-json($listViewDefaultOptions);
        }

    }
}
